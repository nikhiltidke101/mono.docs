components:
  responses:
    bad-request:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-bad-request'
      description: 400 Bad Request.
    conflict:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-conflict'
      description: 409 Conflict.
    forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-forbidden'
      description: 403 Forbidden.
    internal-server-error:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-internal-server-error'
      description: 500 Internal Server Error.
    not-found:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-not-found'
      description: 404 Not Found.
    service-unavailable:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-service-unavailable'
      description: 503 Service Unavailable.
    too-many-requests:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-too-many-requests'
      description: 429 Too Many Requests.
      headers:
        Retry-After:
          schema:
            description: Number of seconds to wait before retrying.
            type: number
    unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-unauthorized'
      description: 401 Unauthorized.
  schemas:
    access-level:
      enum:
      - external
      - internal
      - private
      - public
      - restricted
      type: string
    account:
      allOf:
      - $ref: '#/components/schemas/org-base'
      - properties:
          artifacts:
            description: The artifacts attached to the Account.
            items:
              $ref: '#/components/schemas/artifact-summary'
            type: array
          custom_fields:
            description: Custom fields.
            type: object
          custom_schema_fragments:
            description: Custom schema fragments.
            example:
            - don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
            items:
              type: string
            type: array
          description:
            description: Description of the corresponding Account.
            type: string
          domains:
            description: Company's domain names. Example - 'devrev.ai'.
            items:
              type: string
            type: array
          external_refs:
            description: |
              External refs are unique identifiers from your customer system of
              records, stored as a list.
            items:
              type: string
            type: array
          owned_by:
            description: List of Dev user IDs owning this Account.
            items:
              $ref: '#/components/schemas/user-summary'
            type: array
          stock_schema_fragment:
            description: Stock schema fragment.
            example: don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
            type: string
          subtype:
            description: Subtype corresponding to the custom type fragment.
            type: string
          tags:
            description: Tags associated with an object.
            items:
              $ref: '#/components/schemas/tag-with-value'
            type: array
          tier:
            description: The Tier of the corresponding Account.
            type: string
        required:
        - external_refs
        - owned_by
        type: object
      title: account
    account-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          account:
            $ref: '#/components/schemas/account-summary'
        required:
        - account
        type: object
      title: account-search-summary
    account-summary:
      allOf:
      - $ref: '#/components/schemas/org-base-summary'
      title: account-summary
    accounts-create-request:
      description: |
        Request object to create a new account in the Dev organization.
      properties:
        artifacts:
          description: The IDs of the artifacts to associate with the account.
          example:
          - ARTIFACT-12345
          items:
            type: string
          type: array
        custom_fields:
          description: Application-defined custom fields.
          type: object
        description:
          description: Description of the account.
          type: string
        display_name:
          description: Name of the account.
          type: string
        domains:
          description: List of company's domain names. Example - ['devrev.ai'].
          items:
            type: string
          type: array
        external_refs:
          description: |
            External refs are unique identifiers from your customer system of
            records, stored as a list.
          items:
            type: string
          type: array
        owned_by:
          description: List of Dev users owning this account.
          items:
            type: string
          type: array
        schema_fragment_ids:
          description: Schema fragment IDs associated with this account SOR.
          example:
          - don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
          items:
            type: string
          type: array
        tags:
          description: Tags associated with the account.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
        tier:
          description: The tier of the account.
          type: string
        websites:
          description: |
            List of company websites. Example - ['www.devrev.ai',
            'www.marketplace.devrev.ai'].
          items:
            type: string
          type: array
      required:
      - display_name
      title: accounts-create-request
      type: object
    accounts-create-response:
      description: The response to creating a new account.
      properties:
        account:
          $ref: '#/components/schemas/account'
        default_rev_org:
          $ref: '#/components/schemas/rev-org'
      required:
      - account
      - default_rev_org
      title: accounts-create-response
      type: object
      x-go-name: AccountsCreateResponseBody
    accounts-delete-request:
      description: Request object to delete an account.
      properties:
        id:
          description: The ID of account to delete.
          example: ACC-12345
          type: string
      required:
      - id
      title: accounts-delete-request
      type: object
    accounts-delete-response:
      additionalProperties: false
      description: The response to deleting an account.
      title: accounts-delete-response
      type: object
      x-go-name: AccountsDeleteResponseBody
    accounts-export-request:
      description: The request to export a collection of accounts.
      properties:
        created_by:
          description: Filters for accounts created by the specified user(s).
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        custom_fields:
          description: Filters for custom fields.
          type: object
        display_name:
          description: Array of display names of accounts to be filtered.
          items:
            type: string
          type: array
        domains:
          description: Domains for accounts to be filtered.
          items:
            type: string
          type: array
        external_refs:
          description: Array of references of accounts to be filtered.
          items:
            type: string
          type: array
        first:
          description: The number of accounts to return. The default is '50'.
          format: int32
          maximum: 500
          minimum: 1
          type: integer
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: Filters for accounts owned by the specified user(s).
          items:
            type: string
          type: array
        sort_by:
          description: |
            Fields to sort the accounts by and the direction to sort them in.
          items:
            type: string
          type: array
        stage:
          description: Filters for accounts on specified stages.
          items:
            type: string
          type: array
        tags:
          description: List of tags to be filtered.
          items:
            type: string
          type: array
      title: accounts-export-request
      type: object
    accounts-export-response:
      description: The response to exporting a collection of accounts.
      properties:
        accounts:
          description: The exported accounts.
          items:
            $ref: '#/components/schemas/account'
          type: array
      required:
      - accounts
      title: accounts-export-response
      type: object
      x-go-name: AccountsExportResponseBody
    accounts-filters:
      properties:
        created_by:
          description: Filters for accounts created by the specified user(s).
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        custom_fields:
          description: Filters for custom fields.
          type: object
        display_name:
          description: Array of display names of accounts to be filtered.
          items:
            type: string
          type: array
        domains:
          description: Domains for accounts to be filtered.
          items:
            type: string
          type: array
        external_refs:
          description: Array of references of accounts to be filtered.
          items:
            type: string
          type: array
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: Filters for accounts owned by the specified user(s).
          items:
            type: string
          type: array
        stage:
          description: Filters for accounts on specified stages.
          items:
            type: string
          type: array
        tags:
          description: List of tags to be filtered.
          items:
            type: string
          type: array
      title: accounts-filters
      type: object
    accounts-get-request:
      description: Request object to get an account's information.
      properties:
        id:
          description: The ID of the account to be retrieved.
          example: ACC-12345
          type: string
      required:
      - id
      title: accounts-get-request
      type: object
    accounts-get-response:
      description: The returned account.
      properties:
        account:
          $ref: '#/components/schemas/account'
      required:
      - account
      title: accounts-get-response
      type: object
      x-go-name: AccountsGetResponseBody
    accounts-list-request:
      description: List the accounts.
      properties:
        created_by:
          description: Filters for accounts created by the specified user(s).
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        custom_fields:
          description: Filters for custom fields.
          type: object
        display_name:
          description: Array of display names of accounts to be filtered.
          items:
            type: string
          type: array
        domains:
          description: Domains for accounts to be filtered.
          items:
            type: string
          type: array
        external_refs:
          description: Array of references of accounts to be filtered.
          items:
            type: string
          type: array
        limit:
          description: |
            The maximum number of accounts to return per page. The default is
            '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: Filters for accounts owned by the specified user(s).
          items:
            type: string
          type: array
        sort_by:
          description: |
            Fields to sort the accounts by and the direction to sort them in.
          items:
            type: string
          type: array
        stage:
          description: Filters for accounts on specified stages.
          items:
            type: string
          type: array
        tags:
          description: List of tags to be filtered.
          items:
            type: string
          type: array
      title: accounts-list-request
      type: object
    accounts-list-response:
      description: |
        The response to listing all accounts matching the filter criteria.
      properties:
        accounts:
          description: List containing all the accounts
          items:
            $ref: '#/components/schemas/account'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - accounts
      title: accounts-list-response
      type: object
      x-go-name: AccountsListResponseBody
    accounts-update-request:
      description: Request to update details of the account.
      properties:
        artifacts:
          $ref: '#/components/schemas/accounts-update-request-artifacts'
        custom_fields:
          description: Application-defined custom fields.
          type: object
        description:
          description: Updated description of the account.
          type: string
        display_name:
          description: Updated display name for the account.
          type: string
        domains:
          description: |
            Updated list of company's domain names. Example - ['devrev.ai'].
          items:
            type: string
          type: array
        external_refs:
          description: Updated External Refs of account.
          items:
            type: string
          type: array
        id:
          description: The ID of account to update.
          example: ACC-12345
          type: string
        owned_by:
          description: Updated list of the users owning this account.
          items:
            type: string
          type: array
        schema_fragment_ids:
          description: Schema fragment IDs associated with this account SOR.
          example:
          - don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
          items:
            type: string
          type: array
        tags:
          description: Updated tags list associated with the account.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
        tier:
          description: Updated tier of the account.
          nullable: true
          type: string
      required:
      - id
      title: accounts-update-request
      type: object
    accounts-update-request-artifacts:
      properties:
        set:
          description: Sets the IDs to the provided artifact IDs.
          example:
          - ARTIFACT-12345
          items:
            type: string
          type: array
      title: accounts-update-request-artifacts
      type: object
    accounts-update-response:
      description: Updated account object.
      properties:
        account:
          $ref: '#/components/schemas/account'
      required:
      - account
      title: accounts-update-response
      type: object
      x-go-name: AccountsUpdateResponseBody
    aggregated-schema:
      additionalProperties: false
      description: List of custom fields from multiple source fragments.
      title: aggregated-schema
      type: object
    aggregated-schema-get-request:
      properties:
        custom_schema_fragment_ids:
          description: |
            The list of custom schema fragment DONs which are to be aggregated.
          items:
            type: string
          type: array
        leaf_type:
          description: |
            The leaf type. Used for inferring the default stage diagram and
            tenant fragment ID.
          type: string
        per_object_schema:
          description: Per object schema, if associated with the leaf type.
          items:
            $ref: '#/components/schemas/field-descriptor'
          type: array
        stock_schema_fragment_id:
          description: The stock schema fragment which is to be aggregated.
          type: string
      required:
      - custom_schema_fragment_ids
      title: aggregated-schema-get-request
      type: object
    aggregated-schema-get-response:
      properties:
        schema:
          $ref: '#/components/schemas/aggregated-schema'
      required:
      - schema
      title: aggregated-schema-get-response
      type: object
      x-go-name: AggregatedSchemaGetResponseBody
    aggregation-detail:
      description: Stores aggregation type and dimension information.
      properties:
        aggregation_type:
          $ref: '#/components/schemas/aggregation-detail-aggregation-type'
        unique_dimension:
          description: |
            Unique dimension if provided to be considered for grouping metering
            data for the UOM.
          type: string
      required:
      - aggregation_type
      title: aggregation-detail
      type: object
    aggregation-detail-aggregation-type:
      description: |
        Aggregation type to be used while aggregating the metering data for the
        UOM. 1] Sum - sum of all the values for the meter in a given period Ex.
        { M1:2, M1:4 } => {M1:6} 2] Minimum - min of all the values for the
        meter in a given period Ex. { M1:2, M1:4 } => {M1:2} 3] Maximum - max
        of all the values for the meter in a given period Ex. { M1:2, M1:4 } =>
        {M1:4} 4] Unique Count - Sum of distinct unique dimension observed for
        the meter in the given period (not considering the data from the
        previous billing period) Ex. January {M1:{VM:VM0}}, February
        {M1:{VM:VM1}, M1:{VM:VM2}, M1:{VM:VM1}} => {M1:2} 5] Running Total -
        Sum of distinct active unique dimension observed for a meter in the
        given period, taking into consideration the active data from the
        previous billing cycle Ex. January {M1:{VM:VM0,on}, {M1:{VM:VM1,off}
        February {M1:{VM:VM2, on}, M1:{VM:VM2, off}, M1:{VM:VM3, on}} => {M1:3}
        6] Duration - Sum of distinct active unique dimension duration for a
        meter in the given period, taking into consideration the active data
        from the previous month Ex. January15 {M1:{VM:VM0,on, 4}} February15
        {M1:{VM:VM0,off}, February18 {M1:{VM:VM1,on,5} => M1->
        30*4*charge_per_day + 10*5*charge_per_day 7] Latest - consider the
        latest/last meter in the given period 8] Oldest - consider the
        oldest/first record in the given period.
      enum:
      - duration
      - latest
      - maximum
      - minimum
      - oldest
      - running_total
      - sum
      - unique_count
      type: string
    app-fragment:
      allOf:
      - $ref: '#/components/schemas/custom-schema-fragment-base'
      - properties:
          app:
            description: App this fragment applies to.
            type: string
        type: object
      title: app-fragment
    app-fragment-summary:
      allOf:
      - $ref: '#/components/schemas/custom-schema-fragment-base-summary'
      title: app-fragment-summary
    archetype-metric-target:
      description: Metric with corresponding target values.
      properties:
        is_out_of_schedule:
          description: |
            If true, the schedule attached to this metric is out of schedule at
            the time of the query.
          type: boolean
        metric_definition:
          $ref: '#/components/schemas/metric-definition-summary'
        org_schedule:
          $ref: '#/components/schemas/org-schedule-summary'
        remaining_time:
          description: Time in minutes that remains on a paused metric.
          format: int32
          type: integer
        target_time:
          description: |
            Time at which the metric would breach SLA if no action taken.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
        warning_target_time:
          description: |
            Time at which the metric would reach the SLA warning limit if no
            action taken.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      required:
      - metric_definition
      title: archetype-metric-target
      type: object
    article:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          applies_to_parts:
            description: Details of the parts relevant to the article.
            items:
              $ref: '#/components/schemas/part-summary'
            type: array
          description:
            description: Description of the article.
            type: string
          extracted_content:
            description: Artifacts containing the extracted content.
            items:
              $ref: '#/components/schemas/artifact-summary'
            type: array
          num_downvotes:
            description: Number of downvotes on the article.
            format: int32
            type: integer
          num_upvotes:
            description: Number of upvotes on the article.
            format: int32
            type: integer
          parent:
            $ref: '#/components/schemas/directory-summary'
          rank:
            description: Rank of the article.
            type: string
          resource:
            $ref: '#/components/schemas/resource'
          title:
            description: Title of the article.
            type: string
        required:
        - applies_to_parts
        type: object
      title: article
    article-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          article:
            $ref: '#/components/schemas/article-summary'
        required:
        - article
        type: object
      title: article-search-summary
    article-status:
      description: Status of the article.
      enum:
      - archived
      - draft
      - published
      - review_needed
      type: string
    article-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          resource:
            $ref: '#/components/schemas/resource-summary'
          title:
            description: Title of the article.
            type: string
        type: object
      title: article-summary
    articles-count-request:
      properties:
        ancestor:
          description: The ancestor directory of the articles.
          type: string
        applies_to_parts:
          description: |
            Filters for articles belonging to any of the provided parts.
          example:
          - PROD-12345
          items:
            type: string
          type: array
        authored_by:
          description: |
            Filters for articles authored by any of the provided users.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        created_by:
          description: |
            Filters for articles created by any of the provided users.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        modified_by:
          description: |
            Filters for articles modified by any of the provided users.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        owned_by:
          description: Filters for articles owned by any of the provided users.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        shared_with:
          description: Filter for articles based on intended audience.
          items:
            $ref: '#/components/schemas/shared-with-membership-filter'
          type: array
      title: articles-count-request
      type: object
    articles-count-response:
      properties:
        count:
          description: The total number of articles matching the filter.
          format: int32
          type: integer
      required:
      - count
      title: articles-count-response
      type: object
      x-go-name: ArticlesCountResponseBody
    articles-create-request:
      description: The request to create an article.
      properties:
        access_level:
          $ref: '#/components/schemas/access-level'
        applies_to_parts:
          description: The parts that the article applies to.
          example:
          - PROD-12345
          items:
            type: string
          minItems: 1
          type: array
        authored_by:
          description: The authors of the article.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        description:
          description: Description for the article.
          type: string
        extracted_content:
          description: ID of the extracted content artifact.
          example:
          - ARTIFACT-12345
          items:
            type: string
          type: array
        language:
          description: Language of the article.
          type: string
        owned_by:
          description: The users that own the article.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        parent:
          description: The parent directory of the article.
          type: string
        published_at:
          description: The published date of the article.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
        resource:
          $ref: '#/components/schemas/articles-create-request-resource'
        shared_with:
          description: |
            Information about the role the member receives due to the share.
          items:
            $ref: '#/components/schemas/set-shared-with-membership'
          type: array
        status:
          $ref: '#/components/schemas/article-status'
        tags:
          description: Tags associated with the article.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
        title:
          description: Name of the article.
          type: string
      required:
      - applies_to_parts
      - owned_by
      - resource
      - title
      title: articles-create-request
      type: object
    articles-create-request-resource:
      properties:
        artifacts:
          description: IDs of the artifacts.
          example:
          - ARTIFACT-12345
          items:
            type: string
          type: array
        published_version:
          description: The latest published version.
          type: string
        url:
          description: URL of the external article.
          type: string
      title: articles-create-request-resource
      type: object
    articles-create-response:
      description: Create article response.
      properties:
        article:
          $ref: '#/components/schemas/article'
      required:
      - article
      title: articles-create-response
      type: object
      x-go-name: ArticlesCreateResponseBody
    articles-delete-request:
      description: The request to delete an article.
      properties:
        id:
          description: The ID of the article to delete.
          example: ARTICLE-12345
          type: string
      required:
      - id
      title: articles-delete-request
      type: object
    articles-delete-response:
      additionalProperties: false
      title: articles-delete-response
      type: object
      x-go-name: ArticlesDeleteResponseBody
    articles-get-request:
      description: The request to get an article.
      properties:
        id:
          description: The ID of the required article.
          example: ARTICLE-12345
          type: string
      required:
      - id
      title: articles-get-request
      type: object
    articles-get-response:
      description: Get article response.
      properties:
        article:
          $ref: '#/components/schemas/article'
      required:
      - article
      title: articles-get-response
      type: object
      x-go-name: ArticlesGetResponseBody
    articles-list-request:
      description: The request to list articles.
      properties:
        applies_to_parts:
          description: |
            Filters for articles belonging to any of the provided parts.
          example:
          - PROD-12345
          items:
            type: string
          type: array
        authored_by:
          description: |
            Filters for articles authored by any of the provided users.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        created_by:
          description: |
            Filters for articles created by any of the provided users.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of articles to return. The default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_by:
          description: |
            Filters for articles modified by any of the provided users.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        owned_by:
          description: Filters for articles owned by any of the provided users.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        shared_with:
          description: Filter for articles based on intended audience.
          items:
            $ref: '#/components/schemas/shared-with-membership-filter'
          type: array
      title: articles-list-request
      type: object
    articles-list-response:
      description: List articles response.
      properties:
        articles:
          description: The article entries matching the request.
          items:
            $ref: '#/components/schemas/article'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        total:
          description: Total number of article items for the request.
          format: int32
          type: integer
      required:
      - articles
      - total
      title: articles-list-response
      type: object
      x-go-name: ArticlesListResponseBody
    articles-update-request:
      description: The request to update an article.
      properties:
        access_level:
          $ref: '#/components/schemas/access-level'
        applies_to_parts:
          $ref: '#/components/schemas/articles-update-request-applies-to-parts'
        artifacts:
          $ref: '#/components/schemas/articles-update-request-artifacts'
        authored_by:
          $ref: '#/components/schemas/articles-update-request-authored-by'
        description:
          description: |
            Updated description of the article object, or unchanged if not
            provided.
          type: string
        extracted_content:
          $ref: '#/components/schemas/articles-update-request-extracted-content'
        id:
          description: The article's ID.
          example: ARTICLE-12345
          type: string
        language:
          description: Updates the language of the article.
          type: string
        owned_by:
          $ref: '#/components/schemas/articles-update-request-owned-by'
        parent:
          description: The updated parent directory for the article.
          nullable: true
          type: string
        published_version:
          description: Updates the the latest published version.
          type: string
        reorder:
          $ref: '#/components/schemas/articles-update-request-reorder'
        shared_with:
          $ref: '#/components/schemas/articles-update-request-shared-with'
        status:
          $ref: '#/components/schemas/article-status'
        tags:
          $ref: '#/components/schemas/articles-update-request-tags'
        title:
          description: |
            Updated title of the article object, or unchanged if not provided.
          type: string
        url:
          description: Updates the URL of the external article.
          type: string
      required:
      - id
      title: articles-update-request
      type: object
    articles-update-request-applies-to-parts:
      properties:
        set:
          description: Updates the parts that the article applies to.
          example:
          - PROD-12345
          items:
            type: string
          type: array
      title: articles-update-request-applies-to-parts
      type: object
    articles-update-request-artifacts:
      properties:
        set:
          description: Updates IDs of the artifacts.
          example:
          - ARTIFACT-12345
          items:
            type: string
          type: array
      title: articles-update-request-artifacts
      type: object
    articles-update-request-authored-by:
      properties:
        set:
          description: Sets the users that authored the article.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      title: articles-update-request-authored-by
      type: object
    articles-update-request-extracted-content:
      properties:
        set:
          description: Update the ID of the extracted content.
          example:
          - ARTIFACT-12345
          items:
            type: string
          type: array
      title: articles-update-request-extracted-content
      type: object
    articles-update-request-owned-by:
      properties:
        set:
          description: |
            Sets the owner IDs to the provided user IDs. This must not be
            empty.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      title: articles-update-request-owned-by
      type: object
    articles-update-request-reorder:
      properties:
        after:
          description: The article after which the reordered article is placed.
          example: ARTICLE-12345
          type: string
        before:
          description: |
            The article before which the reordered article is placed.
          example: ARTICLE-12345
          type: string
      title: articles-update-request-reorder
      type: object
    articles-update-request-shared-with:
      properties:
        set:
          description: Sets the field to the provided membership list.
          items:
            $ref: '#/components/schemas/set-shared-with-membership'
          type: array
      title: articles-update-request-shared-with
      type: object
    articles-update-request-tags:
      properties:
        set:
          description: Sets the provided tags on the article.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
      title: articles-update-request-tags
      type: object
    articles-update-response:
      properties:
        article:
          $ref: '#/components/schemas/article'
      required:
      - article
      title: articles-update-response
      type: object
      x-go-name: ArticlesUpdateResponseBody
    artifact-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          artifact:
            $ref: '#/components/schemas/artifact-summary'
        required:
        - artifact
        type: object
      title: artifact-search-summary
    artifact-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: artifact-summary
    artifacts-prepare-request:
      description: The request to prepare a URL to upload a file.
      properties:
        file_name:
          description: The name of the file that's being uploaded.
          type: string
        file_type:
          description: The type of file that's being uploaded.
          type: string
      required:
      - file_name
      title: artifacts-prepare-request
      type: object
    artifacts-prepare-response:
      description: The response to preparing a URL to upload a file.
      properties:
        form_data:
          description: The POST policy form data.
          items:
            $ref: '#/components/schemas/artifacts-prepare-response-form-data'
          type: array
        id:
          description: The generated artifact's ID.
          example: ARTIFACT-12345
          type: string
        url:
          description: The URL that the file's data should be uploaded to.
          type: string
      required:
      - form_data
      - id
      - url
      title: artifacts-prepare-response
      type: object
      x-go-name: ArtifactsPrepareResponseBody
    artifacts-prepare-response-form-data:
      properties:
        key:
          description: Key of the form field.
          type: string
        value:
          description: Value corresponding to the key.
          type: string
      required:
      - key
      - value
      title: artifacts-prepare-response-form-data
      type: object
    artifacts-versions-prepare-request:
      description: The request to prepare a new version of an artifact.
      properties:
        id:
          description: The ID of the artifact to prepare a new version for.
          example: ARTIFACT-12345
          type: string
      required:
      - id
      title: artifacts-versions-prepare-request
      type: object
    artifacts-versions-prepare-response:
      description: The response to preparing a new artifact version.
      properties:
        form_data:
          description: The POST policy form data.
          items:
            $ref: '#/components/schemas/artifacts-versions-prepare-response-form-data'
          type: array
        url:
          description: The URL that the file's data should be uploaded to.
          type: string
      required:
      - form_data
      - url
      title: artifacts-versions-prepare-response
      type: object
      x-go-name: ArtifactsVersionsPrepareResponseBody
    artifacts-versions-prepare-response-form-data:
      properties:
        key:
          description: Key of the form field.
          type: string
        value:
          description: Value corresponding to the key.
          type: string
      required:
      - key
      - value
      title: artifacts-versions-prepare-response-form-data
      type: object
    atom-base:
      properties:
        created_by:
          $ref: '#/components/schemas/user-summary'
        created_date:
          description: Timestamp when the object was created.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
        display_id:
          description: Human-readable object ID unique to the Dev organization.
          type: string
        id:
          description: Globally unique object ID.
          type: string
        modified_by:
          $ref: '#/components/schemas/user-summary'
        modified_date:
          description: Timestamp when the object was last modified.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      required:
      - id
      title: atom-base
      type: object
    atom-base-summary:
      properties:
        display_id:
          description: Human-readable object ID unique to the Dev organization.
          type: string
        id:
          description: Globally unique object ID.
          type: string
      required:
      - id
      title: atom-base-summary
      type: object
    atom-summary:
      discriminator:
        mapping:
          account: '#/components/schemas/account-summary'
          app_fragment: '#/components/schemas/app-fragment-summary'
          capability: '#/components/schemas/capability-summary'
          conversation: '#/components/schemas/conversation-summary'
          custom_type_fragment: '#/components/schemas/custom-type-fragment-summary'
          dev_user: '#/components/schemas/dev-user-summary'
          engagement: '#/components/schemas/engagement-summary'
          enhancement: '#/components/schemas/enhancement-summary'
          feature: '#/components/schemas/feature-summary'
          issue: '#/components/schemas/issue-summary'
          meeting: '#/components/schemas/meeting-summary'
          opportunity: '#/components/schemas/opportunity-summary'
          product: '#/components/schemas/product-summary'
          rev_org: '#/components/schemas/rev-org-summary'
          rev_user: '#/components/schemas/rev-user-summary'
          service_account: '#/components/schemas/service-account-summary'
          sys_user: '#/components/schemas/sys-user-summary'
          tag: '#/components/schemas/tag-summary'
          task: '#/components/schemas/task-summary'
          tenant_fragment: '#/components/schemas/tenant-fragment-summary'
          ticket: '#/components/schemas/ticket-summary'
          timeline_comment: '#/components/schemas/timeline-comment-summary'
          webhook: '#/components/schemas/webhook-summary'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/account-summary'
      - $ref: '#/components/schemas/app-fragment-summary'
      - $ref: '#/components/schemas/capability-summary'
      - $ref: '#/components/schemas/conversation-summary'
      - $ref: '#/components/schemas/custom-type-fragment-summary'
      - $ref: '#/components/schemas/dev-user-summary'
      - $ref: '#/components/schemas/engagement-summary'
      - $ref: '#/components/schemas/enhancement-summary'
      - $ref: '#/components/schemas/feature-summary'
      - $ref: '#/components/schemas/issue-summary'
      - $ref: '#/components/schemas/meeting-summary'
      - $ref: '#/components/schemas/opportunity-summary'
      - $ref: '#/components/schemas/product-summary'
      - $ref: '#/components/schemas/rev-org-summary'
      - $ref: '#/components/schemas/rev-user-summary'
      - $ref: '#/components/schemas/service-account-summary'
      - $ref: '#/components/schemas/sys-user-summary'
      - $ref: '#/components/schemas/tag-summary'
      - $ref: '#/components/schemas/task-summary'
      - $ref: '#/components/schemas/tenant-fragment-summary'
      - $ref: '#/components/schemas/ticket-summary'
      - $ref: '#/components/schemas/timeline-comment-summary'
      - $ref: '#/components/schemas/webhook-summary'
      properties:
        type:
          $ref: '#/components/schemas/atom-type'
      required:
      - type
      title: atom-summary
      type: object
    atom-type:
      enum:
      - account
      - app_fragment
      - capability
      - conversation
      - custom_type_fragment
      - dev_user
      - engagement
      - enhancement
      - feature
      - issue
      - meeting
      - opportunity
      - product
      - rev_org
      - rev_user
      - service_account
      - sys_user
      - tag
      - task
      - tenant_fragment
      - ticket
      - timeline_comment
      - webhook
      type: string
    boolean-expression:
      description: Boolean expression.
      discriminator:
        mapping:
          and: '#/components/schemas/boolean-expression-and-expression'
          not: '#/components/schemas/boolean-expression-not-expression'
          or: '#/components/schemas/boolean-expression-or-expression'
          primitive: '#/components/schemas/boolean-expression-primitive-expression'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/boolean-expression-and-expression'
      - $ref: '#/components/schemas/boolean-expression-not-expression'
      - $ref: '#/components/schemas/boolean-expression-or-expression'
      - $ref: '#/components/schemas/boolean-expression-primitive-expression'
      properties:
        type:
          $ref: '#/components/schemas/boolean-expression-type'
      required:
      - type
      title: boolean-expression
      type: object
    boolean-expression-and-expression:
      description: All the expressions would be 'and'ed together.
      properties:
        expressions:
          items:
            $ref: '#/components/schemas/boolean-expression'
          type: array
      required:
      - expressions
      title: boolean-expression-and-expression
      type: object
    boolean-expression-not-expression:
      description: The expression would be negated.
      properties:
        expression:
          $ref: '#/components/schemas/boolean-expression'
      required:
      - expression
      title: boolean-expression-not-expression
      type: object
    boolean-expression-or-expression:
      description: All the expressions would be 'or'ed together.
      properties:
        expressions:
          items:
            $ref: '#/components/schemas/boolean-expression'
          type: array
      required:
      - expressions
      title: boolean-expression-or-expression
      type: object
    boolean-expression-primitive-expression:
      additionalProperties: false
      description: The primitive expression type.
      title: boolean-expression-primitive-expression
      type: object
    boolean-expression-type:
      enum:
      - and
      - not
      - or
      - primitive
      type: string
    capability:
      allOf:
      - $ref: '#/components/schemas/part-base'
      title: capability
    capability-summary:
      allOf:
      - $ref: '#/components/schemas/part-base-summary'
      title: capability-summary
    client-context:
      description: Properties of client to be used in track API.
      properties:
        browser:
          $ref: '#/components/schemas/client-context-browser'
        cpu:
          $ref: '#/components/schemas/client-context-cpu'
        device:
          $ref: '#/components/schemas/client-context-device'
        engine:
          $ref: '#/components/schemas/client-context-engine'
        ip:
          description: IP address of the client.
          type: string
        locale:
          description: 'The client''s locale, example: en-US.'
          type: string
        os:
          $ref: '#/components/schemas/client-context-os'
        page:
          $ref: '#/components/schemas/client-context-page'
        timezone:
          description: 'The client''s timezone, example: Asia/Kolkata.'
          type: string
        user_agent:
          description: |
            User agent of the client, example: Mozilla/5.0 (Macintosh; Intel
            Mac OS X.
          type: string
      title: client-context
      type: object
    client-context-browser:
      description: Properties of client's browser to be used in track API.
      properties:
        name:
          description: 'The browser''s name, example: Chrome, Safari.'
          type: string
        version:
          description: 'The browser''s version, example: 53.0.2785.143.'
          type: string
      title: client-context-browser
      type: object
    client-context-cpu:
      description: Properties of client's CPU to be used in track API.
      properties:
        architecture:
          description: 'CPU architecture, example: amd64.'
          type: string
      title: client-context-cpu
      type: object
    client-context-device:
      description: Properties of client's device to be used in track API.
      properties:
        manufacturer:
          description: 'Device manufacturer, example: Apple.'
          type: string
        model:
          description: 'Device model, example: iphone 6s.'
          type: string
        type:
          description: 'Device type, example: mobile, tablet, desktop.'
          type: string
      title: client-context-device
      type: object
    client-context-engine:
      description: Properties of client's engine to be used in track API.
      properties:
        name:
          description: 'The engine''s name, example: Blink, WebKit.'
          type: string
        version:
          description: 'The engine''s version, example: 537.36.'
          type: string
      title: client-context-engine
      type: object
    client-context-os:
      description: Properties of client's OS to be used in track API.
      properties:
        name:
          description: 'The OS''s name, example : Windows, Mac OS X.'
          type: string
        version:
          description: 'The OS''s version, example : 10.11.1.'
          type: string
      title: client-context-os
      type: object
    client-context-page:
      description: Properties of client's page to be used in track API.
      properties:
        domain:
          description: 'Page domain, example: devrev.ai'
          type: string
        path:
          description: 'Page path, example: /pricing'
          type: string
        referrer:
          description: 'Page referrer, example: https://devrev.ai'
          type: string
        title:
          description: 'Page title, example: Pricing'
          type: string
        url:
          description: 'Page URL, example: https://devrev.ai/pricing'
          type: string
      title: client-context-page
      type: object
    code-change:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          branch:
            description: Name of the code branch in the repo.
            type: string
          description:
            description: Detailed description of the contents of this change.
            type: string
          external_identifier:
            description: |
              Unique external identifier for this change.e.g Pull Request URL.
            type: string
          filtered_loc:
            $ref: '#/components/schemas/lines-of-code'
          repo_url:
            description: URL pointing to the repo this change was on.
            type: string
          source:
            $ref: '#/components/schemas/code-change-source'
          title:
            description: Title describing in brief the contents of this change.
            type: string
          total_loc:
            $ref: '#/components/schemas/lines-of-code'
        type: object
      title: code-change
    code-change-source:
      description: Source of the code change object.
      enum:
      - github
      type: string
    code-changes-create-request:
      additionalProperties: false
      title: code-changes-create-request
      type: object
    code-changes-create-response:
      properties:
        code_change:
          $ref: '#/components/schemas/code-change'
      required:
      - code_change
      title: code-changes-create-response
      type: object
      x-go-name: CodeChangesCreateResponseBody
    code-changes-delete-request:
      properties:
        id:
          description: ID of the code change object which is to be deleted.
          type: string
      required:
      - id
      title: code-changes-delete-request
      type: object
    code-changes-delete-response:
      additionalProperties: false
      title: code-changes-delete-response
      type: object
      x-go-name: CodeChangesDeleteResponseBody
    code-changes-get-request:
      properties:
        id:
          description: The code change object ID.
          type: string
      required:
      - id
      title: code-changes-get-request
      type: object
    code-changes-get-response:
      properties:
        code_change:
          $ref: '#/components/schemas/code-change'
      required:
      - code_change
      title: code-changes-get-response
      type: object
      x-go-name: CodeChangesGetResponseBody
    code-changes-list-request:
      properties:
        created_date:
          $ref: '#/components/schemas/date-filter'
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of code change objects to return. The default is
            '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-filter'
      title: code-changes-list-request
      type: object
    code-changes-list-response:
      properties:
        code_changes:
          description: The list of requested code change objects.
          items:
            $ref: '#/components/schemas/code-change'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - code_changes
      title: code-changes-list-response
      type: object
      x-go-name: CodeChangesListResponseBody
    code-changes-update-request:
      properties:
        id:
          description: The ID of the code change object to be updated.
          type: string
      required:
      - id
      title: code-changes-update-request
      type: object
    code-changes-update-response:
      properties:
        code_change:
          $ref: '#/components/schemas/code-change'
      required:
      - code_change
      title: code-changes-update-response
      type: object
      x-go-name: CodeChangesUpdateResponseBody
    conversation:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          description:
            description: Description of the conversation object.
            type: string
          group:
            $ref: '#/components/schemas/group-summary'
          members:
            description: The users in the conversation.
            items:
              $ref: '#/components/schemas/user-summary'
            type: array
          messages:
            description: The latest messages on the conversation.
            items:
              $ref: '#/components/schemas/timeline-entry'
            type: array
          metadata:
            $ref: '#/components/schemas/conversation-metadata'
          owned_by:
            description: Owner IDs for the conversation.
            items:
              $ref: '#/components/schemas/user-summary'
            type: array
          sla_tracker:
            $ref: '#/components/schemas/sla-tracker-summary'
          stage:
            $ref: '#/components/schemas/legacy-stage'
          tags:
            description: Tags associated with the object.
            items:
              $ref: '#/components/schemas/tag-with-value'
            type: array
          title:
            description: Title of the conversation object.
            type: string
        required:
        - members
        type: object
      title: conversation
    conversation-metadata:
      description: Metadata on conversation.
      properties:
        url_context:
          description: |
            URL from which the conversation was created if the conversation was
            created via PLuG.
          type: string
      title: conversation-metadata
      type: object
    conversation-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          conversation:
            $ref: '#/components/schemas/conversation-summary'
        required:
        - conversation
        type: object
      title: conversation-search-summary
    conversation-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          title:
            description: Title of the conversation object.
            type: string
        type: object
      title: conversation-summary
    conversations-create-request:
      description: The request to create a new conversation.
      properties:
        description:
          description: Description for the conversation.
          type: string
        group:
          description: The group that the conversation is associated with.
          type: string
        is_spam:
          description: Whether the conversation is spam.
          type: boolean
        members:
          description: The users in the conversation.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        messages:
          description: Initial messages on the conversation.
          items:
            $ref: '#/components/schemas/conversations-create-request-message'
          type: array
        metadata:
          $ref: '#/components/schemas/conversations-create-request-metadata'
        source_channel:
          description: Whether the conversation is from a source channel.
          type: string
        stage:
          $ref: '#/components/schemas/stage-init'
        tags:
          description: Tags associated with the conversation.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
        title:
          description: The title for the conversation.
          type: string
        type:
          $ref: '#/components/schemas/conversations-create-request-type-value'
        user_sessions:
          description: |
            The IDs of user sessions associated with the conversation.
          items:
            type: string
          type: array
      required:
      - type
      title: conversations-create-request
      type: object
    conversations-create-request-message:
      properties:
        artifacts:
          description: The IDs of the artifacts to the message.
          example:
          - ARTIFACT-12345
          items:
            type: string
          type: array
        body:
          description: The message's body.
          type: string
      title: conversations-create-request-message
      type: object
    conversations-create-request-metadata:
      properties:
        url_context:
          type: string
      title: conversations-create-request-metadata
      type: object
    conversations-create-request-type-value:
      enum:
      - support
      type: string
    conversations-create-response:
      description: The response to creating a new conversation.
      properties:
        conversation:
          $ref: '#/components/schemas/conversation'
      required:
      - conversation
      title: conversations-create-response
      type: object
      x-go-name: ConversationsCreateResponseBody
    conversations-delete-request:
      description: The request to delete a conversation.
      properties:
        id:
          description: The ID of the conversation to delete.
          type: string
      required:
      - id
      title: conversations-delete-request
      type: object
    conversations-delete-response:
      additionalProperties: false
      description: The response for deleting a conversation.
      title: conversations-delete-response
      type: object
      x-go-name: ConversationsDeleteResponseBody
    conversations-export-request:
      properties:
        applies_to_parts:
          description: |
            Filters for conversations belonging to any of the provided parts.
          example:
          - PROD-12345
          items:
            type: string
          type: array
        first:
          description: |
            The number of conversation items to return. The default is '50',
            the maximum is '5000'.
          format: int32
          type: integer
        group:
          description: |
            Filters for conversation that belong to the given groups.
          items:
            type: string
          type: array
        is_creator_verified:
          description: |
            Filters for conversations that are created by verified users.
          type: boolean
        is_spam:
          description: Filters for conversations that are spam.
          type: boolean
        members:
          description: |
            Filters for conversations where these users are participants.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        owned_by:
          description: Filters for conversations owned by any of these users.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        rev_org:
          description: |
            Filters for conversations that are associated with any of the
            provided Rev organizations.
          example:
          - REV-AbCdEfGh
          items:
            type: string
          type: array
        sla_summary:
          $ref: '#/components/schemas/sla-summary-filter'
        source_channels:
          description: |
            Filters for conversations with any of the provided source channels.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        tags:
          deprecated: true
          description: Filters for conversations with any of the provided tags.
          example:
          - TAG-12345
          items:
            type: string
          type: array
        tags_v2:
          description: |
            Filters for conversations with any of the provided tags with value.
          items:
            $ref: '#/components/schemas/tag-with-value-filter'
          type: array
      title: conversations-export-request
      type: object
    conversations-export-response:
      properties:
        conversations:
          description: The resulting collection of conversation items.
          items:
            $ref: '#/components/schemas/conversation'
          type: array
      required:
      - conversations
      title: conversations-export-response
      type: object
      x-go-name: ConversationsExportResponseBody
    conversations-get-request:
      description: The request to get a conversation's information.
      properties:
        id:
          description: The requested conversation's ID.
          type: string
      required:
      - id
      title: conversations-get-request
      type: object
    conversations-get-response:
      description: The response to getting a conversation's information.
      properties:
        conversation:
          $ref: '#/components/schemas/conversation'
      required:
      - conversation
      title: conversations-get-response
      type: object
      x-go-name: ConversationsGetResponseBody
    conversations-list-request:
      description: |
        The request to get information about a list of conversations.
      properties:
        applies_to_parts:
          description: |
            Filters for conversations belonging to any of the provided parts.
          example:
          - PROD-12345
          items:
            type: string
          type: array
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        group:
          description: |
            Filters for conversation that belong to the given groups.
          items:
            type: string
          type: array
        is_creator_verified:
          description: |
            Filters for conversations that are created by verified users.
          type: boolean
        is_spam:
          description: Filters for conversations that are spam.
          type: boolean
        limit:
          description: |
            The maximum number of conversations to return. The default is '50'.
          format: int32
          type: integer
        members:
          description: |
            Filters for conversations where these users are participants.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        mode:
          $ref: '#/components/schemas/list-mode'
        owned_by:
          description: Filters for conversations owned by any of these users.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        rev_org:
          description: |
            Filters for conversations that are associated with any of the
            provided Rev organizations.
          example:
          - REV-AbCdEfGh
          items:
            type: string
          type: array
        sla_summary:
          $ref: '#/components/schemas/sla-summary-filter'
        source_channels:
          description: |
            Filters for conversations with any of the provided source channels.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        tags:
          deprecated: true
          description: Filters for conversations with any of the provided tags.
          example:
          - TAG-12345
          items:
            type: string
          type: array
        tags_v2:
          description: |
            Filters for conversations with any of the provided tags with value.
          items:
            $ref: '#/components/schemas/tag-with-value-filter'
          type: array
      title: conversations-list-request
      type: object
    conversations-list-response:
      description: The response to listing the conversations.
      properties:
        conversations:
          description: The list of conversations.
          items:
            $ref: '#/components/schemas/conversation'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - conversations
      title: conversations-list-response
      type: object
      x-go-name: ConversationsListResponseBody
    conversations-update-request:
      description: The request to update a conversation.
      properties:
        applies_to_parts:
          $ref: '#/components/schemas/conversations-update-request-applies-to-parts'
        description:
          description: The updated description for the conversation.
          type: string
        group:
          description: The group that the conversation is associated with.
          type: string
        id:
          description: The ID of the conversation to update.
          type: string
        is_spam:
          description: Whether the conversation is spam.
          type: boolean
        metadata:
          $ref: '#/components/schemas/conversations-update-request-metadata'
        stage:
          $ref: '#/components/schemas/stage-update'
        status:
          description: The updated status of the conversation.
          type: string
        tags:
          $ref: '#/components/schemas/conversations-update-request-tags'
        title:
          description: The updated title of the conversation.
          type: string
        user_sessions:
          $ref: '#/components/schemas/conversations-update-request-user-sessions'
      required:
      - id
      title: conversations-update-request
      type: object
    conversations-update-request-applies-to-parts:
      properties:
        set:
          description: Updates the parts that the conversation applies to.
          example:
          - PROD-12345
          items:
            type: string
          type: array
      title: conversations-update-request-applies-to-parts
      type: object
    conversations-update-request-metadata:
      properties:
        url_context:
          type: string
      title: conversations-update-request-metadata
      type: object
    conversations-update-request-tags:
      properties:
        set:
          description: Sets the tag IDs to the provided tags.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
      title: conversations-update-request-tags
      type: object
    conversations-update-request-user-sessions:
      properties:
        set:
          description: |
            The updated user sessions that the conversation is associated with.
          items:
            type: string
          type: array
      title: conversations-update-request-user-sessions
      type: object
    conversations-update-response:
      description: The response for updating a conversation.
      properties:
        conversation:
          $ref: '#/components/schemas/conversation'
      required:
      - conversation
      title: conversations-update-response
      type: object
      x-go-name: ConversationsUpdateResponseBody
    create-email-info:
      description: Information related to an email.
      properties:
        address:
          description: The address of the email address.
          type: string
        name:
          description: The name of the email address.
          type: string
        user:
          description: The ID of the user associated with the email address.
          type: string
      required:
      - address
      title: create-email-info
      type: object
    create-email-inline-attachment:
      description: An inline attachment.
      properties:
        artifact:
          description: The artifact of the attachment.
          example: ARTIFACT-12345
          type: string
        content_id:
          description: The content id of the attachment.
          type: string
      title: create-email-inline-attachment
      type: object
    create-email-preview-widget:
      description: An email preview widget.
      properties:
        bcc:
          description: The list of bcc addresses.
          items:
            $ref: '#/components/schemas/create-email-info'
          type: array
        cc:
          description: The list of cc addresses.
          items:
            $ref: '#/components/schemas/create-email-info'
          type: array
        from:
          description: The list of from addresses.
          items:
            $ref: '#/components/schemas/create-email-info'
          type: array
        html_body:
          description: The html body of the email.
          type: string
        in_reply_to:
          description: The in reply to of the email.
          type: string
        inlines:
          description: The list of inline attachments.
          items:
            $ref: '#/components/schemas/create-email-inline-attachment'
          type: array
        message_id:
          description: The message id of the email.
          type: string
        raw_email_artifact:
          description: The raw email artifact.
          example: ARTIFACT-12345
          type: string
        references:
          description: The list of references in the email.
          items:
            type: string
          type: array
        reply_to:
          description: The list of reply to addresses.
          items:
            $ref: '#/components/schemas/create-email-info'
          type: array
        sent_timestamp:
          description: The time the email was sent.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
        subject:
          description: The subject of the email.
          type: string
        text_body:
          description: The text body of the email.
          type: string
        to:
          description: The list of to addresses.
          items:
            $ref: '#/components/schemas/create-email-info'
          type: array
      title: create-email-preview-widget
      type: object
    create-org-schedule-interval:
      properties:
        from:
          description: Date (inclusive) on which the interval begins.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
        is_excluded:
          description: |
            If true, no organization schedule is looked up for these days and
            they are marked as holidays.
          type: boolean
        name:
          description: |
            The name of the period, for example the event or holiday it
            represents.
          type: string
        to:
          description: |
            Date (exclusive) on which the interval ends. If omitted, it is a
            single day interval.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      required:
      - from
      - name
      title: create-org-schedule-interval
      type: object
    create-weekly-org-schedule-interval:
      properties:
        from:
          description: |
            Duration in minutes of the week when the interval starts. 0 is
            Sunday midnight, when Sunday ends and Monday begins.
          format: int64
          type: integer
        to:
          description: |
            Duration in minutes of the week when the interval ends (must be
            larger than 'from'). 0 is Sunday midnight, when Sunday ends and
            Monday begins.
          format: int64
          type: integer
      required:
      - from
      - to
      title: create-weekly-org-schedule-interval
      type: object
    curated-vista-summary:
      allOf:
      - $ref: '#/components/schemas/vista-base-summary'
      description: Static collection of Devrev objects.
      title: curated-vista-summary
    custom-object-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          custom_object:
            $ref: '#/components/schemas/custom-object-summary'
        required:
        - custom_object
        type: object
      title: custom-object-search-summary
    custom-object-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: custom-object-summary
    custom-schema-fragment:
      discriminator:
        mapping:
          app_fragment: '#/components/schemas/app-fragment'
          custom_type_fragment: '#/components/schemas/custom-type-fragment'
          tenant_fragment: '#/components/schemas/tenant-fragment'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/app-fragment'
      - $ref: '#/components/schemas/custom-type-fragment'
      - $ref: '#/components/schemas/tenant-fragment'
      properties:
        type:
          $ref: '#/components/schemas/custom-schema-fragment-type'
      required:
      - type
      title: custom-schema-fragment
      type: object
    custom-schema-fragment-base:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          conditions:
            description: The conditions associated with the fields.
            items:
              $ref: '#/components/schemas/custom-schema-fragment-condition'
            type: array
          deprecated:
            description: |
              Indicates if the fragment has been deprecated. Modifications to
              this field are done in-place and don't result in creation of a new
              fragment in chain.
            type: boolean
          description:
            description: Description of the custom schema fragment.
            type: string
          fields:
            description: List of all fields in this custom schema fragment.
            items:
              $ref: '#/components/schemas/schema-field-descriptor'
            type: array
          fragment_type:
            $ref: '#/components/schemas/custom-schema-fragment-fragment-type'
          leaf_type:
            description: Leaf type this fragment applies to.
            type: string
          new_fragment_ref:
            $ref: '#/components/schemas/custom-schema-fragment-summary'
          old_fragment_ref:
            $ref: '#/components/schemas/custom-schema-fragment-summary'
        type: object
      title: custom-schema-fragment-base
    custom-schema-fragment-base-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: custom-schema-fragment-base-summary
    custom-schema-fragment-condition:
      additionalProperties: false
      description: The condition associated with a field.
      title: custom-schema-fragment-condition
      type: object
    custom-schema-fragment-fragment-type:
      description: Type of the custom schema fragment.
      enum:
      - app
      - custom_type
      - tenant
      type: string
    custom-schema-fragment-summary:
      discriminator:
        mapping:
          app_fragment: '#/components/schemas/app-fragment-summary'
          custom_type_fragment: '#/components/schemas/custom-type-fragment-summary'
          tenant_fragment: '#/components/schemas/tenant-fragment-summary'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/app-fragment-summary'
      - $ref: '#/components/schemas/custom-type-fragment-summary'
      - $ref: '#/components/schemas/tenant-fragment-summary'
      properties:
        type:
          $ref: '#/components/schemas/custom-schema-fragment-type'
      required:
      - type
      title: custom-schema-fragment-summary
      type: object
    custom-schema-fragment-type:
      enum:
      - app_fragment
      - custom_type_fragment
      - tenant_fragment
      type: string
    custom-schema-fragments-get-request:
      properties:
        id:
          description: The ID of the custom schema fragment.
          type: string
      required:
      - id
      title: custom-schema-fragments-get-request
      type: object
    custom-schema-fragments-get-response:
      properties:
        fragment:
          $ref: '#/components/schemas/custom-schema-fragment'
      required:
      - fragment
      title: custom-schema-fragments-get-response
      type: object
      x-go-name: CustomSchemaFragmentsGetResponseBody
    custom-schema-fragments-list-request:
      properties:
        app:
          description: The list of app names.
          items:
            type: string
          type: array
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        deprecated:
          description: Whether only deprecated fragments should be filtered.
          type: boolean
        leaf_type:
          description: The list of leaf types.
          items:
            type: string
          type: array
        limit:
          description: The maximum number of items.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        prune:
          description: |
            List of fields which are not required in the payload and can be
            pruned away.
          items:
            $ref: '#/components/schemas/custom-schema-fragments-list-request-prune'
          type: array
        sort_by:
          description: |
            The list of fields to sort the items by and how to sort them.
          items:
            type: string
          type: array
        subtype:
          description: The list of subtypes.
          items:
            type: string
          type: array
        types:
          description: |
            Filters for custom schema fragment of the provided types.
          items:
            $ref: '#/components/schemas/custom-schema-fragment-type'
          type: array
      title: custom-schema-fragments-list-request
      type: object
    custom-schema-fragments-list-request-prune:
      enum:
      - fields
      type: string
    custom-schema-fragments-list-response:
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        result:
          description: The custom schema fragments.
          items:
            $ref: '#/components/schemas/custom-schema-fragment'
          type: array
      required:
      - result
      title: custom-schema-fragments-list-response
      type: object
      x-go-name: CustomSchemaFragmentsListResponseBody
    custom-schema-fragments-set-request:
      discriminator:
        mapping:
          app_fragment: '#/components/schemas/custom-schema-fragments-set-request-app-fragment'
          custom_type_fragment: '#/components/schemas/custom-schema-fragments-set-request-custom-type-fragment'
          tenant_fragment: '#/components/schemas/custom-schema-fragments-set-request-tenant-fragment'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/custom-schema-fragments-set-request-app-fragment'
      - $ref: '#/components/schemas/custom-schema-fragments-set-request-custom-type-fragment'
      - $ref: '#/components/schemas/custom-schema-fragments-set-request-tenant-fragment'
      properties:
        conditions:
          description: List of conditions for this fragment.
          items:
            $ref: '#/components/schemas/custom-schema-fragment-condition'
          type: array
        deleted_fields:
          description: List of field names which are being dropped.
          items:
            type: string
          type: array
        deprecated:
          description: Whether this fragment has been deprecated.
          type: boolean
        description:
          description: The description of the custom schema fragment.
          type: string
        fields:
          description: List of all fields in this fragment.
          items:
            $ref: '#/components/schemas/schema-field-descriptor'
          type: array
        is_custom_leaf_type:
          description: Whether the leaf type corresponds to a custom object
          type: boolean
        leaf_type:
          description: The leaf type this fragment applies to.
          type: string
        type:
          $ref: '#/components/schemas/custom-schema-fragments-set-request-type'
      required:
      - description
      - leaf_type
      - type
      title: custom-schema-fragments-set-request
      type: object
    custom-schema-fragments-set-request-app-fragment:
      properties:
        app:
          description: The app this fragment applies to.
          type: string
      required:
      - app
      title: custom-schema-fragments-set-request-app-fragment
      type: object
    custom-schema-fragments-set-request-custom-type-fragment:
      properties:
        path:
          description: |
            Path components used to display available custom types in tree
            form.
          items:
            $ref: '#/components/schemas/custom-type-path-component'
          type: array
        stage_diagram:
          description: The ID of the associated custom stage diagram.
          type: string
        stock_field_overrides:
          description: List of Per-DevOrg stock field overrides.
          items:
            $ref: '#/components/schemas/stock-field-override'
          type: array
        subtype:
          description: |
            The string used to populate the subtype in the leaf type.
          type: string
        subtype_display_name:
          description: The display name of the subtype.
          type: string
      required:
      - subtype
      title: custom-schema-fragments-set-request-custom-type-fragment
      type: object
    custom-schema-fragments-set-request-tenant-fragment:
      properties:
        id_prefix:
          description: The display ID prefix for the custom object.
          type: string
        stock_field_overrides:
          description: List of Per-DevOrg stock field overrides.
          items:
            $ref: '#/components/schemas/stock-field-override'
          type: array
      title: custom-schema-fragments-set-request-tenant-fragment
      type: object
    custom-schema-fragments-set-request-type:
      enum:
      - app_fragment
      - custom_type_fragment
      - tenant_fragment
      type: string
    custom-schema-fragments-set-response:
      properties:
        id:
          description: The ID of the custom schema fragment.
          type: string
      required:
      - id
      title: custom-schema-fragments-set-response
      type: object
      x-go-name: CustomSchemaFragmentsSetResponseBody
    custom-schema-spec:
      description: |
        Requested custom schemas described abstractly. Every provided schema's
        custom field must be specified, otherwise a bad request error is
        returned. If a new custom schema specifier is provided, then it will be
        added to the work, otherwise if a custom schema is omitted from the
        specifier, it remains unmodified.
      properties:
        apps:
          description: List of apps that are requested.
          items:
            type: string
          type: array
        subtype:
          description: Name of the subtype requested.
          type: string
        tenant_fragment:
          description: Whether the tenant schema is requested.
          type: boolean
        validate_required_fields:
          description: Whether to enforce required fields validation.
          type: boolean
      title: custom-schema-spec
      type: object
    custom-stage:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      title: custom-stage
    custom-stages-create-request:
      properties:
        marketplace_ref:
          description: |
            A reference to the marketplace item from which this stage was
            imported.
          type: string
        name:
          description: The name of the custom stage.
          type: string
        ordinal:
          description: The ordinal of the custom stage used for ordering.
          format: int32
          type: integer
        state:
          description: The state ID.
          type: string
      required:
      - name
      - ordinal
      - state
      title: custom-stages-create-request
      type: object
    custom-stages-create-response:
      properties:
        custom_stage:
          $ref: '#/components/schemas/custom-stage'
      required:
      - custom_stage
      title: custom-stages-create-response
      type: object
      x-go-name: CustomStagesCreateResponseBody
    custom-stages-get-request:
      properties:
        id:
          description: The ID of the custom stage to get.
          type: string
      required:
      - id
      title: custom-stages-get-request
      type: object
    custom-stages-get-response:
      properties:
        custom_stage:
          $ref: '#/components/schemas/custom-stage'
      required:
      - custom_stage
      title: custom-stages-get-response
      type: object
      x-go-name: CustomStagesGetResponseBody
    custom-stages-list-request:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          type: string
        limit:
          description: The maximum number of items.
          format: int32
          type: integer
        name:
          description: The list of stage names.
          items:
            type: string
          type: array
        ordinal:
          description: The list of stage ordinals.
          items:
            format: int32
            type: integer
          type: array
        sort_by:
          description: |
            The list of fields to sort the items by and how to sort them.
          items:
            type: string
          type: array
      title: custom-stages-list-request
      type: object
    custom-stages-list-response:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          type: string
        result:
          description: The custom stages.
          items:
            $ref: '#/components/schemas/custom-stage'
          type: array
      required:
      - result
      title: custom-stages-list-response
      type: object
      x-go-name: CustomStagesListResponseBody
    custom-stages-update-request:
      properties:
        id:
          description: The ID of the custom stage to update.
          type: string
        name:
          description: The updated name of the custom stage.
          type: string
        ordinal:
          description: The ordinal of the custom stage.
          format: int32
          type: integer
        state_id:
          description: The state ID.
          type: string
      required:
      - id
      title: custom-stages-update-request
      type: object
    custom-stages-update-response:
      properties:
        custom_stage:
          $ref: '#/components/schemas/custom-stage'
      required:
      - custom_stage
      title: custom-stages-update-response
      type: object
      x-go-name: CustomStagesUpdateResponseBody
    custom-state:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      title: custom-state
    custom-states-create-request:
      properties:
        is_final:
          description: Whether this is a final state.
          type: boolean
        name:
          description: The name of the custom state.
          type: string
        ordinal:
          description: |
            Ordinal of the custom state used to identify system states.
          format: int32
          type: integer
      required:
      - name
      - ordinal
      title: custom-states-create-request
      type: object
    custom-states-create-response:
      properties:
        custom_state:
          $ref: '#/components/schemas/custom-state'
      required:
      - custom_state
      title: custom-states-create-response
      type: object
      x-go-name: CustomStatesCreateResponseBody
    custom-states-get-request:
      properties:
        id:
          description: The ID of the custom state to get.
          type: string
      required:
      - id
      title: custom-states-get-request
      type: object
    custom-states-get-response:
      properties:
        custom_state:
          $ref: '#/components/schemas/custom-state'
      required:
      - custom_state
      title: custom-states-get-response
      type: object
      x-go-name: CustomStatesGetResponseBody
    custom-states-list-request:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          type: string
        is_final:
          description: Whether only final states should be filtered.
          type: boolean
        limit:
          description: The maximum number of items.
          format: int32
          type: integer
        name:
          description: The list of state names.
          items:
            type: string
          type: array
        ordinal:
          description: The list of state ordinals.
          items:
            format: int32
            type: integer
          type: array
        sort_by:
          description: |
            The list of fields to sort the items by and how to sort them.
          items:
            type: string
          type: array
      title: custom-states-list-request
      type: object
    custom-states-list-response:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          type: string
        result:
          description: The custom states.
          items:
            $ref: '#/components/schemas/custom-state'
          type: array
      required:
      - result
      title: custom-states-list-response
      type: object
      x-go-name: CustomStatesListResponseBody
    custom-states-update-request:
      properties:
        id:
          description: The ID of the custom state to update.
          type: string
        is_final:
          description: Whether this is a final state.
          type: boolean
        name:
          description: The name of the custom state.
          type: string
        ordinal:
          description: |
            Ordinal of the custom state used to identify system states.
          format: int32
          type: integer
      required:
      - id
      title: custom-states-update-request
      type: object
    custom-states-update-response:
      properties:
        custom_state:
          $ref: '#/components/schemas/custom-state'
      required:
      - custom_state
      title: custom-states-update-response
      type: object
      x-go-name: CustomStatesUpdateResponseBody
    custom-type-fragment:
      allOf:
      - $ref: '#/components/schemas/custom-schema-fragment-base'
      - properties:
          stage_diagram:
            $ref: '#/components/schemas/stage-diagram-summary'
          subtype:
            description: |
              The string used to populate the subtype in the leaf type.
            type: string
          subtype_display_name:
            description: |
              Display name of the subtype. Modifications to this field are done
              in-place and don't result in creation of a new fragment in chain.
            type: string
        type: object
      title: custom-type-fragment
    custom-type-fragment-summary:
      allOf:
      - $ref: '#/components/schemas/custom-schema-fragment-base-summary'
      title: custom-type-fragment-summary
    custom-type-path-component:
      additionalProperties: false
      description: Path component for rendering custom type lists in tree form.
      title: custom-type-path-component
      type: object
    dashboard-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          dashboard:
            $ref: '#/components/schemas/dashboard-summary'
        required:
        - dashboard
        type: object
      title: dashboard-search-summary
    dashboard-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: dashboard-summary
    date-filter:
      description: Provides ways to specify date ranges on objects.
      discriminator:
        mapping:
          preset: '#/components/schemas/date-time-preset'
          range: '#/components/schemas/date-time-filter'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/date-time-filter'
      - $ref: '#/components/schemas/date-time-preset'
      properties:
        type:
          $ref: '#/components/schemas/date-filter-type'
      required:
      - type
      title: date-filter
      type: object
    date-filter-type:
      description: Type of date filter.
      enum:
      - preset
      - range
      type: string
    date-time-filter:
      properties:
        after:
          description: |
            Filters for objects created after the provided timestamp
            (inclusive).
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
        before:
          description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      title: date-time-filter
      type: object
    date-time-preset:
      description: Provides preset types for date filter.
      discriminator:
        mapping:
          last_n_days: '#/components/schemas/date-time-preset-last-n-days'
          next_n_days: '#/components/schemas/date-time-preset-next-n-days'
        propertyName: preset_type
      oneOf:
      - $ref: '#/components/schemas/date-time-preset-last-n-days'
      - $ref: '#/components/schemas/date-time-preset-next-n-days'
      properties:
        preset_type:
          $ref: '#/components/schemas/date-time-preset-type'
      required:
      - preset_type
      title: date-time-preset
      type: object
    date-time-preset-last-n-days:
      properties:
        days:
          description: |
            The range starts from the current timestamp and continues for the
            past n days.
          maximum: 4294967295
          minimum: 0
          type: integer
      required:
      - days
      title: date-time-preset-last-n-days
      type: object
    date-time-preset-next-n-days:
      properties:
        days:
          description: |
            The range starts from the current timestamp and continues for the
            next n days.
          maximum: 4294967295
          minimum: 0
          type: integer
      required:
      - days
      title: date-time-preset-next-n-days
      type: object
    date-time-preset-type:
      description: Type of date preset.
      enum:
      - last_n_days
      - next_n_days
      type: string
    dev-user:
      allOf:
      - $ref: '#/components/schemas/user-base'
      - properties:
          experience_start_date:
            description: Start date of the user's employment.
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
            type: string
          external_identities:
            description: IDs of the Dev User outside the DevRev SOR.
            items:
              $ref: '#/components/schemas/external-identity'
            type: array
          job_history:
            description: Job history of the user.
            items:
              $ref: '#/components/schemas/job-history-item'
            type: array
          skills:
            description: Array of skills of the user.
            items:
              $ref: '#/components/schemas/user-skill'
            type: array
        type: object
      title: dev-user
    dev-user-job-title:
      description: Job title of the Dev User.
      enum:
      - customer_success_manager
      - cxo
      - designer
      - developer
      - head_of_support
      - operations
      - others
      - product_manager
      - qa
      - revenue_leader
      - support
      - tech_lead
      type: string
    dev-user-summary:
      allOf:
      - $ref: '#/components/schemas/user-base-summary'
      title: dev-user-summary
    dev-users-identities-link-request:
      description: Request to link external identity to a Dev user.
      properties:
        display_name:
          description: Display name of the Dev user in the external source.
          type: string
        id:
          description: Unique ID of the Dev user in the external source.
          type: string
        issuer:
          description: Issuer of the external identity of the Dev user.
          type: string
      required:
      - id
      - issuer
      title: dev-users-identities-link-request
      type: object
    dev-users-identities-link-response:
      description: |
        Response for the request to link an external identity to a Dev user.
      properties:
        dev_user:
          $ref: '#/components/schemas/dev-user'
      required:
      - dev_user
      title: dev-users-identities-link-response
      type: object
      x-go-name: DevUsersIdentitiesLinkResponseBody
    dev-users-identities-unlink-request:
      description: Request to unlink an external identity from a Dev user.
      properties:
        issuer:
          description: Issuer that needs to be unlinked from a Dev user.
          type: string
      required:
      - issuer
      title: dev-users-identities-unlink-request
      type: object
    dev-users-identities-unlink-response:
      description: |
        Response for the request to unlink an external identity from a Dev
        user.
      properties:
        dev_user:
          $ref: '#/components/schemas/dev-user'
      required:
      - dev_user
      title: dev-users-identities-unlink-response
      type: object
      x-go-name: DevUsersIdentitiesUnlinkResponseBody
    dev-users-self-update-request:
      description: |
        A request to update the user's information for the authenticated Dev
        user.
      properties:
        display_name:
          description: The updated display name of the Dev user.
          type: string
        full_name:
          description: The updated full name of the Dev user.
          type: string
        job_title:
          $ref: '#/components/schemas/dev-user-job-title'
      title: dev-users-self-update-request
      type: object
    dev-users-update-request:
      description: |
        A request to update the user's information corresponding to the
        provided Dev user.
      properties:
        display_name:
          description: The updated display name of the Dev user.
          type: string
        full_name:
          description: The updated full name of the Dev user.
          type: string
        id:
          description: The ID for the Dev user to be updated.
          type: string
        job_title:
          $ref: '#/components/schemas/dev-user-job-title'
      required:
      - id
      title: dev-users-update-request
      type: object
    dev-users-update-response:
      description: The response to update a Dev user.
      properties:
        dev_user:
          $ref: '#/components/schemas/dev-user'
      required:
      - dev_user
      title: dev-users-update-response
      type: object
      x-go-name: DevUsersUpdateResponseBody
    directory-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: directory-summary
    dynamic-group-info:
      additionalProperties: false
      description: Information to define dynamic groups.
      title: dynamic-group-info
      type: object
    dynamic-vista-summary:
      allOf:
      - $ref: '#/components/schemas/vista-base-summary'
      description: |
        Dynamic collection of Devrev objects, all adhering to a specific
        filter.
      title: dynamic-vista-summary
    email-info:
      properties:
        address:
          description: The email address.
          type: string
        name:
          description: The email recipient's name.
          type: string
        user:
          $ref: '#/components/schemas/user-summary'
      required:
      - address
      title: email-info
      type: object
    email-inline-attachment:
      properties:
        artifact:
          $ref: '#/components/schemas/artifact-summary'
        content_id:
          description: The content id of the attachment.
          type: string
      title: email-inline-attachment
      type: object
    email-preview-widget:
      allOf:
      - $ref: '#/components/schemas/snap-widget-base'
      - properties:
          bcc:
            description: The list of bcc addresses.
            items:
              $ref: '#/components/schemas/email-info'
            type: array
          cc:
            description: The list of cc addresses.
            items:
              $ref: '#/components/schemas/email-info'
            type: array
          from:
            description: The list of from addresses.
            items:
              $ref: '#/components/schemas/email-info'
            type: array
          html_body:
            description: The html body of the email.
            type: string
          in_reply_to:
            description: The in-reply-to header of the email.
            type: string
          inlines:
            description: The list of inline attachments.
            items:
              $ref: '#/components/schemas/email-inline-attachment'
            type: array
          message_id:
            description: The message id of the email.
            type: string
          raw_email_artifact:
            $ref: '#/components/schemas/artifact-summary'
          references:
            description: The references header in the email.
            items:
              type: string
            type: array
          reply_to:
            description: The list of reply to addresses.
            items:
              $ref: '#/components/schemas/email-info'
            type: array
          sent_timestamp:
            description: The time the email was sent.
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
            type: string
          subject:
            description: The subject of the email.
            type: string
          text_body:
            description: The text body of the email.
            type: string
          to:
            description: The list of to addresses.
            items:
              $ref: '#/components/schemas/email-info'
            type: array
        required:
        - bcc
        - cc
        - from
        - inlines
        - references
        - reply_to
        - to
        type: object
      title: email-preview-widget
    empty:
      additionalProperties: false
      title: empty
      type: object
    engagement:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          description:
            description: Description of the engagement object.
            type: string
        type: object
      title: engagement
    engagement-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: engagement-summary
    engagement-type:
      description: Type of engagement.
      enum:
      - call
      - default
      - email
      - linked_in
      - meeting
      - offline
      - survey
      type: string
    engagements-count-request:
      properties:
        external_ref:
          description: Filters for meetings with the provided external_refs.
          items:
            type: string
          type: array
        members:
          description: Filters for engagement of the provided members.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        parent:
          description: Filters for engagements with the provided parent.
          example:
          - ACC-12345
          items:
            type: string
          type: array
        type:
          description: Filters for engagement of the provided types.
          items:
            $ref: '#/components/schemas/engagement-type'
          type: array
      title: engagements-count-request
      type: object
    engagements-count-response:
      properties:
        count:
          description: The number of engagements matching the filter.
          format: int64
          type: integer
      required:
      - count
      title: engagements-count-response
      type: object
      x-go-name: EngagementsCountResponseBody
    engagements-create-request:
      properties:
        artifacts:
          description: |
            The IDs of the artifacts to associate with the engagement.
          example:
          - ARTIFACT-12345
          items:
            type: string
          type: array
        description:
          description: The description of the engagement.
          type: string
        engagement_type:
          $ref: '#/components/schemas/engagements-create-request-engagement-type'
        external_ref:
          description: External Reference for the engagement.
          type: string
        external_url:
          description: External URL for the engagement.
          type: string
        members:
          description: IDs of the users that were part of the engagement.
          example:
          - DEVU-12345
          items:
            type: string
          maxItems: 50
          minItems: 1
          type: array
        parent:
          description: |
            The parent object ID in which the engagement was created.
            Currently, only accounts and opportunities are supported.
          example: ACC-12345
          type: string
        scheduled_date:
          description: The date and time when the engagement was scheduled.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
        tags:
          description: Tags associated with the engagement.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
        title:
          description: The title of the engagement.
          type: string
      required:
      - members
      - parent
      - scheduled_date
      - title
      title: engagements-create-request
      type: object
    engagements-create-request-engagement-type:
      description: The type of engagement.
      enum:
      - call
      - default
      - email
      - linked_in
      - offline
      type: string
    engagements-create-response:
      properties:
        engagement:
          $ref: '#/components/schemas/engagement'
      required:
      - engagement
      title: engagements-create-response
      type: object
      x-go-name: EngagementsCreateResponseBody
    engagements-delete-request:
      properties:
        id:
          description: The engagement ID.
          type: string
      required:
      - id
      title: engagements-delete-request
      type: object
    engagements-delete-response:
      additionalProperties: false
      title: engagements-delete-response
      type: object
      x-go-name: EngagementsDeleteResponseBody
    engagements-get-request:
      properties:
        id:
          description: The engagement ID.
          type: string
      required:
      - id
      title: engagements-get-request
      type: object
    engagements-get-response:
      properties:
        engagement:
          $ref: '#/components/schemas/engagement'
      required:
      - engagement
      title: engagements-get-response
      type: object
      x-go-name: EngagementsGetResponseBody
    engagements-list-request:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        external_ref:
          description: Filters for meetings with the provided external_refs.
          items:
            type: string
          type: array
        limit:
          description: The maximum number of engagements to return.
          format: int32
          type: integer
        members:
          description: Filters for engagement of the provided members.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        mode:
          $ref: '#/components/schemas/list-mode'
        parent:
          description: Filters for engagements with the provided parent.
          example:
          - ACC-12345
          items:
            type: string
          type: array
        sort_by:
          description: |
            Fields to sort the engagements by and the direction to sort them.
          items:
            type: string
          type: array
        type:
          description: Filters for engagement of the provided types.
          items:
            $ref: '#/components/schemas/engagement-type'
          type: array
      title: engagements-list-request
      type: object
    engagements-list-response:
      properties:
        engagements:
          description: The list of engagements.
          items:
            $ref: '#/components/schemas/engagement'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - engagements
      title: engagements-list-response
      type: object
      x-go-name: EngagementsListResponseBody
    engagements-update-request:
      properties:
        artifacts:
          $ref: '#/components/schemas/engagements-update-request-artifact-ids'
        description:
          description: Updates the description of the engagement.
          type: string
        external_ref:
          description: External Reference for the engagement.
          type: string
        external_url:
          description: Updates the external URL for the engagement.
          type: string
        id:
          description: The engagement ID.
          type: string
        members:
          $ref: '#/components/schemas/engagements-update-request-members'
        scheduled_date:
          description: |
            Updates the date and time when the engagement was scheduled.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          nullable: true
          type: string
        tags:
          $ref: '#/components/schemas/engagements-update-request-tags'
        title:
          description: Updates the title of the engagement.
          type: string
      required:
      - id
      title: engagements-update-request
      type: object
    engagements-update-request-artifact-ids:
      properties:
        set:
          description: Sets the IDs to the provided artifact IDs.
          example:
          - ARTIFACT-12345
          items:
            type: string
          type: array
      title: engagements-update-request-artifact-ids
      type: object
    engagements-update-request-members:
      properties:
        set:
          description: |
            Sets the members to the provided user IDs. If specified, this must
            not be empty.
          example:
          - DEVU-12345
          items:
            type: string
          maxItems: 50
          type: array
      title: engagements-update-request-members
      type: object
    engagements-update-request-tags:
      properties:
        set:
          description: Sets the provided tags on the engagement item.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
      title: engagements-update-request-tags
      type: object
    engagements-update-response:
      properties:
        engagement:
          $ref: '#/components/schemas/engagement'
      required:
      - engagement
      title: engagements-update-response
      type: object
      x-go-name: EngagementsUpdateResponseBody
    enhancement:
      allOf:
      - $ref: '#/components/schemas/part-base'
      title: enhancement
    enhancement-summary:
      allOf:
      - $ref: '#/components/schemas/part-base-summary'
      title: enhancement-summary
    enum-value:
      description: Enum Value defines the structure for an enum.
      properties:
        id:
          description: Unique ID of the enum value. This is immutable.
          format: int64
          type: integer
        label:
          description: Display label of the enum value. This is mutable.
          type: string
        ordinal:
          description: Order number of the enum value. This is mutable.
          format: int64
          type: integer
      required:
      - id
      - label
      - ordinal
      title: enum-value
      type: object
    error:
      properties:
        message:
          description: Information about the error.
          type: string
        status:
          description: The corresponding HTTP status code.
          format: int32
          type: integer
        type:
          description: The error type.
          type: string
      required:
      - message
      - status
      title: error
      type: object
    error-bad-request:
      allOf:
      - $ref: '#/components/schemas/error-base'
      - discriminator:
          mapping:
            artifact_already_attached_to_a_parent: '#/components/schemas/error-bad-request-artifact-already-attached-to-a-parent'
            bad_request: '#/components/schemas/error-bad-request-bad-request'
            invalid_api_version: '#/components/schemas/error-bad-request-invalid-api-version'
            invalid_enum_value: '#/components/schemas/error-bad-request-invalid-enum-value'
            invalid_field: '#/components/schemas/error-bad-request-invalid-field'
            missing_dependency: '#/components/schemas/error-bad-request-missing-dependency'
            missing_required_field: '#/components/schemas/error-bad-request-missing-required-field'
            parse_error: '#/components/schemas/error-bad-request-parse-error'
            stale_schema_fragments: '#/components/schemas/error-bad-request-stale-schema-fragments'
            unexpected_json_type: '#/components/schemas/error-bad-request-unexpected-json-type'
            value_not_permitted: '#/components/schemas/error-bad-request-value-not-permitted'
          propertyName: type
        oneOf:
        - $ref: '#/components/schemas/error-bad-request-artifact-already-attached-to-a-parent'
        - $ref: '#/components/schemas/error-bad-request-bad-request'
        - $ref: '#/components/schemas/error-bad-request-invalid-api-version'
        - $ref: '#/components/schemas/error-bad-request-invalid-enum-value'
        - $ref: '#/components/schemas/error-bad-request-invalid-field'
        - $ref: '#/components/schemas/error-bad-request-missing-dependency'
        - $ref: '#/components/schemas/error-bad-request-missing-required-field'
        - $ref: '#/components/schemas/error-bad-request-parse-error'
        - $ref: '#/components/schemas/error-bad-request-stale-schema-fragments'
        - $ref: '#/components/schemas/error-bad-request-unexpected-json-type'
        - $ref: '#/components/schemas/error-bad-request-value-not-permitted'
        properties:
          type:
            $ref: '#/components/schemas/error-bad-request-type'
        required:
        - type
        type: object
      title: error-bad-request
    error-bad-request-artifact-already-attached-to-a-parent:
      properties:
        existing_parent:
          description: The existing parent attached to the artifact.
          type: string
        is_same:
          description: |
            Whether the existing parent is the same as the new parent.
          type: boolean
      required:
      - existing_parent
      - is_same
      title: error-bad-request-artifact-already-attached-to-a-parent
      type: object
    error-bad-request-bad-request:
      additionalProperties: false
      title: error-bad-request-bad-request
      type: object
    error-bad-request-invalid-api-version:
      properties:
        value:
          description: The provided API version.
          type: string
      required:
      - value
      title: error-bad-request-invalid-api-version
      type: object
    error-bad-request-invalid-enum-value:
      properties:
        allowed_values:
          description: The allowed values for the field.
          items:
            type: string
          type: array
        field_name:
          description: The field whose enum value is invalid.
          type: string
        value:
          description: The value that was received.
          type: string
      required:
      - allowed_values
      - field_name
      - value
      title: error-bad-request-invalid-enum-value
      type: object
    error-bad-request-invalid-field:
      properties:
        field_name:
          description: The field name that's invalid.
          type: string
      required:
      - field_name
      title: error-bad-request-invalid-field
      type: object
    error-bad-request-missing-dependency:
      properties:
        dependencies:
          description: The dependent fields.
          items:
            $ref: '#/components/schemas/error-bad-request-missing-dependency-dependency'
          type: array
        dependent_field_name:
          description: The field on which the value depends.
          type: string
        dependent_field_value:
          description: The value which needs to be set of the dependent field.
          type: string
        provided_field_name:
          description: The field whose value was received.
          type: string
        provided_field_value:
          description: The value that was received.
          type: string
      title: error-bad-request-missing-dependency
      type: object
    error-bad-request-missing-dependency-dependency:
      properties:
        field_name:
          description: The dependent field name.
          type: string
        field_value:
          description: The dependent field value.
          type: string
      required:
      - field_name
      - field_value
      title: error-bad-request-missing-dependency-dependency
      type: object
    error-bad-request-missing-required-field:
      properties:
        field_name:
          description: The missing field's name.
          type: string
      required:
      - field_name
      title: error-bad-request-missing-required-field
      type: object
    error-bad-request-parse-error:
      additionalProperties: false
      title: error-bad-request-parse-error
      type: object
    error-bad-request-stale-schema-fragments:
      additionalProperties: false
      description: |
        Error indicating that the request contained one or more stale schema
        fragments, which are schema fragments that have been replaced by a
        newer version and are therefore considered deprecated schema fragments.
        The caller should refresh and use the latest schema fragments in their
        request.
      title: error-bad-request-stale-schema-fragments
      type: object
    error-bad-request-type:
      enum:
      - artifact_already_attached_to_a_parent
      - bad_request
      - invalid_api_version
      - invalid_enum_value
      - invalid_field
      - missing_dependency
      - missing_required_field
      - parse_error
      - stale_schema_fragments
      - unexpected_json_type
      - value_not_permitted
      type: string
    error-bad-request-unexpected-json-type:
      properties:
        actual:
          $ref: '#/components/schemas/error-bad-request-unexpected-json-type-type'
        expected:
          $ref: '#/components/schemas/error-bad-request-unexpected-json-type-type'
        field_name:
          description: The field name that's invalid.
          type: string
      required:
      - actual
      - expected
      - field_name
      title: error-bad-request-unexpected-json-type
      type: object
    error-bad-request-unexpected-json-type-type:
      enum:
      - array
      - bool
      - "null"
      - number
      - object
      - string
      type: string
    error-bad-request-value-not-permitted:
      properties:
        allowed_values:
          description: The allowed values for the field.
          items:
            type: string
          type: array
        field_name:
          description: The field whose value is not permitted.
          type: string
        reason:
          description: The reason the value isn't permitted.
          type: string
      required:
      - field_name
      title: error-bad-request-value-not-permitted
      type: object
    error-base:
      properties:
        detail:
          description: Error detail information.
          type: string
        message:
          description: The message associated with the error.
          type: string
      title: error-base
      type: object
    error-conflict:
      allOf:
      - $ref: '#/components/schemas/error-base'
      - discriminator:
          mapping:
            conflict: '#/components/schemas/error-conflict-conflict'
          propertyName: type
        oneOf:
        - $ref: '#/components/schemas/error-conflict-conflict'
        properties:
          type:
            $ref: '#/components/schemas/error-conflict-type'
        required:
        - type
        type: object
      title: error-conflict
    error-conflict-conflict:
      additionalProperties: false
      title: error-conflict-conflict
      type: object
    error-conflict-type:
      enum:
      - conflict
      type: string
    error-forbidden:
      allOf:
      - $ref: '#/components/schemas/error-base'
      - discriminator:
          mapping:
            forbidden: '#/components/schemas/error-forbidden-forbidden'
          propertyName: type
        oneOf:
        - $ref: '#/components/schemas/error-forbidden-forbidden'
        properties:
          type:
            $ref: '#/components/schemas/error-forbidden-type'
        required:
        - type
        type: object
      title: error-forbidden
    error-forbidden-forbidden:
      additionalProperties: false
      title: error-forbidden-forbidden
      type: object
    error-forbidden-type:
      enum:
      - forbidden
      type: string
    error-internal-server-error:
      allOf:
      - $ref: '#/components/schemas/error-base'
      - discriminator:
          mapping:
            internal_error: '#/components/schemas/error-internal-server-error-internal-error'
          propertyName: type
        oneOf:
        - $ref: '#/components/schemas/error-internal-server-error-internal-error'
        properties:
          reference_id:
            description: |
              A unique ID that's generated for the error that can be used for
              inquiry.
            type: string
          type:
            $ref: '#/components/schemas/error-internal-server-error-type'
        required:
        - type
        type: object
      title: error-internal-server-error
    error-internal-server-error-internal-error:
      additionalProperties: false
      title: error-internal-server-error-internal-error
      type: object
    error-internal-server-error-type:
      enum:
      - internal_error
      type: string
    error-not-found:
      allOf:
      - $ref: '#/components/schemas/error-base'
      - discriminator:
          mapping:
            not_found: '#/components/schemas/error-not-found-not-found'
          propertyName: type
        oneOf:
        - $ref: '#/components/schemas/error-not-found-not-found'
        properties:
          type:
            $ref: '#/components/schemas/error-not-found-type'
        required:
        - type
        type: object
      title: error-not-found
    error-not-found-not-found:
      additionalProperties: false
      title: error-not-found-not-found
      type: object
    error-not-found-type:
      enum:
      - not_found
      type: string
    error-service-unavailable:
      allOf:
      - $ref: '#/components/schemas/error-base'
      - discriminator:
          mapping:
            service_unavailable: '#/components/schemas/error-service-unavailable-service-unavailable'
          propertyName: type
        oneOf:
        - $ref: '#/components/schemas/error-service-unavailable-service-unavailable'
        properties:
          type:
            $ref: '#/components/schemas/error-service-unavailable-type'
        required:
        - type
        type: object
      title: error-service-unavailable
    error-service-unavailable-service-unavailable:
      additionalProperties: false
      title: error-service-unavailable-service-unavailable
      type: object
    error-service-unavailable-type:
      enum:
      - service_unavailable
      type: string
    error-too-many-requests:
      allOf:
      - $ref: '#/components/schemas/error-base'
      - discriminator:
          mapping:
            too_many_requests: '#/components/schemas/error-too-many-requests-too-many-requests'
          propertyName: type
        oneOf:
        - $ref: '#/components/schemas/error-too-many-requests-too-many-requests'
        properties:
          retry_after:
            description: |
              The number of seconds after which the client should retry.
            format: int64
            type: integer
          type:
            $ref: '#/components/schemas/error-too-many-requests-type'
        required:
        - type
        type: object
      title: error-too-many-requests
    error-too-many-requests-too-many-requests:
      additionalProperties: false
      title: error-too-many-requests-too-many-requests
      type: object
    error-too-many-requests-type:
      enum:
      - too_many_requests
      type: string
    error-unauthorized:
      allOf:
      - $ref: '#/components/schemas/error-base'
      - discriminator:
          mapping:
            unauthenticated: '#/components/schemas/error-unauthorized-unauthenticated'
          propertyName: type
        oneOf:
        - $ref: '#/components/schemas/error-unauthorized-unauthenticated'
        properties:
          type:
            $ref: '#/components/schemas/error-unauthorized-type'
        required:
        - type
        type: object
      title: error-unauthorized
    error-unauthorized-type:
      enum:
      - unauthenticated
      type: string
    error-unauthorized-unauthenticated:
      additionalProperties: false
      title: error-unauthorized-unauthenticated
      type: object
    event-account-created:
      properties:
        account:
          $ref: '#/components/schemas/account'
      required:
      - account
      title: event-account-created
      type: object
    event-account-deleted:
      properties:
        id:
          description: The ID of the account that was deleted.
          example: ACC-12345
          type: string
      required:
      - id
      title: event-account-deleted
      type: object
    event-account-updated:
      properties:
        account:
          $ref: '#/components/schemas/account'
      required:
      - account
      title: event-account-updated
      type: object
    event-conversation-created:
      properties:
        conversation:
          $ref: '#/components/schemas/conversation'
      required:
      - conversation
      title: event-conversation-created
      type: object
    event-conversation-deleted:
      properties:
        id:
          description: The ID of the conversation that was deleted.
          type: string
      required:
      - id
      title: event-conversation-deleted
      type: object
    event-conversation-updated:
      properties:
        conversation:
          $ref: '#/components/schemas/conversation'
      required:
      - conversation
      title: event-conversation-updated
      type: object
    event-dev-user-created:
      properties:
        dev_user:
          $ref: '#/components/schemas/dev-user'
      required:
      - dev_user
      title: event-dev-user-created
      type: object
    event-dev-user-deleted:
      properties:
        id:
          description: The ID of the Dev user that was deleted.
          type: string
      required:
      - id
      title: event-dev-user-deleted
      type: object
    event-dev-user-updated:
      properties:
        dev_user:
          $ref: '#/components/schemas/dev-user'
      required:
      - dev_user
      title: event-dev-user-updated
      type: object
    event-part-created:
      properties:
        part:
          $ref: '#/components/schemas/part'
      required:
      - part
      title: event-part-created
      type: object
    event-part-deleted:
      properties:
        id:
          description: The ID of the part that was deleted.
          example: PROD-12345
          type: string
      required:
      - id
      title: event-part-deleted
      type: object
    event-part-updated:
      properties:
        part:
          $ref: '#/components/schemas/part'
      required:
      - part
      title: event-part-updated
      type: object
    event-rev-org-created:
      properties:
        rev_org:
          $ref: '#/components/schemas/rev-org'
      required:
      - rev_org
      title: event-rev-org-created
      type: object
    event-rev-org-deleted:
      properties:
        id:
          description: The ID of the Rev organization that was deleted.
          example: REV-AbCdEfGh
          type: string
      required:
      - id
      title: event-rev-org-deleted
      type: object
    event-rev-org-updated:
      properties:
        rev_org:
          $ref: '#/components/schemas/rev-org'
      required:
      - rev_org
      title: event-rev-org-updated
      type: object
    event-rev-user-created:
      properties:
        rev_user:
          $ref: '#/components/schemas/rev-user'
      required:
      - rev_user
      title: event-rev-user-created
      type: object
    event-rev-user-deleted:
      properties:
        id:
          description: The ID of the Rev user that was deleted.
          type: string
      required:
      - id
      title: event-rev-user-deleted
      type: object
    event-rev-user-updated:
      properties:
        rev_user:
          $ref: '#/components/schemas/rev-user'
      required:
      - rev_user
      title: event-rev-user-updated
      type: object
    event-sla-tracker-created:
      properties:
        sla_tracker:
          $ref: '#/components/schemas/sla-tracker'
      required:
      - sla_tracker
      title: event-sla-tracker-created
      type: object
    event-sla-tracker-deleted:
      properties:
        id:
          description: The ID of the SLA tracker that was deleted.
          type: string
      required:
      - id
      title: event-sla-tracker-deleted
      type: object
    event-sla-tracker-updated:
      properties:
        sla_tracker:
          $ref: '#/components/schemas/sla-tracker'
      required:
      - sla_tracker
      title: event-sla-tracker-updated
      type: object
    event-source:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          config:
            description: |
              Configuration of the event source. Fields depend on the event
              source type.
            type: object
          name:
            description: Name of the event source.
            type: string
          setup_instructions:
            $ref: '#/components/schemas/event-source-setup-instructions'
          status:
            $ref: '#/components/schemas/event-source-status'
          trigger_url:
            description: |
              The URL to trigger the event source. Valid only for HTTP
              based-event sources. This URL supports both GET and POST requests.
            type: string
        type: object
      title: event-source
    event-source-get-request:
      properties:
        id:
          description: The event source's ID.
          type: string
      required:
      - id
      title: event-source-get-request
      type: object
    event-source-get-response:
      properties:
        event_source:
          $ref: '#/components/schemas/event-source'
      required:
      - event_source
      title: event-source-get-response
      type: object
      x-go-name: EventSourceGetResponseBody
    event-source-setup-instructions:
      description: Instructions for setting up the event source.
      properties:
        content:
          description: Content of the instructions.
          type: string
      title: event-source-setup-instructions
      type: object
    event-source-status:
      description: |
        Status of the event source. Note that paused/blocked event sources
        return NotFound error on triggering.
      enum:
      - active
      - blocked
      - paused
      type: string
    event-sources-delete-scheduled-event-request:
      properties:
        event_key:
          description: The event key for the event which we want to delete.
          type: string
        id:
          description: The event source's ID.
          type: string
      required:
      - event_key
      - id
      title: event-sources-delete-scheduled-event-request
      type: object
    event-sources-schedule-event-request:
      properties:
        event_key:
          description: |
            A unique key for this event (scoped to an event source) used for
            updating/getting/deleting scheduled events.
          type: string
        event_type:
          description: The type of the event.
          type: string
        id:
          description: The event source's ID.
          type: string
        payload:
          description: The raw payload of the event.
          format: byte
          type: string
        publish_at:
          description: |
            The timestamp at which the event should be published. The event is
            guaranteed to be published after this. If omitted, the event is
            published immediately.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
        update_if_exists:
          description: |
            Whether or not to update an existing scheduled event with the same
            event key. If this is false, and an event is already scheduled with
            the same event key, then HTTP 409 Conflict is returned.
          type: boolean
      required:
      - event_type
      - id
      - payload
      title: event-sources-schedule-event-request
      type: object
    event-sources-schedule-event-response:
      properties:
        event_key:
          description: |
            The event key for this event. Auto-generated if the caller doesn't
            specify the event key. This may be empty if the event was published
            immediately.
          type: string
      title: event-sources-schedule-event-response
      type: object
      x-go-name: EventSourcesScheduleEventResponseBody
    event-survey-response-created:
      properties:
        survey_response:
          $ref: '#/components/schemas/survey-response'
      required:
      - survey_response
      title: event-survey-response-created
      type: object
    event-survey-response-deleted:
      properties:
        id:
          description: The ID of the survey response that was deleted.
          type: string
      required:
      - id
      title: event-survey-response-deleted
      type: object
    event-survey-response-updated:
      properties:
        survey_response:
          $ref: '#/components/schemas/survey-response'
      required:
      - survey_response
      title: event-survey-response-updated
      type: object
    event-tag-created:
      properties:
        tag:
          $ref: '#/components/schemas/tag'
      required:
      - tag
      title: event-tag-created
      type: object
    event-tag-deleted:
      properties:
        id:
          description: The ID of the tag that was deleted.
          example: TAG-12345
          type: string
      required:
      - id
      title: event-tag-deleted
      type: object
    event-tag-updated:
      properties:
        tag:
          $ref: '#/components/schemas/tag'
      required:
      - tag
      title: event-tag-updated
      type: object
    event-timeline-entry-created:
      properties:
        entry:
          $ref: '#/components/schemas/timeline-entry'
      required:
      - entry
      title: event-timeline-entry-created
      type: object
    event-timeline-entry-deleted:
      properties:
        id:
          description: The ID of the timeline entry that was deleted.
          example: don:core:<partition>:devo/<dev-org-id>:ticket/123:timeline_event/<timeline-event-id>
          type: string
      required:
      - id
      title: event-timeline-entry-deleted
      type: object
    event-timeline-entry-updated:
      properties:
        entry:
          $ref: '#/components/schemas/timeline-entry'
      required:
      - entry
      title: event-timeline-entry-updated
      type: object
    event-webhook-created:
      properties:
        webhook:
          $ref: '#/components/schemas/webhook'
      required:
      - webhook
      title: event-webhook-created
      type: object
    event-webhook-deleted:
      properties:
        id:
          description: The ID of the webhook that was deleted.
          example: don:integration:<partition>:devo/<dev-org-id>:webhook/<webhook-id>
          type: string
      required:
      - id
      title: event-webhook-deleted
      type: object
    event-webhook-updated:
      properties:
        webhook:
          $ref: '#/components/schemas/webhook'
      required:
      - webhook
      title: event-webhook-updated
      type: object
    event-work-created:
      properties:
        work:
          $ref: '#/components/schemas/work'
      required:
      - work
      title: event-work-created
      type: object
    event-work-deleted:
      properties:
        id:
          description: The ID of the work that was deleted.
          example: ISS-12345
          type: string
      required:
      - id
      title: event-work-deleted
      type: object
    event-work-updated:
      properties:
        work:
          $ref: '#/components/schemas/work'
      required:
      - work
      title: event-work-updated
      type: object
    external-identity:
      description: External identity of a user.
      properties:
        display_name:
          description: Display name of the user in the external source.
          type: string
        id:
          description: Unique ID of the user in the external source.
          type: string
        is_verified:
          description: Whether the external identity is verified or not.
          type: boolean
        issuer:
          description: Issuer of the external identity of the user.
          type: string
      title: external-identity
      type: object
    feature:
      allOf:
      - $ref: '#/components/schemas/part-base'
      title: feature
    feature-summary:
      allOf:
      - $ref: '#/components/schemas/part-base-summary'
      title: feature-summary
    field-descriptor:
      additionalProperties: false
      description: Set of field attributes.
      title: field-descriptor
      type: object
    group:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          description:
            description: Description of the group.
            type: string
          is_default:
            description: Whether it is a default group.
            type: boolean
          member_type:
            $ref: '#/components/schemas/group-member-type'
          name:
            description: Name of the group.
            type: string
          owner:
            $ref: '#/components/schemas/user-summary'
        required:
        - is_default
        type: object
      title: group
    group-member-type:
      description: Type of the members in the group.
      enum:
      - dev_user
      - rev_user
      type: string
    group-members-add-request:
      description: A request to add a new member to a group.
      properties:
        group:
          description: ID of the group where the member is being added.
          type: string
        member:
          description: ID of the member to be added.
          example: DEVU-12345
          type: string
      required:
      - group
      - member
      title: group-members-add-request
      type: object
    group-members-add-response:
      additionalProperties: false
      title: group-members-add-response
      type: object
      x-go-name: GroupMembersAddResponseBody
    group-members-list-request:
      description: A request to list group members.
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        group:
          description: ID of the group for which to list members.
          type: string
        limit:
          description: |
            The maximum number of members to return. If not set, then the
            default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
      required:
      - group
      title: group-members-list-request
      type: object
    group-members-list-response:
      description: List of group members.
      properties:
        members:
          description: List of members.
          items:
            $ref: '#/components/schemas/group-members-list-response-member'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - members
      title: group-members-list-response
      type: object
      x-go-name: GroupMembersListResponseBody
    group-members-list-response-member:
      description: A group member.
      properties:
        member:
          $ref: '#/components/schemas/member-summary'
      required:
      - member
      title: group-members-list-response-member
      type: object
    group-members-remove-request:
      description: A request to remove a group member.
      properties:
        group:
          description: ID of the group where the member is being removed.
          type: string
        member:
          description: ID of the member to be removed.
          example: DEVU-12345
          type: string
      required:
      - group
      - member
      title: group-members-remove-request
      type: object
    group-members-remove-response:
      additionalProperties: false
      title: group-members-remove-response
      type: object
      x-go-name: GroupMembersRemoveResponseBody
    group-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          group:
            $ref: '#/components/schemas/group-summary'
        required:
        - group
        type: object
      title: group-search-summary
    group-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          member_type:
            $ref: '#/components/schemas/group-member-type'
          name:
            description: Name of the group.
            type: string
        type: object
      title: group-summary
    group-type:
      description: Type of the group.
      enum:
      - dynamic
      - static
      type: string
    grouped-vista-flavor:
      description: Denotes the use case of the grouped vista.
      enum:
      - nnl
      - sprint_board
      - support_inbox
      type: string
    grouped-vista-summary:
      allOf:
      - $ref: '#/components/schemas/vista-base-summary'
      - properties:
          flavor:
            $ref: '#/components/schemas/grouped-vista-flavor'
        type: object
      description: Represents a group of multiple vistas as a single unit.
      title: grouped-vista-summary
    groups-create-request:
      description: A request to create a new group.
      properties:
        description:
          description: Description of the group.
          type: string
        dynamic_group_info:
          $ref: '#/components/schemas/dynamic-group-info'
        member_type:
          $ref: '#/components/schemas/group-member-type'
        name:
          description: Unique name of the group.
          type: string
        owner:
          description: Owner of the group.
          type: string
        type:
          $ref: '#/components/schemas/group-type'
      required:
      - description
      - name
      title: groups-create-request
      type: object
    groups-create-response:
      description: The response to group creation.
      properties:
        group:
          $ref: '#/components/schemas/group'
      required:
      - group
      title: groups-create-response
      type: object
      x-go-name: GroupsCreateResponseBody
    groups-get-request:
      description: A request to get information about a group.
      properties:
        id:
          description: The ID of the group to get.
          type: string
      required:
      - id
      title: groups-get-request
      type: object
    groups-get-response:
      description: The response to getting the group.
      properties:
        group:
          $ref: '#/components/schemas/group'
      required:
      - group
      title: groups-get-response
      type: object
      x-go-name: GroupsGetResponseBody
    groups-list-request:
      description: A request to get information about a list of groups.
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        group_type:
          description: Filters the groups based on the group type.
          items:
            $ref: '#/components/schemas/group-type'
          type: array
        limit:
          description: |
            The maximum number of groups to return. The default is '50'.
          format: int32
          type: integer
        member_type:
          description: Filters the groups on basis of member type.
          items:
            $ref: '#/components/schemas/group-member-type'
          type: array
        mode:
          $ref: '#/components/schemas/list-mode'
        sort_by:
          description: Comma-separated fields to sort the groups by.
          items:
            type: string
          type: array
      title: groups-list-request
      type: object
    groups-list-response:
      description: The response to listing the groups.
      properties:
        groups:
          description: The list of groups.
          items:
            $ref: '#/components/schemas/group'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - groups
      title: groups-list-response
      type: object
      x-go-name: GroupsListResponseBody
    groups-update-request:
      description: A request to update a group.
      properties:
        description:
          description: The updated group's description.
          type: string
        dynamic_group_info:
          $ref: '#/components/schemas/groups-update-request-dynamic-group-info'
        id:
          description: The ID of the group to update.
          type: string
        name:
          description: The updated group's name.
          type: string
        owner:
          description: The updated group's owner.
          type: string
      required:
      - id
      title: groups-update-request
      type: object
    groups-update-request-dynamic-group-info:
      properties:
        membership_expression:
          $ref: '#/components/schemas/boolean-expression'
      required:
      - membership_expression
      title: groups-update-request-dynamic-group-info
      type: object
    groups-update-response:
      description: The response to group update.
      properties:
        group:
          $ref: '#/components/schemas/group'
      required:
      - group
      title: groups-update-response
      type: object
      x-go-name: GroupsUpdateResponseBody
    issue:
      allOf:
      - $ref: '#/components/schemas/work-base'
      - properties:
          developed_with:
            description: Parts associated based on git events.
            items:
              $ref: '#/components/schemas/part-summary'
            type: array
          priority:
            $ref: '#/components/schemas/issue-priority'
          sprint:
            $ref: '#/components/schemas/vista-group-item-summary'
          target_start_date:
            description: Target start date for the object.
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
            type: string
        type: object
      title: issue
    issue-priority:
      description: Priority of the work based upon impact and criticality.
      enum:
      - p0
      - p1
      - p2
      - p3
      type: string
    issue-summary:
      allOf:
      - $ref: '#/components/schemas/work-base-summary'
      - properties:
          priority:
            $ref: '#/components/schemas/issue-priority'
        type: object
      title: issue-summary
    job-history-item:
      description: Defines a job history line item.
      properties:
        employment_status:
          $ref: '#/components/schemas/enum-value'
        end_date:
          description: The end date of the job, or not specified if current.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
        is_current:
          description: Is this the current active job for the user.
          type: boolean
        location:
          description: The job location for the user.
          type: string
        start_date:
          description: The start date of the job.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
        title:
          description: The job title for the user.
          type: string
      title: job-history-item
      type: object
    legacy-stage:
      description: Describes the current stage of a work item.
      properties:
        name:
          description: Current stage name of the work item.
          type: string
      required:
      - name
      title: legacy-stage
      type: object
    legacy-stage-summary:
      description: Describes the current stage of a work item.
      properties:
        name:
          description: Current stage name of the work item.
          type: string
      required:
      - name
      title: legacy-stage-summary
      type: object
    lines-of-code:
      description: Details of lines of code in this code change.
      properties:
        file_count:
          description: Count of files involved in this code change.
          format: int64
          type: integer
        lines_added:
          description: Number of new lines added in this code change.
          format: int64
          type: integer
        lines_deleted:
          description: Number of lines deleted in this code change.
          format: int64
          type: integer
        lines_modified:
          description: Number of lines modified in this code change.
          format: int64
          type: integer
      title: lines-of-code
      type: object
    link:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          link_type:
            $ref: '#/components/schemas/link-type'
          source:
            $ref: '#/components/schemas/link-endpoint-summary'
          target:
            $ref: '#/components/schemas/link-endpoint-summary'
        required:
        - link_type
        - source
        - target
        type: object
      title: link
    link-endpoint-summary:
      discriminator:
        mapping:
          capability: '#/components/schemas/capability-summary'
          conversation: '#/components/schemas/conversation-summary'
          enhancement: '#/components/schemas/enhancement-summary'
          feature: '#/components/schemas/feature-summary'
          issue: '#/components/schemas/issue-summary'
          opportunity: '#/components/schemas/opportunity-summary'
          product: '#/components/schemas/product-summary'
          task: '#/components/schemas/task-summary'
          ticket: '#/components/schemas/ticket-summary'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/capability-summary'
      - $ref: '#/components/schemas/conversation-summary'
      - $ref: '#/components/schemas/enhancement-summary'
      - $ref: '#/components/schemas/feature-summary'
      - $ref: '#/components/schemas/issue-summary'
      - $ref: '#/components/schemas/opportunity-summary'
      - $ref: '#/components/schemas/product-summary'
      - $ref: '#/components/schemas/task-summary'
      - $ref: '#/components/schemas/ticket-summary'
      properties:
        type:
          $ref: '#/components/schemas/link-endpoint-type'
      required:
      - type
      title: link-endpoint-summary
      type: object
    link-endpoint-type:
      enum:
      - capability
      - conversation
      - enhancement
      - feature
      - issue
      - opportunity
      - product
      - task
      - ticket
      type: string
    link-rev-user-to-rev-org-request:
      description: Request to link a Rev user to an existing Rev organization.
      properties:
        id:
          description: The ID of the Rev user.
          type: string
        rev_org:
          description: The ID of the Rev organization to link the Rev user to.
          example: REV-AbCdEfGh
          type: string
        rev_org_don:
          deprecated: true
          description: |
            The don of the rev org to link the rev user to. This is deprecated,
            use rev_org instead.
          example: REV-AbCdEfGh
          type: string
        user_don:
          deprecated: true
          description: |
            The don of the rev user to link. This is deprecated, use id
            instead.
          type: string
      title: link-rev-user-to-rev-org-request
      type: object
    link-rev-user-to-rev-org-response:
      description: |
        Response for linking a Rev user to an existing Rev organization.
      properties:
        rev_user:
          $ref: '#/components/schemas/rev-user'
      required:
      - rev_user
      title: link-rev-user-to-rev-org-response
      type: object
      x-go-name: LinkRevUserToRevOrgResponseBody
    link-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          link:
            $ref: '#/components/schemas/link-summary'
        required:
        - link
        type: object
      title: link-search-summary
    link-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          link_type:
            $ref: '#/components/schemas/link-type'
          source:
            $ref: '#/components/schemas/link-endpoint-summary'
          target:
            $ref: '#/components/schemas/link-endpoint-summary'
        required:
        - link_type
        - source
        - target
        type: object
      title: link-summary
    link-type:
      description: Type of link used to define the relationship.
      enum:
      - developed_with
      - imports
      - is_dependent_on
      - is_duplicate_of
      - is_parent_of
      - is_part_of
      - is_related_to
      - serves
      type: string
    links-create-request:
      description: The request to create a new link.
      properties:
        link_type:
          $ref: '#/components/schemas/link-type'
        source:
          description: The ID of the source object.
          type: string
        target:
          description: The ID of the target object.
          type: string
      required:
      - link_type
      - source
      - target
      title: links-create-request
      type: object
    links-create-response:
      description: The response to creating a new link.
      properties:
        link:
          $ref: '#/components/schemas/link'
      required:
      - link
      title: links-create-response
      type: object
      x-go-name: LinksCreateResponseBody
    links-delete-request:
      description: The request to delete a link.
      properties:
        id:
          description: The ID of the link to delete.
          type: string
      required:
      - id
      title: links-delete-request
      type: object
    links-delete-response:
      additionalProperties: false
      description: The response for deleting a link.
      title: links-delete-response
      type: object
      x-go-name: LinksDeleteResponseBody
    links-direction:
      description: |
        The direction of link, which can either be outbound such that the
        object is the source of the link, otherwise inbound where the object is
        the target of the link.
      enum:
      - is_source
      - is_target
      type: string
    links-get-request:
      description: The request to get a link's information.
      properties:
        id:
          description: The requested link's ID.
          type: string
      required:
      - id
      title: links-get-request
      type: object
    links-get-response:
      description: The response to getting a link's information.
      properties:
        link:
          $ref: '#/components/schemas/link'
      required:
      - link
      title: links-get-response
      type: object
      x-go-name: LinksGetResponseBody
    links-list-request:
      description: The request to get information about a list of links.
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        direction:
          $ref: '#/components/schemas/links-direction'
        limit:
          description: |
            The maximum number of links to return. If not set, then the default
            is '50'.
          format: int32
          type: integer
        link_type:
          description: |
            The link type(s) to filter for, otherwise if not present, all link
            types are included.
          items:
            $ref: '#/components/schemas/link-type'
          type: array
        mode:
          $ref: '#/components/schemas/list-mode'
        object:
          description: The ID of the object to list the links for.
          type: string
        types:
          deprecated: true
          description: |
            The link types to filter for, otherwise if not present, all link
            types are included.
          items:
            $ref: '#/components/schemas/link-type'
          type: array
      required:
      - object
      title: links-list-request
      type: object
    links-list-response:
      description: The response to listing the links.
      properties:
        links:
          description: The list of links.
          items:
            $ref: '#/components/schemas/link'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - links
      title: links-list-response
      type: object
      x-go-name: LinksListResponseBody
    list-mode:
      description: |
        The iteration mode to use. If "after", then entries after the provided
        cursor will be returned, or if no cursor is provided, then from the
        beginning. If "before", then entries before the provided cursor will be
        returned, or if no cursor is provided, then from the end. Entries will
        always be returned in the specified sort-by order.
      enum:
      - after
      - before
      type: string
    meeting-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: meeting-summary
    member-summary:
      discriminator:
        mapping:
          dev_user: '#/components/schemas/dev-user-summary'
          rev_user: '#/components/schemas/rev-user-summary'
          sys_user: '#/components/schemas/sys-user-summary'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/dev-user-summary'
      - $ref: '#/components/schemas/rev-user-summary'
      - $ref: '#/components/schemas/sys-user-summary'
      properties:
        type:
          $ref: '#/components/schemas/member-type'
      required:
      - type
      title: member-summary
      type: object
    member-type:
      enum:
      - dev_user
      - rev_user
      - sys_user
      type: string
    metric-data-point:
      properties:
        dimensions:
          description: Key-value pairs for specifying additional attributes.
          items:
            $ref: '#/components/schemas/metric-data-point-dimension'
          maxItems: 12
          type: array
        id:
          description: |
            An ID that uniquely identifies the metric data point. This ID will
            be used for deduplication. Clients can generate its own ID and send
            it in the request. If not provided, DevRev will perform
            content-based deduplication.
          type: string
        timestamp:
          description: Timestamp when metric value is captured.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
        value:
          description: |
            The value corresponding to the metric. For simply recording
            occurrence of an event, this value should be 1.0.
          format: double
          type: number
      required:
      - timestamp
      - value
      title: metric-data-point
      type: object
    metric-data-point-dimension:
      properties:
        key:
          description: |
            The key for the dimension. The keys must be unique and it is not
            allowed to have more than one value with the same key. Key must be
            at least one character long and cannot be longer than 64
            characters.Key can only contain alphanumeric characters (A-Z, a-z,
            and 0-9) and underscores (_). Key cannot start with a number and is
            case-insensitive.
          type: string
        value:
          description: |
            The value for the dimension. Value could be any string and cannot
            be longer than 256 characters.
          type: string
      required:
      - key
      - value
      title: metric-data-point-dimension
      type: object
    metric-definition:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          name:
            description: Human readable name of the metric.
            type: string
        type: object
      title: metric-definition
    metric-definition-applies-to:
      description: The list of item types on which the metric might be applied.
      enum:
      - conversation
      - issue
      - ticket
      type: string
    metric-definition-metric-type:
      description: |
        The type of the metric. 'time' metrics track the time spent in some
        state, supporting operations like 'start', 'stop', 'pause', 'resume'.
        'value' metrics track a value, supporting operations like 'set',
        'increment', 'decrement'.
      enum:
      - time
      - value
      type: string
    metric-definition-status:
      description: |
        The status of the metric. 'active' metrics can be used to create new
        SLAs, while 'inactive' metrics can not be used in new SLAs. Metrics can
        be updated between 'active' and 'inactive' states.
      enum:
      - active
      - inactive
      type: string
    metric-definition-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          name:
            description: Human readable name of the metric.
            type: string
        type: object
      title: metric-definition-summary
    metric-definitions-list-request:
      properties:
        applies_to_type:
          description: The type of objects the metric definition applies to.
          items:
            $ref: '#/components/schemas/metric-definition-applies-to'
          type: array
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        include_custom_metrics:
          description: |
            Whether to include custom metrics in the response. If not set, then
            custom metrics are excluded.
          type: boolean
        limit:
          description: |
            The maximum number of records to return. The default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        status:
          description: The status of the metric definition.
          items:
            $ref: '#/components/schemas/metric-definition-status'
          type: array
        type:
          description: The type of metric definitions sought.
          items:
            $ref: '#/components/schemas/metric-definition-metric-type'
          type: array
      title: metric-definitions-list-request
      type: object
    metric-definitions-list-response:
      properties:
        metric_definitions:
          description: The list of metric definitions.
          items:
            $ref: '#/components/schemas/metric-definition'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - metric_definitions
      title: metric-definitions-list-response
      type: object
      x-go-name: MetricDefinitionsListResponseBody
    metrics-data:
      properties:
        data_points:
          description: |
            One or more data points collected for a given metric such as object
            usage, object state etc.
          items:
            $ref: '#/components/schemas/metric-data-point'
          minItems: 1
          type: array
        name:
          description: |
            Name of the metric which is being measured. For example,
            num_api_calls, num_active_users, etc.
          type: string
        org_ref:
          description: |
            Rev Org ID or external_ref for which metric is being published.Rev
            Org ID is DevRev DON ID. For example,
            don:identity:dvrv-us-1:devo/0:revo/156. External_ref is the
            identification of DevRev customer's customers and maintained by
            DevRev's customers. Devrev will internally resolve external_ref to
            Rev Org ID and use it for further processing. For example,
            external_ref=org_customer_1 may resolve to
            don:identity:dvrv-us-1:devo/0:revo/155.
          type: string
        user_ref:
          description: |
            Rev User ID or user ref for which metric is being published.
          type: string
      required:
      - data_points
      - name
      - org_ref
      title: metrics-data
      type: object
    metrics-data-ingest-request:
      properties:
        metrics:
          description: Metrics data received from Dev orgs.
          items:
            $ref: '#/components/schemas/metrics-data'
          minItems: 1
          type: array
      required:
      - metrics
      title: metrics-data-ingest-request
      type: object
    object-member-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          object_member:
            $ref: '#/components/schemas/object-member-summary'
        required:
        - object_member
        type: object
      title: object-member-search-summary
    object-member-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: object-member-summary
    opportunity:
      allOf:
      - $ref: '#/components/schemas/work-base'
      title: opportunity
    opportunity-forecast-category:
      description: Forecast category of the opportunity.
      enum:
      - commit
      - omitted
      - pipeline
      - strong_upside
      - upside
      - won
      type: string
    opportunity-priority:
      description: Priority of the opportunity.
      enum:
      - p0
      - p1
      - p2
      - p3
      type: string
    opportunity-summary:
      allOf:
      - $ref: '#/components/schemas/work-base-summary'
      title: opportunity-summary
    org-base:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          display_name:
            description: Name of the Organization.
            type: string
        type: object
      title: org-base
    org-base-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          display_name:
            description: Name of the Organization.
            type: string
        type: object
      title: org-base-summary
    org-environment:
      description: |
        The environment of the Org. Defaults to 'production' if not specified.
      enum:
      - production
      - staging
      - test
      type: string
    org-schedule:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          default_weekly_org_schedule:
            $ref: '#/components/schemas/weekly-org-schedule'
          min_valid_days:
            description: |
              The schedule must be valid and well-defined for at least this many
              days in the future, otherwise a warning notification is generated.
              Default is 0 if not specified.
            format: int32
            type: integer
          name:
            description: Human-readable name.
            type: string
          org_schedule_fragments:
            description: |
              The list of schedule fragments. It must be an ordered list of
              contiguous fragments (the next starting when the previous one
              ends), updates in a published schedule are only allowed to add new
              ones to the future.
            items:
              $ref: '#/components/schemas/org-schedule-fragment-overview'
            type: array
          status:
            $ref: '#/components/schemas/org-schedule-status'
          timezone:
            description: |
              Timezone in which this is defined. Only organization schedules in
              the same timezone can be directly combined.
            type: string
          valid_until:
            description: |
              Derived field indicating when a valid organization schedule will
              become invalid. If omitted, the schedule is already invalid. A
              schedule is valid if it has a weekly schedule for all named periods
              for all its schedule fragments, and if it has a schedule fragment
              for the time period in question.
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
            type: string
          weekly_org_schedules:
            description: |
              If the organization schedule fragment specifies that the given day
              belongs to a named period, a weekly schedule from this list with
              the matching name will be selected.
            items:
              $ref: '#/components/schemas/weekly-org-schedule'
            type: array
        required:
        - status
        type: object
      title: org-schedule
    org-schedule-fragment:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          from:
            description: |
              The date (inclusive) on which the organization schedule fragment
              begins.
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
            type: string
          intervals:
            description: |
              Periods during which the schedule is considered to be 'off' or to
              be in some specific named period.
            items:
              $ref: '#/components/schemas/org-schedule-interval'
            type: array
          name:
            description: |
              Human-readable name, indicating the purpose of the schedule.
            type: string
          region_codes:
            description: |
              CLDR region code of the countries/regions it is meant to be valid
              for. Does not drive logic, serves only for easier filtering and
              organization.
            items:
              type: string
            type: array
          status:
            $ref: '#/components/schemas/org-schedule-fragment-status'
          to:
            description: |
              The date (exclusive) on which the organization schedule fragment's
              validity ends.
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
            type: string
        required:
        - status
        type: object
      title: org-schedule-fragment
    org-schedule-fragment-overview:
      additionalProperties: false
      description: |
        The representation of the organization schedule fragment embedded
        inside a organization schedule, used to quickly look up the schedule
        fragment for the right period.
      title: org-schedule-fragment-overview
      type: object
    org-schedule-fragment-status:
      description: |
        Status determines how an item can be used. In 'draft' status an item
        can be edited but can't be used. When 'published' the item can longer
        be edited but can be used. 'Archived' is read-only.
      enum:
      - archived
      - draft
      - published
      type: string
    org-schedule-fragments-create-request:
      properties:
        from:
          description: |
            Date (inclusive) on which the organization schedule fragment
            begins.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
        intervals:
          description: The intervals that comprise the schedule fragment.
          items:
            $ref: '#/components/schemas/create-org-schedule-interval'
          type: array
        name:
          description: Name of the organization schedule fragment.
          type: string
        region_codes:
          description: |
            CLDR region code of the countries/regions it is meant to be valid
            for. Does not drive logic, serves only for easier filtering and
            organization.
          items:
            type: string
          type: array
        to:
          description: |
            Date (exclusive) on which the organization schedule fragment's
            validity ends.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      required:
      - from
      - intervals
      - name
      - to
      title: org-schedule-fragments-create-request
      type: object
    org-schedule-fragments-create-response:
      properties:
        org_schedule_fragment:
          $ref: '#/components/schemas/org-schedule-fragment'
      required:
      - org_schedule_fragment
      title: org-schedule-fragments-create-response
      type: object
      x-go-name: OrgScheduleFragmentsCreateResponseBody
    org-schedule-fragments-get-request:
      properties:
        id:
          description: Organization schedule Fragment ID.
          type: string
      required:
      - id
      title: org-schedule-fragments-get-request
      type: object
    org-schedule-fragments-get-response:
      properties:
        org_schedule_fragment:
          $ref: '#/components/schemas/org-schedule-fragment'
      required:
      - org_schedule_fragment
      title: org-schedule-fragments-get-response
      type: object
      x-go-name: OrgScheduleFragmentsGetResponseBody
    org-schedule-fragments-transition-request:
      properties:
        id:
          description: Organization schedule Fragment ID.
          type: string
        status:
          $ref: '#/components/schemas/org-schedule-fragment-status'
      required:
      - id
      - status
      title: org-schedule-fragments-transition-request
      type: object
    org-schedule-fragments-transition-response:
      properties:
        org_schedule_fragment:
          $ref: '#/components/schemas/org-schedule-fragment'
      required:
      - org_schedule_fragment
      title: org-schedule-fragments-transition-response
      type: object
      x-go-name: OrgScheduleFragmentsTransitionResponseBody
    org-schedule-interval:
      additionalProperties: false
      description: An optionally named period on day granularity.
      title: org-schedule-interval
      type: object
    org-schedule-status:
      description: |
        Status determines how an item can be used. In 'draft' status an item
        can be edited but can't be used. When 'published' the item can longer
        be edited but can be used. 'Archived' is read-only.
      enum:
      - archived
      - draft
      - published
      type: string
    org-schedule-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          name:
            description: Human-readable name.
            type: string
          status:
            $ref: '#/components/schemas/org-schedule-status'
          timezone:
            description: |
              Timezone in which this is defined. Only organization schedules in
              the same timezone can be directly combined.
            type: string
          valid_until:
            description: |
              Derived field indicating when a valid organization schedule will
              become invalid. If omitted, the schedule is already invalid. A
              schedule is valid if it has a weekly schedule for all named periods
              for all its schedule fragments, and if it has a schedule fragment
              for the time period in question.
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
            type: string
        required:
        - status
        type: object
      title: org-schedule-summary
    org-schedules-create-request:
      properties:
        default_weekly_org_schedule:
          $ref: '#/components/schemas/set-weekly-org-schedule'
        min_valid_days:
          description: |
            Organization schedule must be valid for at least this many days in
            the future. Meaning organization schedule fragments must cover this
            period. 0 if omitted.
          format: int64
          type: integer
        name:
          description: Human-readable name.
          type: string
        org_schedule_fragments:
          description: |
            List of organization schedule fragments with no overlaps or gaps.
          items:
            $ref: '#/components/schemas/set-org-schedule-fragment-summary'
          type: array
        timezone:
          description: |
            Timezone in which the organization schedule applies. Expected to be
            a valid IANA time zone name such as America/New_York.
          type: string
        weekly_org_schedules:
          description: |
            If this day belongs to a named period according to the currently
            active organization schedule fragment, a weekly organization
            schedule from this list with the corresponding name will apply.
          items:
            $ref: '#/components/schemas/set-weekly-org-schedule'
          type: array
      required:
      - name
      - timezone
      title: org-schedules-create-request
      type: object
    org-schedules-create-response:
      properties:
        org_schedule:
          $ref: '#/components/schemas/org-schedule'
      required:
      - org_schedule
      title: org-schedules-create-response
      type: object
      x-go-name: OrgSchedulesCreateResponseBody
    org-schedules-get-request:
      properties:
        id:
          description: Organization schedule ID.
          type: string
      required:
      - id
      title: org-schedules-get-request
      type: object
    org-schedules-get-response:
      properties:
        org_schedule:
          $ref: '#/components/schemas/org-schedule'
      required:
      - org_schedule
      title: org-schedules-get-response
      type: object
      x-go-name: OrgSchedulesGetResponseBody
    org-schedules-list-request:
      properties:
        created_by_id:
          description: Creator ID the filter matches.
          items:
            type: string
          type: array
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            Max number of organization schedules returned in a page. Default is
            50.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        status:
          description: The organization schedule statuses the filter matches.
          items:
            $ref: '#/components/schemas/org-schedule-status'
          type: array
        valid_until:
          $ref: '#/components/schemas/date-filter'
      title: org-schedules-list-request
      type: object
    org-schedules-list-response:
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        org_schedules:
          description: The list of organization schedules.
          items:
            $ref: '#/components/schemas/org-schedule'
          type: array
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - org_schedules
      title: org-schedules-list-response
      type: object
      x-go-name: OrgSchedulesListResponseBody
    org-schedules-set-future-request:
      properties:
        id:
          description: Organization schedule ID.
          type: string
        org_schedule_fragment_id:
          description: Organization schedule Fragment ID.
          type: string
      required:
      - id
      - org_schedule_fragment_id
      title: org-schedules-set-future-request
      type: object
    org-schedules-set-future-response:
      properties:
        org_schedule:
          $ref: '#/components/schemas/org-schedule'
      required:
      - org_schedule
      title: org-schedules-set-future-response
      type: object
      x-go-name: OrgSchedulesSetFutureResponseBody
    org-schedules-transition-request:
      properties:
        id:
          description: Organization schedule ID.
          type: string
        status:
          $ref: '#/components/schemas/org-schedule-status'
      required:
      - id
      - status
      title: org-schedules-transition-request
      type: object
    org-schedules-transition-response:
      properties:
        org_schedule:
          $ref: '#/components/schemas/org-schedule'
      required:
      - org_schedule
      title: org-schedules-transition-response
      type: object
      x-go-name: OrgSchedulesTransitionResponseBody
    org-schedules-update-request:
      properties:
        default_weekly_org_schedule:
          $ref: '#/components/schemas/set-weekly-org-schedule'
        id:
          description: Organization schedule ID.
          type: string
        min_valid_days:
          description: |
            Organization schedule must be valid for at least this many days in
            the future. Meaning organization schedule fragments must cover this
            period. 0 if omitted.
          format: int64
          type: integer
        name:
          description: Human-readable name.
          type: string
        org_schedule_fragments:
          description: |
            List of organization schedule fragments with no overlaps or gaps.
          items:
            $ref: '#/components/schemas/set-org-schedule-fragment-summary'
          type: array
        timezone:
          description: |
            Timezone in which the organization schedule applies. Expected to be
            a valid IANA time zone name such as America/New_York.
          type: string
        weekly_org_schedules:
          description: |
            If this day belongs to a named period according to the currently
            active organization schedule fragment, a weekly organization
            schedule from this list with the corresponding name will apply.
          items:
            $ref: '#/components/schemas/set-weekly-org-schedule'
          type: array
      required:
      - id
      title: org-schedules-update-request
      type: object
    org-schedules-update-response:
      properties:
        org_schedule:
          $ref: '#/components/schemas/org-schedule'
      required:
      - org_schedule
      title: org-schedules-update-response
      type: object
      x-go-name: OrgSchedulesUpdateResponseBody
    org-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          org:
            $ref: '#/components/schemas/org-summary'
        required:
        - org
        type: object
      title: org-search-summary
    org-summary:
      discriminator:
        mapping:
          account: '#/components/schemas/account-summary'
          rev_org: '#/components/schemas/rev-org-summary'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/account-summary'
      - $ref: '#/components/schemas/rev-org-summary'
      properties:
        type:
          $ref: '#/components/schemas/org-type'
      required:
      - type
      title: org-summary
      type: object
    org-type:
      enum:
      - account
      - rev_org
      type: string
    parent-part-filter:
      description: The filter for specifying parent part.
      properties:
        level:
          description: Number of levels to fetch the part hierarchy up to.
          format: int32
          minimum: 1
          type: integer
        parts:
          description: Part IDs to fetch the hierarchy for.
          example:
          - PROD-12345
          items:
            type: string
          minItems: 1
          type: array
      required:
      - parts
      title: parent-part-filter
      type: object
    part:
      discriminator:
        mapping:
          capability: '#/components/schemas/capability'
          enhancement: '#/components/schemas/enhancement'
          feature: '#/components/schemas/feature'
          product: '#/components/schemas/product'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/capability'
      - $ref: '#/components/schemas/enhancement'
      - $ref: '#/components/schemas/feature'
      - $ref: '#/components/schemas/product'
      properties:
        type:
          $ref: '#/components/schemas/part-type'
      required:
      - type
      title: part
      type: object
    part-base:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          artifacts:
            description: The attached artifacts.
            items:
              $ref: '#/components/schemas/artifact-summary'
            type: array
          custom_fields:
            description: Custom fields.
            type: object
          custom_schema_fragments:
            description: Custom schema fragments.
            example:
            - don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
            items:
              type: string
            type: array
          description:
            description: Description of the part.
            type: string
          name:
            description: Name of the part.
            type: string
          owned_by:
            description: The users that own the part.
            items:
              $ref: '#/components/schemas/user-summary'
            type: array
          stock_schema_fragment:
            description: Stock schema fragment.
            example: don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
            type: string
          subtype:
            description: Subtype corresponding to the custom type fragment.
            type: string
          tags:
            description: Tags associated with the object.
            items:
              $ref: '#/components/schemas/tag-with-value'
            type: array
        required:
        - name
        - owned_by
        type: object
      title: part-base
    part-base-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          name:
            description: Name of the part.
            type: string
        required:
        - name
        type: object
      title: part-base-summary
    part-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          part:
            $ref: '#/components/schemas/part-summary'
        required:
        - part
        type: object
      title: part-search-summary
    part-summary:
      discriminator:
        mapping:
          capability: '#/components/schemas/capability-summary'
          enhancement: '#/components/schemas/enhancement-summary'
          feature: '#/components/schemas/feature-summary'
          product: '#/components/schemas/product-summary'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/capability-summary'
      - $ref: '#/components/schemas/enhancement-summary'
      - $ref: '#/components/schemas/feature-summary'
      - $ref: '#/components/schemas/product-summary'
      properties:
        type:
          $ref: '#/components/schemas/part-type'
      required:
      - type
      title: part-summary
      type: object
    part-type:
      enum:
      - capability
      - enhancement
      - feature
      - product
      type: string
    parts-create-request:
      discriminator:
        mapping:
          capability: '#/components/schemas/parts-create-request-capability'
          enhancement: '#/components/schemas/parts-create-request-enhancement'
          feature: '#/components/schemas/parts-create-request-feature'
          product: '#/components/schemas/parts-create-request-product'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/parts-create-request-capability'
      - $ref: '#/components/schemas/parts-create-request-enhancement'
      - $ref: '#/components/schemas/parts-create-request-feature'
      - $ref: '#/components/schemas/parts-create-request-product'
      properties:
        artifacts:
          description: The IDs of the artifacts.
          example:
          - ARTIFACT-12345
          items:
            type: string
          type: array
        custom_fields:
          description: Custom fields.
          type: object
        custom_schema_fragments:
          description: The custom schema fragments to use.
          example:
          - don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
          items:
            type: string
          type: array
        description:
          description: Description of the part.
          type: string
        name:
          description: Name of the part.
          type: string
        owned_by:
          description: The users that own the part.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        type:
          $ref: '#/components/schemas/part-type'
      required:
      - name
      - owned_by
      - type
      title: parts-create-request
      type: object
    parts-create-request-capability:
      properties:
        parent_part:
          description: ID of the parent product for the capability.
          example:
          - PROD-12345
          items:
            type: string
          maxItems: 1
          type: array
      required:
      - parent_part
      title: parts-create-request-capability
      type: object
    parts-create-request-enhancement:
      properties:
        parent_part:
          description: |
            ID of the parent part on which the enhancement is to be created.
          example:
          - PROD-12345
          items:
            type: string
          maxItems: 1
          type: array
        target_close_date:
          description: |
            Target close date by which enhancement is expected to be closed.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
        target_start_date:
          description: |
            Target start date by which enhancement is expected to be started.
            Example Date Format: 2000-11-01T01:01:01Z
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      required:
      - parent_part
      title: parts-create-request-enhancement
      type: object
    parts-create-request-feature:
      properties:
        parent_part:
          description: ID of the parent capability/feature for the feature.
          example:
          - PROD-12345
          items:
            type: string
          maxItems: 1
          type: array
      required:
      - parent_part
      title: parts-create-request-feature
      type: object
    parts-create-request-product:
      additionalProperties: false
      title: parts-create-request-product
      type: object
    parts-create-response:
      properties:
        part:
          $ref: '#/components/schemas/part'
      required:
      - part
      title: parts-create-response
      type: object
      x-go-name: PartsCreateResponseBody
    parts-delete-request:
      properties:
        id:
          description: The ID of the part to delete.
          example: PROD-12345
          type: string
      required:
      - id
      title: parts-delete-request
      type: object
    parts-delete-response:
      additionalProperties: false
      title: parts-delete-response
      type: object
      x-go-name: PartsDeleteResponseBody
    parts-get-request:
      properties:
        id:
          description: The ID of the part to retrieve.
          example: PROD-12345
          type: string
      required:
      - id
      title: parts-get-request
      type: object
    parts-get-response:
      properties:
        part:
          $ref: '#/components/schemas/part'
      required:
      - part
      title: parts-get-response
      type: object
      x-go-name: PartsGetResponseBody
    parts-list-request:
      properties:
        created_by:
          description: Filters for parts created by any of these users.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of parts to return. The default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        name:
          description: Filters for parts of the provided name(s).
          items:
            type: string
          type: array
        owned_by:
          description: Filters for parts owned by any of these users.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        parent_part:
          $ref: '#/components/schemas/parent-part-filter'
        type:
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
      title: parts-list-request
      type: object
    parts-list-response:
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        parts:
          description: The list of parts.
          items:
            $ref: '#/components/schemas/part'
          type: array
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - parts
      title: parts-list-response
      type: object
      x-go-name: PartsListResponseBody
    parts-update-request:
      discriminator:
        mapping:
          capability: '#/components/schemas/parts-update-request-capability'
          enhancement: '#/components/schemas/parts-update-request-enhancement'
          feature: '#/components/schemas/parts-update-request-feature'
          none: '#/components/schemas/empty'
          product: '#/components/schemas/parts-update-request-product'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/empty'
      - $ref: '#/components/schemas/parts-update-request-capability'
      - $ref: '#/components/schemas/parts-update-request-enhancement'
      - $ref: '#/components/schemas/parts-update-request-feature'
      - $ref: '#/components/schemas/parts-update-request-product'
      properties:
        artifacts:
          $ref: '#/components/schemas/parts-update-request-artifacts'
        custom_fields:
          description: Custom fields.
          type: object
        custom_schema_fragments:
          description: The custom schema fragments to use.
          example:
          - don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
          items:
            type: string
          type: array
        description:
          description: The updated description of the part.
          type: string
        id:
          description: The ID of the part to update.
          example: PROD-12345
          type: string
        name:
          description: The updated name of the part.
          type: string
        owned_by:
          $ref: '#/components/schemas/parts-update-request-owned-by'
        type:
          $ref: '#/components/schemas/part-type'
      required:
      - id
      title: parts-update-request
      type: object
    parts-update-request-artifacts:
      properties:
        set:
          description: Sets the artifacts to the provided IDs.
          example:
          - ARTIFACT-12345
          items:
            type: string
          type: array
      title: parts-update-request-artifacts
      type: object
    parts-update-request-capability:
      additionalProperties: false
      title: parts-update-request-capability
      type: object
    parts-update-request-enhancement:
      properties:
        target_close_date:
          description: Updates the target close date of the enhancement.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          nullable: true
          type: string
        target_start_date:
          description: |
            Updates the target start date of the enhancement. Example Date
            Format: 2000-11-01T01:01:01Z
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          nullable: true
          type: string
      title: parts-update-request-enhancement
      type: object
    parts-update-request-feature:
      additionalProperties: false
      title: parts-update-request-feature
      type: object
    parts-update-request-owned-by:
      properties:
        set:
          description: |
            Sets the owner IDs to the provided user IDs. This must not be
            empty.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      title: parts-update-request-owned-by
      type: object
    parts-update-request-product:
      additionalProperties: false
      title: parts-update-request-product
      type: object
    parts-update-response:
      properties:
        part:
          $ref: '#/components/schemas/part'
      required:
      - part
      title: parts-update-response
      type: object
      x-go-name: PartsUpdateResponseBody
    product:
      allOf:
      - $ref: '#/components/schemas/part-base'
      title: product
    product-summary:
      allOf:
      - $ref: '#/components/schemas/part-base-summary'
      title: product-summary
    question-answer:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          answer:
            description: The Answer.
            type: string
          question:
            description: The Question.
            type: string
          suggested_answer:
            description: |
              An alternative answer suggested by the Q/A generation algorithm.
            type: string
          suggested_for_deletion:
            description: |
              Whether the Q/A was marked for deletion by the Q/A generation
              algorithm.
            type: boolean
          topic:
            description: The topic to which the QA belongs.
            type: string
          verified:
            description: Whether the Q/A was verified.
            type: boolean
        type: object
      title: question-answer
    question-answer-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          question_answer:
            $ref: '#/components/schemas/question-answer-summary'
        required:
        - question_answer
        type: object
      title: question-answer-search-summary
    question-answer-status:
      description: Status of the question answer.
      enum:
      - archived
      - discarded
      - draft
      - published
      - review_needed
      type: string
    question-answer-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          question:
            description: The Question.
            type: string
        type: object
      title: question-answer-summary
    question-answers-create-request:
      description: The request to create a question-answer.
      properties:
        access_level:
          $ref: '#/components/schemas/access-level'
        answer:
          description: Answer of the question-answer.
          type: string
        applies_to_articles:
          description: The articles that the question-answer applies to.
          example:
          - ARTICLE-12345
          items:
            type: string
          type: array
        applies_to_parts:
          description: The parts that the question-answer applies to.
          example:
          - PROD-12345
          items:
            type: string
          minItems: 1
          type: array
        owned_by:
          description: The users that own the question-answer.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        question:
          description: Question of the question-answer.
          type: string
        shared_with:
          description: |
            Information about the role the member receives due to the share.
          items:
            $ref: '#/components/schemas/set-shared-with-membership'
          type: array
        sources:
          description: The source of the question-answer.
          example:
          - ARTICLE-12345
          items:
            type: string
          type: array
        status:
          $ref: '#/components/schemas/question-answer-status'
        suggested_answer:
          description: |
            Alternative answer for the question-answer sugested by Q/A
            Discovery.
          type: string
        suggested_for_deletion:
          description: |
            Whether the question-answer was suggeste to be deleted by Q/A
            Discovery.
          type: boolean
        tags:
          description: Tags associated with the question-answer.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
        topic:
          description: Topic of the question-answer.
          type: string
        verified:
          description: |
            Whether the question-answer was verified by a user or not.
          type: boolean
      required:
      - answer
      - applies_to_parts
      - owned_by
      - question
      - status
      title: question-answers-create-request
      type: object
    question-answers-create-response:
      description: Create question-answer response.
      properties:
        question_answer:
          $ref: '#/components/schemas/question-answer'
      required:
      - question_answer
      title: question-answers-create-response
      type: object
      x-go-name: QuestionAnswersCreateResponseBody
    question-answers-delete-request:
      description: The request to delete a question-answer.
      properties:
        id:
          description: The ID of the question-answer.
          type: string
        question_answer_id:
          deprecated: true
          description: The ID of the question-answer.
          type: string
      required:
      - id
      title: question-answers-delete-request
      type: object
    question-answers-get-request:
      description: The request to get a question-answer.
      properties:
        id:
          description: The ID of the required question-answer.
          type: string
      required:
      - id
      title: question-answers-get-request
      type: object
    question-answers-get-response:
      description: Get question-answer response.
      properties:
        question_answer:
          $ref: '#/components/schemas/question-answer'
      required:
      - question_answer
      title: question-answers-get-response
      type: object
      x-go-name: QuestionAnswersGetResponseBody
    question-answers-list-request:
      description: The request to list question-answers.
      properties:
        applies_to_articles:
          description: |
            Filters for question-answer belonging to any of the provided
            articles.
          example:
          - ARTICLE-12345
          items:
            type: string
          type: array
        applies_to_parts:
          description: |
            Filters for question-answer belonging to any of the provided parts.
          example:
          - PROD-12345
          items:
            type: string
          type: array
        created_by:
          description: |
            Filters for question-answers created by any of the provided users.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of question-answers to return. The default is
            '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        owned_by:
          description: |
            Filters for question-answers owned by any of the provided users.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      title: question-answers-list-request
      type: object
    question-answers-list-response:
      description: List question-answers response.
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        question_answers:
          description: The question-answers entries matching the request.
          items:
            $ref: '#/components/schemas/question-answer'
          type: array
        total:
          description: Total number of question-answer items for the request.
          format: int32
          type: integer
      required:
      - question_answers
      - total
      title: question-answers-list-response
      type: object
      x-go-name: QuestionAnswersListResponseBody
    question-answers-update-request:
      description: The request to update a question-answer.
      properties:
        access_level:
          $ref: '#/components/schemas/access-level'
        answer:
          description: |
            Updated answer of the question-answer object, or unchanged if not
            provided.
          type: string
        applies_to_articles:
          $ref: '#/components/schemas/question-answers-update-request-applies-to-articles'
        applies_to_parts:
          $ref: '#/components/schemas/question-answers-update-request-applies-to-parts'
        id:
          description: The question-answer's ID.
          type: string
        owned_by:
          $ref: '#/components/schemas/question-answers-update-request-owned-by'
        question:
          description: |
            Updated question of the question-answer object, or unchanged if not
            provided.
          type: string
        shared_with:
          $ref: '#/components/schemas/question-answers-update-request-shared-with'
        sources:
          $ref: '#/components/schemas/question-answers-update-request-sources'
        status:
          $ref: '#/components/schemas/question-answer-status'
        suggested_answer:
          description: |
            Updated suggested_answer of the question-answer object, or
            unchanged if not provided.
          type: string
        suggested_for_deletion:
          description: |
            Updated suggested_for_deletion of the question-answer object, or
            unchanged if not provided.
          type: boolean
        tags:
          $ref: '#/components/schemas/question-answers-update-request-tags'
        topic:
          description: |
            Updated topic of the question-answer object, or unchanged if not
            provided.
          type: string
        verified:
          description: |
            Updates whether the question-answer was verified by a user or not.
          type: boolean
      required:
      - id
      title: question-answers-update-request
      type: object
    question-answers-update-request-applies-to-articles:
      properties:
        set:
          description: Updates the article that the question-answer applies to.
          example:
          - ARTICLE-12345
          items:
            type: string
          type: array
      title: question-answers-update-request-applies-to-articles
      type: object
    question-answers-update-request-applies-to-parts:
      properties:
        set:
          description: Updates the parts that the question-answer applies to.
          example:
          - PROD-12345
          items:
            type: string
          type: array
      title: question-answers-update-request-applies-to-parts
      type: object
    question-answers-update-request-owned-by:
      properties:
        set:
          description: |
            Sets the owner IDs to the provided user IDs. This must not be
            empty.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      title: question-answers-update-request-owned-by
      type: object
    question-answers-update-request-shared-with:
      properties:
        set:
          description: Sets the field to the provided membership list.
          items:
            $ref: '#/components/schemas/set-shared-with-membership'
          type: array
      title: question-answers-update-request-shared-with
      type: object
    question-answers-update-request-sources:
      properties:
        set:
          description: Sets the sources that generated the question-answer.
          example:
          - ARTICLE-12345
          items:
            type: string
          type: array
      title: question-answers-update-request-sources
      type: object
    question-answers-update-request-tags:
      properties:
        set:
          description: Sets the provided tags on the question-answer.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
      title: question-answers-update-request-tags
      type: object
    question-answers-update-response:
      properties:
        question_answer:
          $ref: '#/components/schemas/question-answer'
      required:
      - question_answer
      title: question-answers-update-response
      type: object
      x-go-name: QuestionAnswersUpdateResponseBody
    resource:
      description: Resource details.
      properties:
        artifacts:
          description: Ids of the artifacts.
          items:
            $ref: '#/components/schemas/artifact-summary'
          type: array
        url:
          description: URL of the external article.
          type: string
      title: resource
      type: object
    resource-summary:
      description: Resource details.
      properties:
        artifacts:
          description: Ids of the artifacts.
          items:
            $ref: '#/components/schemas/artifact-summary'
          type: array
        url:
          description: URL of the external article.
          type: string
      title: resource-summary
      type: object
    rev-org:
      allOf:
      - $ref: '#/components/schemas/org-base'
      - properties:
          account:
            $ref: '#/components/schemas/account-summary'
          artifacts:
            description: The artifacts attached to the Rev organization.
            items:
              $ref: '#/components/schemas/artifact-summary'
            type: array
          custom_fields:
            description: Custom fields.
            type: object
          custom_schema_fragments:
            description: Custom schema fragments.
            example:
            - don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
            items:
              type: string
            type: array
          description:
            description: Description of the Rev organization.
            type: string
          domain:
            description: Company's domain name. Example - 'devrev.ai'.
            type: string
          external_ref:
            description: |
              External ref is a unique identifier for the Rev (customer)
              organization from your primary customer system of records. If none
              is specified, a system-generated identifier will be assigned to the
              organization.
            type: string
          stock_schema_fragment:
            description: Stock schema fragment.
            example: don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
            type: string
          subtype:
            description: Subtype corresponding to the custom type fragment.
            type: string
          tags:
            description: Tags associated with an object.
            items:
              $ref: '#/components/schemas/tag-with-value'
            type: array
        type: object
      title: rev-org
    rev-org-summary:
      allOf:
      - $ref: '#/components/schemas/org-base-summary'
      title: rev-org-summary
    rev-orgs-create-request:
      description: |
        Request object to create a new Rev organization in the Dev
        organization.
      properties:
        account:
          description: Account Id to associate with this Rev organization.
          example: ACC-12345
          type: string
        artifacts:
          description: |
            The IDs of the artifacts to associate with the Rev organization.
          example:
          - ARTIFACT-12345
          items:
            type: string
          type: array
        custom_fields:
          description: Application-defined custom fields.
          type: object
        custom_schema_fragments:
          description: |
            Schema fragment IDs associated with this Rev organization.
          example:
          - don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
          items:
            type: string
          type: array
        description:
          description: Description of the Rev organization.
          type: string
        display_name:
          description: Name of the Rev organization.
          type: string
        domain:
          description: Company's domain name. Example - 'devrev.ai'.
          type: string
        environment:
          $ref: '#/components/schemas/org-environment'
        external_ref:
          description: |
            External ref is a custom unique identifier which is a reference to
            an unique id for this organization's data in some system of
            records.
          type: string
        tags:
          description: Tags associated with the Rev organization.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
        tier:
          description: The tier of the RevOrg.
          type: string
      required:
      - display_name
      title: rev-orgs-create-request
      type: object
    rev-orgs-create-response:
      description: |
        Response object for request to create a new Rev organization.
      properties:
        rev_org:
          $ref: '#/components/schemas/rev-org'
      required:
      - rev_org
      title: rev-orgs-create-response
      type: object
      x-go-name: RevOrgsCreateResponseBody
    rev-orgs-get-request:
      description: Request object to get Rev organization's information.
      properties:
        account:
          description: |
            The ID of account for which default Rev organization is to be
            fetched.
          example: ACC-12345
          type: string
        id:
          description: The ID of the required Rev organization.
          example: REV-AbCdEfGh
          type: string
      title: rev-orgs-get-request
      type: object
    rev-orgs-get-response:
      description: The response to getting a Rev organization's information.
      properties:
        rev_org:
          $ref: '#/components/schemas/rev-org'
      required:
      - rev_org
      title: rev-orgs-get-response
      type: object
      x-go-name: RevOrgsGetResponseBody
    rev-orgs-list-request:
      description: |
        A request to get the list of Rev organizations for the authenticated
        user's Dev organization.
      properties:
        account:
          description: Filters by account.
          example:
          - ACC-12345
          items:
            type: string
          type: array
        created_by:
          description: Filters by creator.
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        custom_field_filter:
          description: |
            Filters on custom fields. Input will be of the format
            (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
          items:
            type: string
          type: array
        custom_fields:
          description: Filters for custom fields.
          type: object
        display_name:
          description: Array of display names of Rev orgs to be filtered.
          items:
            type: string
          type: array
        external_ref:
          description: List of external refs to filter Rev organizations for.
          items:
            type: string
          type: array
        limit:
          description: |
            The maximum number of Rev organizations to be retrieved per page.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        sort_by:
          description: |
            Fields to sort the Rev organizations by and the direction to sort
            them.
          items:
            type: string
          type: array
        tags:
          description: List of tags to be filtered.
          items:
            type: string
          type: array
      title: rev-orgs-list-request
      type: object
    rev-orgs-list-response:
      description: |
        The response to getting a list of Rev organizations' information.
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        rev_orgs:
          description: List with all of the Rev organizations' information.
          items:
            $ref: '#/components/schemas/rev-org'
          type: array
      required:
      - rev_orgs
      title: rev-orgs-list-response
      type: object
      x-go-name: RevOrgsListResponseBody
    rev-orgs-update-request:
      description: |
        Request object to update information of the Rev organization.
      properties:
        account:
          description: New account ID to associate with this Rev organization.
          example: ACC-12345
          type: string
        artifacts:
          $ref: '#/components/schemas/rev-orgs-update-request-artifacts'
        custom_schema_fragments:
          description: |
            Schema fragment IDs associated with this Rev organization.
          example:
          - don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
          items:
            type: string
          type: array
        description:
          description: Description of the Rev organization.
          type: string
        display_name:
          description: Customer chosen name for the Rev organization.
          type: string
        domain:
          description: Company's domain name. Example - 'devrev.ai'.
          type: string
        environment:
          $ref: '#/components/schemas/org-environment'
        external_ref:
          description: |
            External ref is a custom unique identifier which is a reference to
            an unique id for this organization's data in some system of
            records.
          type: string
        id:
          description: The ID of Rev organization to update.
          example: REV-AbCdEfGh
          type: string
        tags:
          description: Tags associated with the Rev organization.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
        tier:
          description: The tier of the RevOrg.
          type: string
      required:
      - id
      title: rev-orgs-update-request
      type: object
    rev-orgs-update-request-artifacts:
      properties:
        set:
          description: Sets the IDs to the provided artifact IDs.
          example:
          - ARTIFACT-12345
          items:
            type: string
          type: array
      title: rev-orgs-update-request-artifacts
      type: object
    rev-orgs-update-response:
      description: Response object to updating Rev organization's information.
      properties:
        rev_org:
          $ref: '#/components/schemas/rev-org'
      required:
      - rev_org
      title: rev-orgs-update-response
      type: object
      x-go-name: RevOrgsUpdateResponseBody
    rev-user:
      allOf:
      - $ref: '#/components/schemas/user-base'
      - properties:
          artifacts:
            description: The artifacts attached to the Rev user.
            items:
              $ref: '#/components/schemas/artifact-summary'
            type: array
          custom_fields:
            description: Custom fields.
            type: object
          custom_schema_fragments:
            description: Custom schema fragments.
            example:
            - don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
            items:
              type: string
            type: array
          description:
            description: Description of the Rev user.
            type: string
          external_ref:
            description: |
              External ref is a mutable unique identifier for a user within the
              Rev organization from your primary customer record. If none is
              available, a good alternative is the email address/phone number
              which could uniquely identify the user. If none is specified, a
              system-generated identifier will be assigned to the user.
            type: string
          is_verified:
            description: Whether the Rev user is verified or not.
            type: boolean
          rev_org:
            $ref: '#/components/schemas/org-summary'
          stock_schema_fragment:
            description: Stock schema fragment.
            example: don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
            type: string
          subtype:
            description: Subtype corresponding to the custom type fragment.
            type: string
          tags:
            description: Tags associated with the object.
            items:
              $ref: '#/components/schemas/tag-with-value'
            type: array
        type: object
      title: rev-user
    rev-user-summary:
      allOf:
      - $ref: '#/components/schemas/user-base-summary'
      - properties:
          external_ref:
            description: |
              External ref is a mutable unique identifier for a user within the
              Rev organization from your primary customer record. If none is
              available, a good alternative is the email address/phone number
              which could uniquely identify the user. If none is specified, a
              system-generated identifier will be assigned to the user.
            type: string
          rev_org:
            $ref: '#/components/schemas/org-summary'
        type: object
      title: rev-user-summary
    rev-users-create-request:
      description: |
        Request object to create a new Rev user for a Rev organization.
      properties:
        artifacts:
          description: The IDs of the artifacts to associate with the Rev user.
          example:
          - ARTIFACT-12345
          items:
            type: string
          type: array
        custom_fields:
          description: Application-defined custom fields.
          type: object
        custom_schema_fragments:
          description: The schema fragment IDs associated with the Rev user.
          example:
          - don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
          items:
            type: string
          type: array
        description:
          description: Description of the Rev user.
          type: string
        display_name:
          description: |
            The user's display name. The name is non-unique and mutable.
          type: string
        email:
          description: Email address of the Rev user.
          type: string
        external_ref:
          description: |
            External ref is a mutable unique identifier for a user within the
            Dev organization from your primary customer record. If none is
            available, a good alternative is the email address/phone number
            which could uniquely identify the user. If none is specified, a
            system-generated identifier will be assigned to the user.
          type: string
        phone_numbers:
          description: Phone numbers, in E.164 format, of the Rev user.
          items:
            type: string
          type: array
        rev_org:
          description: |
            The ID of the Rev organization to which the created Rev user is
            associated.
          example: REV-AbCdEfGh
          type: string
        tags:
          description: Tags associated with the Rev user.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
      title: rev-users-create-request
      type: object
    rev-users-create-response:
      description: |
        Response object for creating a new Rev user for Rev organization.
      properties:
        rev_user:
          $ref: '#/components/schemas/rev-user'
      required:
      - rev_user
      title: rev-users-create-response
      type: object
      x-go-name: RevUsersCreateResponseBody
    rev-users-delete-request:
      description: Request object to delete a Rev user.
      properties:
        id:
          description: The ID of Rev user to delete.
          type: string
      required:
      - id
      title: rev-users-delete-request
      type: object
    rev-users-delete-response:
      additionalProperties: false
      description: The response to deleting a Rev user of a Rev organization.
      title: rev-users-delete-response
      type: object
      x-go-name: RevUsersDeleteResponseBody
    rev-users-get-request:
      description: Request object to get a Rev user.
      properties:
        id:
          description: The ID of Rev user to be retrieved.
          type: string
      required:
      - id
      title: rev-users-get-request
      type: object
    rev-users-get-response:
      description: The returned Rev user.
      properties:
        rev_user:
          $ref: '#/components/schemas/rev-user'
      required:
      - rev_user
      title: rev-users-get-response
      type: object
      x-go-name: RevUsersGetResponseBody
    rev-users-list-request:
      description: |
        Gets the list of Rev users belonging to the authenticated user's Dev
        Organization which the user is also authorized to access.
      properties:
        created_by:
          description: |
            Filters for Rev users that were created by the specified user(s).
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        custom_fields:
          description: Filters for custom fields.
          type: object
        email:
          description: List of emails of Rev users to be filtered.
          items:
            type: string
          type: array
        external_ref:
          description: List of external refs to filter Rev users for.
          items:
            type: string
          type: array
        is_verified:
          description: Value of is_verified field to filter the Rev users.
          type: boolean
        limit:
          description: |
            The maximum number of Rev users to return. The default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        phone_numbers:
          description: |
            List of phone numbers, in E.164 format, to filter Rev users on.
          items:
            type: string
          type: array
        rev_org:
          description: List of IDs of Rev organizations to be filtered.
          example:
          - REV-AbCdEfGh
          items:
            type: string
          type: array
        sort_by:
          description: |
            Fields to sort the Rev users by and the direction to sort them.
          items:
            type: string
          type: array
        tags:
          description: List of tags to be filtered.
          items:
            type: string
          type: array
      title: rev-users-list-request
      type: object
    rev-users-list-response:
      description: |
        The response to listing all Rev users matching the filter criteria.
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        rev_users:
          description: List containing all the Rev users.
          items:
            $ref: '#/components/schemas/rev-user'
          type: array
      required:
      - rev_users
      title: rev-users-list-response
      type: object
      x-go-name: RevUsersListResponseBody
    rev-users-update-request:
      description: Request to update details of a Rev user.
      properties:
        artifacts:
          $ref: '#/components/schemas/rev-users-update-request-artifacts'
        custom_fields:
          description: Application-defined custom fields.
          type: object
        custom_schema_fragments:
          $ref: '#/components/schemas/rev-users-update-request-custom-schema-fragments'
        description:
          description: Updated description of the Rev user.
          type: string
        display_name:
          description: Updated display name of the Rev user.
          type: string
        email:
          description: Updated email address of the Rev user.
          type: string
        external_ref:
          description: Updated external ref value of the Rev user.
          type: string
        id:
          description: The ID of Rev user to update.
          type: string
        phone_numbers:
          description: The phone numbers, in E.164 format, of the Rev user.
          items:
            type: string
          type: array
        tags:
          description: Tags associated with the Rev user.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
      required:
      - id
      title: rev-users-update-request
      type: object
    rev-users-update-request-artifacts:
      properties:
        set:
          description: Sets the IDs to the provided artifact IDs.
          example:
          - ARTIFACT-12345
          items:
            type: string
          type: array
      title: rev-users-update-request-artifacts
      type: object
    rev-users-update-request-custom-schema-fragments:
      properties:
        set:
          description: Sets the IDs to the provided schema fragment IDs.
          example:
          - don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
          items:
            type: string
          type: array
      title: rev-users-update-request-custom-schema-fragments
      type: object
    rev-users-update-response:
      description: Updated Rev user object.
      properties:
        rev_user:
          $ref: '#/components/schemas/rev-user'
      required:
      - rev_user
      title: rev-users-update-response
      type: object
      x-go-name: RevUsersUpdateResponseBody
    schema-bool-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          default_value:
            description: Default value.
            type: boolean
        type: object
      title: schema-bool-field-descriptor
    schema-bool-list-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          default_value:
            description: Default value.
            items:
              type: boolean
            type: array
        type: object
      title: schema-bool-list-field-descriptor
    schema-composite-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          composite_type:
            description: Composite type. Required when field type is composite.
            type: string
        type: object
      title: schema-composite-field-descriptor
    schema-composite-list-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          composite_type:
            description: Composite type. Required when field type is composite.
            type: string
        type: object
      title: schema-composite-list-field-descriptor
    schema-date-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          default_value:
            description: Default value.
            type: string
        type: object
      title: schema-date-field-descriptor
    schema-date-list-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          default_value:
            description: Default value.
            items:
              type: string
            type: array
        type: object
      title: schema-date-list-field-descriptor
    schema-double-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          default_value:
            description: Default value.
            format: double
            type: number
        type: object
      title: schema-double-field-descriptor
    schema-double-list-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          default_value:
            description: Default value.
            items:
              format: double
              type: number
            type: array
        type: object
      title: schema-double-list-field-descriptor
    schema-enum-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          allowed_values:
            description: Allowed values for the field.
            items:
              type: string
            type: array
          default_value:
            description: Default value.
            type: string
        required:
        - allowed_values
        type: object
      title: schema-enum-field-descriptor
    schema-enum-list-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          allowed_values:
            description: Allowed values for the field.
            items:
              type: string
            type: array
          default_value:
            description: Default value.
            items:
              type: string
            type: array
        required:
        - allowed_values
        type: object
      title: schema-enum-list-field-descriptor
    schema-field-create-view-ui-metadata:
      description: Create view UI hint overrides.
      properties:
        is_hidden:
          description: Whether field is hidden in the UI create view.
          type: boolean
      title: schema-field-create-view-ui-metadata
      type: object
    schema-field-descriptor:
      description: Set of field attributes.
      discriminator:
        mapping:
          array: '#/components/schemas/schema-field-descriptor-array-type'
          bool: '#/components/schemas/schema-bool-field-descriptor'
          composite: '#/components/schemas/schema-composite-field-descriptor'
          date: '#/components/schemas/schema-date-field-descriptor'
          double: '#/components/schemas/schema-double-field-descriptor'
          enum: '#/components/schemas/schema-enum-field-descriptor'
          id: '#/components/schemas/schema-id-field-descriptor'
          int: '#/components/schemas/schema-int-field-descriptor'
          rich_text: '#/components/schemas/schema-rich-text-field-descriptor'
          text: '#/components/schemas/schema-text-field-descriptor'
          timestamp: '#/components/schemas/schema-timestamp-field-descriptor'
          tokens: '#/components/schemas/schema-tokens-field-descriptor'
          uenum: '#/components/schemas/schema-uenum-field-descriptor'
          unknown: '#/components/schemas/schema-unknown-field-descriptor'
        propertyName: field_type
      oneOf:
      - $ref: '#/components/schemas/schema-bool-field-descriptor'
      - $ref: '#/components/schemas/schema-composite-field-descriptor'
      - $ref: '#/components/schemas/schema-date-field-descriptor'
      - $ref: '#/components/schemas/schema-double-field-descriptor'
      - $ref: '#/components/schemas/schema-enum-field-descriptor'
      - $ref: '#/components/schemas/schema-field-descriptor-array-type'
      - $ref: '#/components/schemas/schema-id-field-descriptor'
      - $ref: '#/components/schemas/schema-int-field-descriptor'
      - $ref: '#/components/schemas/schema-rich-text-field-descriptor'
      - $ref: '#/components/schemas/schema-text-field-descriptor'
      - $ref: '#/components/schemas/schema-timestamp-field-descriptor'
      - $ref: '#/components/schemas/schema-tokens-field-descriptor'
      - $ref: '#/components/schemas/schema-uenum-field-descriptor'
      - $ref: '#/components/schemas/schema-unknown-field-descriptor'
      properties:
        field_type:
          $ref: '#/components/schemas/schema-field-descriptor-field-type'
      required:
      - field_type
      title: schema-field-descriptor
      type: object
    schema-field-descriptor-array-type:
      discriminator:
        mapping:
          bool: '#/components/schemas/schema-bool-list-field-descriptor'
          composite: '#/components/schemas/schema-composite-list-field-descriptor'
          date: '#/components/schemas/schema-date-list-field-descriptor'
          double: '#/components/schemas/schema-double-list-field-descriptor'
          enum: '#/components/schemas/schema-enum-list-field-descriptor'
          id: '#/components/schemas/schema-id-list-field-descriptor'
          int: '#/components/schemas/schema-int-list-field-descriptor'
          rich_text: '#/components/schemas/schema-rich-text-list-field-descriptor'
          text: '#/components/schemas/schema-text-list-field-descriptor'
          timestamp: '#/components/schemas/schema-timestamp-list-field-descriptor'
          tokens: '#/components/schemas/schema-tokens-list-field-descriptor'
          uenum: '#/components/schemas/schema-uenum-list-field-descriptor'
        propertyName: base_type
      oneOf:
      - $ref: '#/components/schemas/schema-bool-list-field-descriptor'
      - $ref: '#/components/schemas/schema-composite-list-field-descriptor'
      - $ref: '#/components/schemas/schema-date-list-field-descriptor'
      - $ref: '#/components/schemas/schema-double-list-field-descriptor'
      - $ref: '#/components/schemas/schema-enum-list-field-descriptor'
      - $ref: '#/components/schemas/schema-id-list-field-descriptor'
      - $ref: '#/components/schemas/schema-int-list-field-descriptor'
      - $ref: '#/components/schemas/schema-rich-text-list-field-descriptor'
      - $ref: '#/components/schemas/schema-text-list-field-descriptor'
      - $ref: '#/components/schemas/schema-timestamp-list-field-descriptor'
      - $ref: '#/components/schemas/schema-tokens-list-field-descriptor'
      - $ref: '#/components/schemas/schema-uenum-list-field-descriptor'
      properties:
        base_type:
          $ref: '#/components/schemas/schema-field-descriptor-array-type-base-type'
        eq_items:
          description: The exact array length.
          format: int64
          type: integer
        max_items:
          description: The maximum array length.
          format: int64
          type: integer
        min_items:
          description: The minimum array length.
          format: int64
          type: integer
      required:
      - base_type
      title: schema-field-descriptor-array-type
      type: object
    schema-field-descriptor-array-type-base-type:
      enum:
      - bool
      - composite
      - date
      - double
      - enum
      - id
      - int
      - rich_text
      - text
      - timestamp
      - tokens
      - uenum
      type: string
    schema-field-descriptor-base:
      properties:
        description:
          description: Description of the field.
          type: string
        is_filterable:
          description: |
            Whether this field is filterable, groupable and sortable.
          type: boolean
        is_immutable:
          description: Whether this field is immutable or not.
          type: boolean
        is_pii:
          description: |
            Whether this field can hold Personally Identifiable Information
            (PII).
          type: boolean
        is_required:
          description: Whether this field is required or not.
          type: boolean
        mfz:
          $ref: '#/components/schemas/schema-field-mfz-metadata'
        name:
          description: Name of the field.
          type: string
        oasis:
          $ref: '#/components/schemas/schema-field-oasis-metadata'
        origin:
          description: Type this field is from.
          type: string
        ui:
          $ref: '#/components/schemas/schema-field-ui-metadata'
      required:
      - name
      title: schema-field-descriptor-base
      type: object
    schema-field-descriptor-field-type:
      enum:
      - array
      - bool
      - composite
      - date
      - double
      - enum
      - id
      - int
      - rich_text
      - text
      - timestamp
      - tokens
      - uenum
      - unknown
      type: string
    schema-field-detail-view-ui-metadata:
      description: Detail view UI hint overrides.
      properties:
        is_hidden:
          description: Whether the field is hidden in the UI detail view.
          type: boolean
      title: schema-field-detail-view-ui-metadata
      type: object
    schema-field-filter-view-ui-metadata:
      description: Filter view UI hint overrides.
      properties:
        is_hidden:
          description: Whether field is hidden in the UI filter view.
          type: boolean
      title: schema-field-filter-view-ui-metadata
      type: object
    schema-field-list-view-ui-metadata:
      description: List view UI hint overrides.
      properties:
        is_hidden:
          description: Whether the field is hidden in the UI list view.
          type: boolean
      title: schema-field-list-view-ui-metadata
      type: object
    schema-field-mfz-metadata:
      additionalProperties: false
      description: The schema of MFZ specific fields.
      title: schema-field-mfz-metadata
      type: object
    schema-field-oasis-metadata:
      additionalProperties: false
      description: The schema of oasis specific fields.
      title: schema-field-oasis-metadata
      type: object
    schema-field-summary-view-ui-metadata:
      description: Summary view UI hint overrides.
      properties:
        is_hidden:
          description: Whether field is hidden in the UI summary view.
          type: boolean
      title: schema-field-summary-view-ui-metadata
      type: object
    schema-field-uenum-value:
      additionalProperties: false
      description: A unified enum value.
      title: schema-field-uenum-value
      type: object
    schema-field-ui-metadata:
      description: The schema of ui specific fields.
      properties:
        create_view:
          $ref: '#/components/schemas/schema-field-create-view-ui-metadata'
        detail_view:
          $ref: '#/components/schemas/schema-field-detail-view-ui-metadata'
        display_name:
          description: The display name of the field.
          type: string
        filter_view:
          $ref: '#/components/schemas/schema-field-filter-view-ui-metadata'
        group_name:
          description: An optional group name for the field.
          type: string
        is_active_in_detail_view:
          description: Whether the field is active in the UI detail view.
          type: boolean
        is_bulk_action_enabled:
          description: Whether the field supports bulk action.
          type: boolean
        is_groupable:
          description: Whether the field is groupable in the UI.
          type: boolean
        is_hidden:
          description: Whether the field is hidden in the UI.
          type: boolean
        is_hidden_during_create:
          description: Whether the field is hidden in the UI during creation.
          type: boolean
        is_read_only:
          description: Whether the field is read-only in the UI.
          type: boolean
        is_shown_in_summary:
          description: Whether the field is shown in the UI summary view.
          type: boolean
        is_sortable:
          description: Whether the field is sortable in the UI.
          type: boolean
        list_view:
          $ref: '#/components/schemas/schema-field-list-view-ui-metadata'
        placeholder:
          description: A placeholder for the field.
          type: string
        summary_view:
          $ref: '#/components/schemas/schema-field-summary-view-ui-metadata'
        tooltip:
          description: Tooltip for the field.
          type: string
      title: schema-field-ui-metadata
      type: object
    schema-id-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          default_value:
            description: Default value.
            type: string
          id_type:
            description: Object ID types. Required when field type is ID.
            items:
              type: string
            type: array
        type: object
      title: schema-id-field-descriptor
    schema-id-list-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          default_value:
            description: Default value.
            items:
              type: string
            type: array
          id_type:
            description: Object ID types. Required when field type is ID.
            items:
              type: string
            type: array
        type: object
      title: schema-id-list-field-descriptor
    schema-int-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          default_value:
            description: Default value.
            format: int64
            type: integer
          gt:
            description: The minimum value for the integer (exclusive).
            format: int64
            type: integer
          gte:
            description: The minimum value for the integer (inclusive).
            format: int64
            type: integer
          lt:
            description: The maximum value for the integer (exclusive).
            format: int64
            type: integer
          lte:
            description: The maximum value for the integer (inclusive).
            format: int64
            type: integer
        type: object
      title: schema-int-field-descriptor
    schema-int-list-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          default_value:
            description: Default value.
            items:
              format: int64
              type: integer
            type: array
          gt:
            description: The minimum value for the integer (exclusive).
            format: int64
            type: integer
          gte:
            description: The minimum value for the integer (inclusive).
            format: int64
            type: integer
          lt:
            description: The maximum value for the integer (exclusive).
            format: int64
            type: integer
          lte:
            description: The maximum value for the integer (inclusive).
            format: int64
            type: integer
        type: object
      title: schema-int-list-field-descriptor
    schema-rich-text-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          contains:
            description: The contained substring.
            type: string
          default_value:
            description: Default value.
            type: string
          eq_len:
            description: The exact string length.
            format: int64
            type: integer
          max_len:
            description: The maximum string length.
            format: int64
            type: integer
          min_len:
            description: The minimum string length.
            format: int64
            type: integer
          pattern:
            description: The string pattern (regular expression).
            type: string
          prefix:
            description: The string prefix.
            type: string
          suffix:
            description: The string suffix.
            type: string
        type: object
      title: schema-rich-text-field-descriptor
    schema-rich-text-list-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          contains:
            description: The contained substring.
            type: string
          default_value:
            description: Default value.
            items:
              type: string
            type: array
          eq_len:
            description: The exact string length.
            format: int64
            type: integer
          max_len:
            description: The maximum string length.
            format: int64
            type: integer
          min_len:
            description: The minimum string length.
            format: int64
            type: integer
          pattern:
            description: The string pattern (regular expression).
            type: string
          prefix:
            description: The string prefix.
            type: string
          suffix:
            description: The string suffix.
            type: string
        type: object
      title: schema-rich-text-list-field-descriptor
    schema-text-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          contains:
            description: The contained substring.
            type: string
          default_value:
            description: Default value.
            type: string
          eq_len:
            description: The exact string length.
            format: int64
            type: integer
          max_len:
            description: The maximum string length.
            format: int64
            type: integer
          min_len:
            description: The minimum string length.
            format: int64
            type: integer
          pattern:
            description: The string pattern (regular expression).
            type: string
          prefix:
            description: The string prefix.
            type: string
          suffix:
            description: The string suffix.
            type: string
        type: object
      title: schema-text-field-descriptor
    schema-text-list-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          contains:
            description: The contained substring.
            type: string
          default_value:
            description: Default value.
            items:
              type: string
            type: array
          eq_len:
            description: The exact string length.
            format: int64
            type: integer
          max_len:
            description: The maximum string length.
            format: int64
            type: integer
          min_len:
            description: The minimum string length.
            format: int64
            type: integer
          pattern:
            description: The string pattern (regular expression).
            type: string
          prefix:
            description: The string prefix.
            type: string
          suffix:
            description: The string suffix.
            type: string
        type: object
      title: schema-text-list-field-descriptor
    schema-timestamp-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          default_value:
            description: Default value.
            type: string
        type: object
      title: schema-timestamp-field-descriptor
    schema-timestamp-list-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          default_value:
            description: Default value.
            items:
              type: string
            type: array
        type: object
      title: schema-timestamp-list-field-descriptor
    schema-tokens-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          contains:
            description: The contained substring.
            type: string
          default_value:
            description: Default value.
            type: string
          eq_len:
            description: The exact string length.
            format: int64
            type: integer
          max_len:
            description: The maximum string length.
            format: int64
            type: integer
          min_len:
            description: The minimum string length.
            format: int64
            type: integer
          pattern:
            description: The string pattern (regular expression).
            type: string
          prefix:
            description: The string prefix.
            type: string
          suffix:
            description: The string suffix.
            type: string
        type: object
      title: schema-tokens-field-descriptor
    schema-tokens-list-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          contains:
            description: The contained substring.
            type: string
          default_value:
            description: Default value.
            items:
              type: string
            type: array
          eq_len:
            description: The exact string length.
            format: int64
            type: integer
          max_len:
            description: The maximum string length.
            format: int64
            type: integer
          min_len:
            description: The minimum string length.
            format: int64
            type: integer
          pattern:
            description: The string pattern (regular expression).
            type: string
          prefix:
            description: The string prefix.
            type: string
          suffix:
            description: The string suffix.
            type: string
        type: object
      title: schema-tokens-list-field-descriptor
    schema-uenum-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          allowed_values:
            description: Allowed values for the field.
            items:
              $ref: '#/components/schemas/schema-field-uenum-value'
            type: array
          default_value:
            description: Default value.
            format: int64
            type: integer
        required:
        - allowed_values
        type: object
      title: schema-uenum-field-descriptor
    schema-uenum-list-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          allowed_values:
            description: Allowed values for the field.
            items:
              $ref: '#/components/schemas/schema-field-uenum-value'
            type: array
          default_value:
            description: Default value.
            items:
              format: int64
              type: integer
            type: array
        required:
        - allowed_values
        type: object
      title: schema-uenum-list-field-descriptor
    schema-unknown-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      title: schema-unknown-field-descriptor
    search-core-request:
      description: Search request.
      properties:
        cursor:
          description: |
            The cursor from where to begin iteration. Start from beginning if
            not provided.
          type: string
        limit:
          description: |
            The maximum number of items to return in a page. The default is
            '10'.
          format: int32
          type: integer
        namespaces:
          description: The namespaces to search in.
          items:
            $ref: '#/components/schemas/search-namespace'
          type: array
        query:
          description: |
            The query string. Search query language:
            https://docs.devrev.ai/product/search#fields
          type: string
        sort_by:
          $ref: '#/components/schemas/search-sort-by-param'
        sort_order:
          $ref: '#/components/schemas/search-sort-order-param'
      required:
      - query
      title: search-core-request
      type: object
    search-core-response:
      description: Search response.
      properties:
        cursor:
          description: |
            The cursor from where to begin iteration. Start from beginning if
            not provided.
          type: string
        results:
          description: The search results.
          items:
            $ref: '#/components/schemas/search-result'
          type: array
      required:
      - results
      title: search-core-response
      type: object
      x-go-name: SearchCoreResponseBody
    search-hybrid-namespace:
      description: The namespaces for hybrid search.
      enum:
      - article
      - conversation
      - issue
      - part
      - question_answer
      - ticket
      - work
      type: string
    search-hybrid-request:
      description: Request for search with exact, prefix and infix matches.
      properties:
        limit:
          description: |
            The maximum number of items to return in a page. The default is
            '10'.
          format: int32
          maximum: 50
          minimum: 0
          type: integer
        namespace:
          $ref: '#/components/schemas/search-hybrid-namespace'
        query:
          description: The query string.
          maxLength: 400
          minLength: 1
          type: string
        semantic_weight:
          description: |
            The weightage for semantic search. Values between 0 and 1 are
            accepted.
          format: float
          maximum: 1
          minimum: 0
          type: number
      required:
      - namespace
      - query
      title: search-hybrid-request
      type: object
    search-hybrid-response:
      description: Hybrid search response.
      properties:
        results:
          description: The search results.
          items:
            $ref: '#/components/schemas/search-result'
          type: array
      required:
      - results
      title: search-hybrid-response
      type: object
      x-go-name: SearchHybridResponseBody
    search-namespace:
      description: The namespaces to search in.
      enum:
      - account
      - article
      - capability
      - component
      - conversation
      - custom_object
      - custom_part
      - custom_work
      - dashboard
      - dev_user
      - enhancement
      - feature
      - group
      - issue
      - linkable
      - microservice
      - object_member
      - opportunity
      - product
      - project
      - question_answer
      - rev_org
      - rev_user
      - runnable
      - service_account
      - sys_user
      - tag
      - task
      - ticket
      - vista
      type: string
    search-result:
      discriminator:
        mapping:
          account: '#/components/schemas/account-search-summary'
          article: '#/components/schemas/article-search-summary'
          artifact: '#/components/schemas/artifact-search-summary'
          conversation: '#/components/schemas/conversation-search-summary'
          custom_object: '#/components/schemas/custom-object-search-summary'
          dashboard: '#/components/schemas/dashboard-search-summary'
          group: '#/components/schemas/group-search-summary'
          link: '#/components/schemas/link-search-summary'
          object_member: '#/components/schemas/object-member-search-summary'
          org: '#/components/schemas/org-search-summary'
          part: '#/components/schemas/part-search-summary'
          question_answer: '#/components/schemas/question-answer-search-summary'
          tag: '#/components/schemas/tag-search-summary'
          user: '#/components/schemas/user-search-summary'
          vista: '#/components/schemas/vista-search-summary'
          work: '#/components/schemas/work-search-summary'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/account-search-summary'
      - $ref: '#/components/schemas/article-search-summary'
      - $ref: '#/components/schemas/artifact-search-summary'
      - $ref: '#/components/schemas/conversation-search-summary'
      - $ref: '#/components/schemas/custom-object-search-summary'
      - $ref: '#/components/schemas/dashboard-search-summary'
      - $ref: '#/components/schemas/group-search-summary'
      - $ref: '#/components/schemas/link-search-summary'
      - $ref: '#/components/schemas/object-member-search-summary'
      - $ref: '#/components/schemas/org-search-summary'
      - $ref: '#/components/schemas/part-search-summary'
      - $ref: '#/components/schemas/question-answer-search-summary'
      - $ref: '#/components/schemas/tag-search-summary'
      - $ref: '#/components/schemas/user-search-summary'
      - $ref: '#/components/schemas/vista-search-summary'
      - $ref: '#/components/schemas/work-search-summary'
      properties:
        type:
          $ref: '#/components/schemas/search-result-type'
      required:
      - type
      title: search-result
      type: object
    search-result-type:
      enum:
      - account
      - article
      - artifact
      - conversation
      - custom_object
      - dashboard
      - group
      - link
      - object_member
      - org
      - part
      - question_answer
      - tag
      - user
      - vista
      - work
      type: string
    search-sort-by-param:
      description: Search sort by parameters.
      enum:
      - created_date
      - modified_date
      - relevance
      type: string
    search-sort-order-param:
      description: Search sort order parameters.
      enum:
      - asc
      - desc
      type: string
    search-summary-base:
      properties:
        modified_date:
          description: Timestamp when the object was last modified.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
        snippet:
          description: Text snippet where the search hit occurred.
          type: string
      title: search-summary-base
      type: object
    service-account:
      allOf:
      - $ref: '#/components/schemas/user-base'
      title: service-account
    service-account-summary:
      allOf:
      - $ref: '#/components/schemas/user-base-summary'
      title: service-account-summary
    service-accounts-get-request:
      description: The request object to get a service account's information.
      properties:
        id:
          description: The ID of the requested service account.
          type: string
      required:
      - id
      title: service-accounts-get-request
      type: object
    service-accounts-get-response:
      description: |
        The response object that carries the service account's information
        corresponding to the request.
      properties:
        service_account:
          $ref: '#/components/schemas/service-account'
      required:
      - service_account
      title: service-accounts-get-response
      type: object
      x-go-name: ServiceAccountsGetResponseBody
    set-issue-selector:
      properties:
        custom_fields:
          description: |
            Custom fields on the issue with their fully qualified names and the
            associated with their exact allowed values. The SLA policy applies
            to issues where all named custom fields have exactly the specified
            values.
          type: object
        parts:
          description: The SLA policy applies to the issues of these parts.
          example:
          - PROD-12345
          items:
            type: string
          type: array
        rev_orgs:
          description: The SLA policy applies to the issues of these revorgs.
          example:
          - REV-AbCdEfGh
          items:
            type: string
          type: array
        stage_name:
          description: The SLA policy applies to issues with these stages.
          items:
            type: string
          type: array
        subtype:
          description: The issue subtype for which the SLA policy applies.
          items:
            type: string
          type: array
        tags:
          description: |
            The SLA policy applies to issues with these tags. If empty, the tag
            filter isn't applied.
          example:
          - TAG-12345
          items:
            type: string
          type: array
      title: set-issue-selector
      type: object
    set-org-schedule-fragment-summary:
      properties:
        id:
          description: Organization schedule fragment ID.
          type: string
      required:
      - id
      title: set-org-schedule-fragment-summary
      type: object
    set-shared-with-membership:
      additionalProperties: false
      description: |
        Information about the role the member receives due to the share.
      title: set-shared-with-membership
      type: object
    set-sla-policy:
      properties:
        metrics:
          description: Metrics to apply to the selected items.
          items:
            $ref: '#/components/schemas/set-support-metric-target'
          type: array
        name:
          description: Human-readable name.
          type: string
        selector:
          $ref: '#/components/schemas/set-sla-selector'
      required:
      - name
      - selector
      title: set-sla-policy
      type: object
    set-sla-selector:
      properties:
        applies_to:
          $ref: '#/components/schemas/sla-selector-applies-to'
        custom_fields:
          description: |
            Custom fields with their fully qualified names and associated with
            their exact allowed values. The SLA policy applies to records where
            all named custom fields have exactly the specified values. If the
            value is null, the field must have null value or not be present.
          type: object
        issue_selector:
          $ref: '#/components/schemas/set-issue-selector'
        parts:
          description: The SLA policy applies to the tickets of these parts.
          example:
          - PROD-12345
          items:
            type: string
          type: array
        priority:
          description: |
            The SLA policy applies to conversations with these priorities.
          items:
            $ref: '#/components/schemas/sla-selector-priority'
          type: array
        severity:
          description: The SLA policy applies to tickets with these severities.
          items:
            $ref: '#/components/schemas/sla-selector-severity'
          type: array
        source_channel:
          description: |
            The SLA policy applies to conversations with these sources.
          items:
            type: string
          type: array
        subtype:
          description: The SLA policy applies to tickets with these subtypes.
          items:
            type: string
          type: array
        tags:
          description: The SLA policy applies to items with these tags.
          example:
          - TAG-12345
          items:
            type: string
          type: array
      required:
      - applies_to
      title: set-sla-selector
      type: object
    set-support-metric-target:
      properties:
        metric:
          description: The metric to apply.
          type: string
        org_schedule_id:
          description: |
            The organization schedule controlling this metrics calculation.
            Time based metrics don't consume time while their schedule is off.
          type: string
        performance:
          description: |
            The percentage of instances for which this metric's target must not
            be breached, in order to avoid breaching the overall SLA policy.
          format: double
          type: number
        target:
          description: |
            The target value to be achieved, for example the time in which to
            do something, or the maximum allowed number of message pairs. The
            units and interpretation of the value is controlled by the
            properties of the referenced metric.
          format: int32
          type: integer
        warning_target:
          description: |
            The threshold in the same units as target where the metric is
            considered to be 'at risk'.
          format: int32
          type: integer
      required:
      - metric
      - target
      title: set-support-metric-target
      type: object
    set-tag-with-value:
      properties:
        id:
          description: The ID of the tag.
          example: TAG-12345
          type: string
        value:
          description: |
            The value for the object's association with the tag. If specified,
            the value must be one that's specified in the tag's allowed values.
          type: string
      required:
      - id
      title: set-tag-with-value
      type: object
    set-weekly-org-schedule:
      properties:
        intervals:
          description: The 'on' intervals of the week.
          items:
            $ref: '#/components/schemas/create-weekly-org-schedule-interval'
          type: array
        period_name:
          description: |
            The name of the period during which the organization schedule
            applies.
          type: string
      required:
      - intervals
      - period_name
      title: set-weekly-org-schedule
      type: object
    shared-with-membership-filter:
      additionalProperties: false
      description: Filter on target item based on intended audience.
      title: shared-with-membership-filter
      type: object
    sla:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          compensation:
            $ref: '#/components/schemas/sla-compensation'
          description:
            description: Description of the purpose and capabilities of the SLA.
            type: string
          evaluation_period:
            $ref: '#/components/schemas/sla-evaluation-period'
          name:
            description: Human-readable name.
            type: string
          policies:
            description: |
              The policies encompassed by this SLA, ordered in decreasing
              priority.
            items:
              $ref: '#/components/schemas/sla-policy'
            type: array
          sla_type:
            $ref: '#/components/schemas/sla-type'
          status:
            $ref: '#/components/schemas/sla-status'
        required:
        - name
        - status
        type: object
      title: sla
    sla-applies-to:
      description: |
        The object types on which the SLA applies. An external SLA can apply to
        multiple object types, but an internal SLA can apply to only one object
        type.
      enum:
      - conversation
      - issue
      - ticket
      type: string
    sla-assign-result:
      properties:
        error:
          $ref: '#/components/schemas/error'
        rev_org:
          $ref: '#/components/schemas/rev-org-summary'
      required:
      - rev_org
      title: sla-assign-result
      type: object
    sla-compensation:
      additionalProperties: false
      description: |
        Describes the compensation to be provided in case of SLA breach. It is
        not 'self-executing', it is the responsibility of the organization
        providing the SLA to actually transfer the promised credit, resource or
        other payment.
      title: sla-compensation
      type: object
    sla-evaluation-period:
      description: |
        Specifies the frequency of when the contractually-meaningful evaluation
        of the SLA happens. The organization for their own information might
        evaluate the various metrics contained in the policy as often as we can
        make it feasible for them, but only the evaluation at the end of the
        evaluation period triggers a compensation and needs to be shared with
        the customer.
      enum:
      - monthly
      - quarterly
      - weekly
      - yearly
      type: string
    sla-policy:
      additionalProperties: false
      description: A policy that represents a promise to your revs.
      title: sla-policy
      type: object
    sla-selector-applies-to:
      description: The item type for which the SLA policy applies.
      enum:
      - conversation
      - issue
      - ticket
      type: string
    sla-selector-priority:
      description: |
        The SLA policy applies to conversations with these priorities.
      enum:
      - p0
      - p1
      - p2
      type: string
    sla-selector-severity:
      description: The SLA policy applies to tickets with these severities.
      enum:
      - blocker
      - high
      - low
      - medium
      type: string
    sla-status:
      description: |
        Status determines how an item can be used. In 'draft' status an item
        can be edited but can't be used. When 'published' the item can longer
        be edited but can be used. 'Archived' is read-only.
      enum:
      - archived
      - draft
      - published
      type: string
    sla-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          name:
            description: Human-readable name.
            type: string
          sla_type:
            $ref: '#/components/schemas/sla-type'
          status:
            $ref: '#/components/schemas/sla-status'
        required:
        - name
        - status
        type: object
      title: sla-summary
    sla-summary-filter:
      description: The filter for SLA summary.
      properties:
        stage:
          description: Filters for records with any of the provided SLA stages.
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
        target_time:
          $ref: '#/components/schemas/date-filter'
      title: sla-summary-filter
      type: object
    sla-summary-stage:
      description: |
        The stage of the SLA. This is the metric stage which is closest to
        breach.
      enum:
      - breached
      - completed
      - paused
      - running
      - warning
      type: string
    sla-tracker:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          applies_to_id:
            description: Details of the object on which the SLA is being tracked.
            type: string
          metric_target_summaries:
            description: |
              Summary of the metrics target being tracked in the SLA tracker.
            items:
              $ref: '#/components/schemas/archetype-metric-target'
            type: array
          sla:
            $ref: '#/components/schemas/sla-summary'
          sla_policy_id:
            description: |
              Details of the applicable SLA policy. Can be omitted if no sla
              applies, or if no policy of the sla applies at the moment.
            type: string
          stage:
            description: SLA stage of the object being tracked.
            type: string
          status:
            description: |
              It is an indicator of whether the SLA has ever been breached
              (missed). If not, it shows whether the SLA is completed, in
              progress, or nil - if no policy is applied.
            type: string
        required:
        - metric_target_summaries
        type: object
      title: sla-tracker
    sla-tracker-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: sla-tracker-summary
    sla-type:
      description: Type of the SLA.
      enum:
      - external
      - internal
      type: string
    slas-assign-request:
      properties:
        id:
          description: |
            The SLA which would be assigned to the Rev organizations. If
            omitted, the SLA of all the rev organizations referenced will be
            unset.
          type: string
        rev_orgs:
          description: The Rev organizations to apply the SLA to.
          example:
          - REV-AbCdEfGh
          items:
            type: string
          type: array
      required:
      - rev_orgs
      title: slas-assign-request
      type: object
    slas-assign-response:
      properties:
        results:
          description: The list of outcomes for each Rev organization.
          items:
            $ref: '#/components/schemas/sla-assign-result'
          type: array
      required:
      - results
      title: slas-assign-response
      type: object
      x-go-name: SlasAssignResponseBody
    slas-create-request:
      properties:
        account_selector:
          $ref: '#/components/schemas/accounts-filters'
        applies_to:
          description: The object types this SLA can apply to.
          items:
            $ref: '#/components/schemas/sla-applies-to'
          type: array
        description:
          description: Description of the purpose and capabilities of the SLA.
          type: string
        evaluation_period:
          $ref: '#/components/schemas/sla-evaluation-period'
        name:
          description: Human-readable name.
          type: string
        policies:
          description: |
            The policies encompassed by this SLA, ordered in decreasing
            priority.
          items:
            $ref: '#/components/schemas/set-sla-policy'
          type: array
        sla_type:
          $ref: '#/components/schemas/sla-type'
      required:
      - name
      title: slas-create-request
      type: object
    slas-create-response:
      properties:
        sla:
          $ref: '#/components/schemas/sla'
      required:
      - sla
      title: slas-create-response
      type: object
      x-go-name: SlasCreateResponseBody
    slas-filter-applies-to-operator-type:
      enum:
      - all
      - any
      type: string
    slas-get-request:
      properties:
        id:
          description: The ID of the SLA to get.
          type: string
      required:
      - id
      title: slas-get-request
      type: object
    slas-get-response:
      properties:
        sla:
          $ref: '#/components/schemas/sla'
      required:
      - sla
      title: slas-get-response
      type: object
      x-go-name: SlasGetResponseBody
    slas-list-request:
      properties:
        applies_to:
          description: The object types the SLA applies to.
          items:
            $ref: '#/components/schemas/sla-applies-to'
          type: array
        applies_to_op:
          $ref: '#/components/schemas/slas-filter-applies-to-operator-type'
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of SLAs to return. The default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        sla_type:
          description: The SLA types the filter matches.
          items:
            $ref: '#/components/schemas/sla-type'
          type: array
        status:
          description: The SLA statuses the filter matches.
          items:
            $ref: '#/components/schemas/sla-status'
          type: array
      title: slas-list-request
      type: object
    slas-list-response:
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        slas:
          description: The list of SLAs.
          items:
            $ref: '#/components/schemas/sla'
          type: array
      required:
      - slas
      title: slas-list-response
      type: object
      x-go-name: SlasListResponseBody
    slas-transition-request:
      properties:
        id:
          description: The updated SLA.
          type: string
        status:
          $ref: '#/components/schemas/sla-status'
      required:
      - id
      - status
      title: slas-transition-request
      type: object
    slas-transition-response:
      properties:
        sla:
          $ref: '#/components/schemas/sla'
      required:
      - sla
      title: slas-transition-response
      type: object
      x-go-name: SlasTransitionResponseBody
    slas-update-request:
      properties:
        account_selector:
          $ref: '#/components/schemas/accounts-filters'
        description:
          description: Description of the purpose and capabilities of the SLA.
          type: string
        evaluation_period:
          $ref: '#/components/schemas/sla-evaluation-period'
        id:
          description: The SLA's ID.
          type: string
        name:
          description: Human-readable name.
          type: string
        policies:
          description: |
            The policies encompassed by this SLA, ordered in decreasing
            priority, the whole array will be overwritten by the contents of
            this array.
          items:
            $ref: '#/components/schemas/set-sla-policy'
          type: array
      required:
      - id
      title: slas-update-request
      type: object
    slas-update-response:
      properties:
        sla:
          $ref: '#/components/schemas/sla'
      required:
      - sla
      title: slas-update-response
      type: object
      x-go-name: SlasUpdateResponseBody
    snap-in-version-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: snap-in-version-summary
    snap-ins-resources-request:
      properties:
        id:
          description: The ID of the snap-in to get resources for.
          type: string
        user:
          description: The ID of the user to get resources for.
          type: string
      required:
      - id
      - user
      title: snap-ins-resources-request
      type: object
    snap-ins-resources-response:
      properties:
        event_sources:
          additionalProperties:
            type: string
          description: The event sources for the snap-in.
          type: object
        inputs:
          description: The inputs for the snap-in.
          type: object
        keyrings:
          additionalProperties:
            $ref: '#/components/schemas/snap-ins-resources-response-keyring-data'
          description: Map of keyring names and its data.
          type: object
        snap_in_version:
          $ref: '#/components/schemas/snap-in-version-summary'
      required:
      - snap_in_version
      title: snap-ins-resources-response
      type: object
      x-go-name: SnapInsResourcesResponseBody
    snap-ins-resources-response-keyring-data:
      properties:
        id:
          description: The ID of the keyring.
          type: string
        secret:
          description: |
            The secret value of the keyring. This must be handled with caution.
          type: string
      required:
      - id
      - secret
      title: snap-ins-resources-response-keyring-data
      type: object
    snap-widget:
      discriminator:
        mapping:
          email_preview: '#/components/schemas/email-preview-widget'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/email-preview-widget'
      properties:
        type:
          $ref: '#/components/schemas/snap-widget-type'
      required:
      - type
      title: snap-widget
      type: object
    snap-widget-base:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          name:
            description: A human readable name for the snap widget.
            type: string
          namespace:
            $ref: '#/components/schemas/snap-widget-namespace'
          status:
            $ref: '#/components/schemas/snap-widget-status'
        required:
        - name
        - status
        type: object
      title: snap-widget-base
    snap-widget-namespace:
      description: Logical grouping of snap widgets. Useful for filtering.
      enum:
      - comment_suggestion_replies
      - email_preview
      - link_preview
      - plug_nudge
      type: string
    snap-widget-status:
      description: The status of the snap widget.
      enum:
      - draft
      - published
      type: string
    snap-widget-type:
      enum:
      - email_preview
      type: string
    snap-widgets-create-request:
      discriminator:
        mapping:
          email_preview: '#/components/schemas/create-email-preview-widget'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/create-email-preview-widget'
      properties:
        name:
          description: A human readable name for the snap widget.
          type: string
        namespace:
          $ref: '#/components/schemas/snap-widget-namespace'
        status:
          $ref: '#/components/schemas/snap-widget-status'
        type:
          $ref: '#/components/schemas/snap-widgets-create-request-type'
      required:
      - name
      - type
      title: snap-widgets-create-request
      type: object
    snap-widgets-create-request-type:
      enum:
      - email_preview
      type: string
    snap-widgets-create-response:
      properties:
        snap_widget:
          $ref: '#/components/schemas/snap-widget'
      required:
      - snap_widget
      title: snap-widgets-create-response
      type: object
      x-go-name: SnapWidgetsCreateResponseBody
    stage-diagram-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: stage-diagram-summary
    stage-filter:
      description: The filter for stages.
      properties:
        name:
          description: Filters for records in the provided stage(s) by name.
          items:
            type: string
          type: array
      title: stage-filter
      type: object
    stage-init:
      description: Sets an object's initial stage.
      properties:
        name:
          description: The name of the stage.
          type: string
      title: stage-init
      type: object
    stage-update:
      description: Updates an object's stage.
      properties:
        name:
          description: |
            The updated name of the stage, otherwise unchanged if not set.
          type: string
      title: stage-update
      type: object
    stage-validation-option-for-create:
      description: Type of stage validation options when creating an object.
      enum:
      - allow_non_start
      type: string
    stage-validation-option-for-update:
      description: |
        Type of state validation options when updating the stage of an object.
      enum:
      - allow_invalid_transition
      type: string
    staged-info-filter:
      properties:
        is_staged:
          description: Filters for issues that are staged.
          type: boolean
      title: staged-info-filter
      type: object
    stock-field-override:
      additionalProperties: false
      description: A stock field override.
      title: stock-field-override
      type: object
    stock-schema-fragment:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          description:
            description: Description of the schema.
            type: string
          fields:
            description: List of all fields in this schema.
            items:
              $ref: '#/components/schemas/schema-field-descriptor'
            type: array
          leaf_type:
            description: Leaf type this fragment applies to.
            type: string
          new_fragment_ref:
            $ref: '#/components/schemas/atom-summary'
          old_fragment_ref:
            $ref: '#/components/schemas/atom-summary'
          title:
            description: Title of the schema.
            type: string
        required:
        - fields
        type: object
      title: stock-schema-fragment
    stock-schema-fragments-get-request:
      properties:
        id:
          description: The ID of the stock schema fragment.
          type: string
        leaf_type:
          description: The leaf type this fragment applies to.
          type: string
      title: stock-schema-fragments-get-request
      type: object
    stock-schema-fragments-get-response:
      properties:
        fragment:
          $ref: '#/components/schemas/stock-schema-fragment'
      required:
      - fragment
      title: stock-schema-fragments-get-response
      type: object
      x-go-name: StockSchemaFragmentsGetResponseBody
    stock-schema-fragments-list-request:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        filter_preset:
          $ref: '#/components/schemas/stock-schema-fragments-list-request-filter-preset'
        leaf_type:
          description: The list of leaf types.
          items:
            type: string
          type: array
        limit:
          description: The maximum number of items.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        prune:
          description: |
            List of fields which are not required in the payload and can be
            pruned away.
          items:
            $ref: '#/components/schemas/stock-schema-fragments-list-request-prune'
          type: array
        sort_by:
          description: |
            The list of fields to sort the items by and how to sort them.
          items:
            type: string
          type: array
      title: stock-schema-fragments-list-request
      type: object
    stock-schema-fragments-list-request-filter-preset:
      enum:
      - customizable_types_preset
      - no_preset
      type: string
    stock-schema-fragments-list-request-prune:
      enum:
      - composite_schemas
      - fields
      type: string
    stock-schema-fragments-list-response:
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        result:
          description: The stock schema fragments.
          items:
            $ref: '#/components/schemas/stock-schema-fragment'
          type: array
      required:
      - result
      title: stock-schema-fragments-list-response
      type: object
      x-go-name: StockSchemaFragmentsListResponseBody
    subtype:
      properties:
        display_name:
          description: Display name of the subtype.
          type: string
        fragment_id:
          description: DON of the custom type fragment this subtype belongs to.
          type: string
        leaf_type:
          description: Leaf type for the subtype.
          type: string
        value:
          description: Value of the subtype.
          type: string
      required:
      - fragment_id
      - leaf_type
      - value
      title: subtype
      type: object
    subtypes-list-request:
      properties:
        leaf_type:
          deprecated: true
          description: Leaf type for which subtypes are required.
          type: string
        leaf_types:
          description: List of leaf types for which subtypes are required.
          items:
            type: string
          type: array
      title: subtypes-list-request
      type: object
    subtypes-list-response:
      properties:
        subtypes:
          description: List of subtypes.
          items:
            $ref: '#/components/schemas/subtype'
          type: array
      required:
      - subtypes
      title: subtypes-list-response
      type: object
      x-go-name: SubtypesListResponseBody
    survey:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          description:
            description: Description of the survey.
            type: string
          name:
            description: |
              Survey name associated with schema. This name would be unique per
              dev org.
            type: string
          schema:
            description: List of all fields in the schema.
            items:
              $ref: '#/components/schemas/schema-field-descriptor'
            type: array
        required:
        - schema
        type: object
      title: survey
    survey-aggregation-filter:
      additionalProperties: false
      description: The filter for survey aggregation.
      title: survey-aggregation-filter
      type: object
    survey-response:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          dispatch_id:
            description: The unique ID associated with the dispatched survey.
            type: string
          object:
            description: The ID of the object for which survey is taken.
            type: string
          recipient:
            $ref: '#/components/schemas/user-summary'
          response:
            description: Response for the survey.
            type: object
          survey:
            description: The ID of the survey for which response is taken.
            type: string
        type: object
      title: survey-response
      x-go-name: SurveyResponseBody
    surveys-create-request:
      properties:
        description:
          description: Description about the survey.
          type: string
        name:
          description: The survey's name.
          type: string
        schema:
          description: Schema for the survey.
          items:
            $ref: '#/components/schemas/field-descriptor'
          type: array
      required:
      - name
      - schema
      title: surveys-create-request
      type: object
    surveys-create-response:
      properties:
        survey:
          $ref: '#/components/schemas/survey'
      required:
      - survey
      title: surveys-create-response
      type: object
      x-go-name: SurveysCreateResponseBody
    surveys-delete-request:
      properties:
        id:
          description: ID of the survey being deleted.
          type: string
      required:
      - id
      title: surveys-delete-request
      type: object
    surveys-delete-response:
      additionalProperties: false
      title: surveys-delete-response
      type: object
      x-go-name: SurveysDeleteResponseBody
    surveys-list-request:
      properties:
        created_by:
          description: Filters for surveys created by any of these users.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-filter'
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of surveys to return. If not set, then the
            default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-filter'
        name:
          description: Filters for surveys by name(s).
          items:
            type: string
          type: array
        sort_by:
          description: |
            Fields to sort the surveys by and the direction to sort them.
          items:
            type: string
          type: array
      title: surveys-list-request
      type: object
    surveys-list-response:
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        surveys:
          description: The list of the surveys.
          items:
            $ref: '#/components/schemas/survey'
          type: array
      required:
      - surveys
      title: surveys-list-response
      type: object
      x-go-name: SurveysListResponseBody
    surveys-responses-list-request:
      properties:
        created_by:
          description: |
            Filters for survey responses created by any of these users.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-filter'
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of survey responses to return. If not set, then
            the default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-filter'
        objects:
          description: Filters for survey responses created for the objects.
          example:
          - ACC-12345
          items:
            type: string
          type: array
        sort_by:
          description: |
            Fields to sort the survey responses by and the direction to sort
            them.
          items:
            type: string
          type: array
        stages:
          description: Filters for survey response stages.
          items:
            format: int64
            type: integer
          type: array
        surveys:
          description: |
            Filters for survey responses for the provided survey IDs.
          items:
            type: string
          type: array
      title: surveys-responses-list-request
      type: object
    surveys-responses-list-response:
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        survey_responses:
          description: The list of the survey responses.
          items:
            $ref: '#/components/schemas/survey-response'
          type: array
      required:
      - survey_responses
      title: surveys-responses-list-response
      type: object
      x-go-name: SurveysResponsesListResponseBody
    surveys-send-request:
      properties:
        email:
          $ref: '#/components/schemas/surveys-send-request-email'
      required:
      - email
      title: surveys-send-request
      type: object
    surveys-send-request-email:
      properties:
        body:
          description: Message body for a survey email.
          type: string
        recipients:
          description: Recipients list for a survey email.
          items:
            type: string
          type: array
        sender:
          description: Sender email address from which an email is sent.
          type: string
        subject:
          description: Subject for an email where survey is sent.
          type: string
      required:
      - body
      - recipients
      - sender
      - subject
      title: surveys-send-request-email
      type: object
    surveys-send-response:
      additionalProperties: false
      title: surveys-send-response
      type: object
      x-go-name: SurveysSendResponseBody
    surveys-submit-request:
      properties:
        dispatch_id:
          description: The unique ID associated with the dispatched survey.
          type: string
        dispatched_channels:
          description: |
            The ordinals of the source channels on which the survey is sent.
          items:
            format: int64
            type: integer
          type: array
        object:
          description: |
            The ID of the object this survey is on (e.g. ticket, conversation,
            etc).
          example: ACC-12345
          type: string
        recipient:
          description: |
            The unique ID associated with the recipient of the survey.
          example: DEVU-12345
          type: string
        response:
          description: Survey response submitted for the object.
          type: object
        response_score:
          description: |
            The response score for the survey. Only applicable for CSAT and
            NPS.
          format: int32
          type: integer
        source_channel:
          description: |
            The source channel from which survey response is submitted.
          type: string
        stage:
          description: The stage ordinal of the survey response object.
          format: int64
          type: integer
        survey:
          description: The ID of the survey to submit the response to.
          type: string
      required:
      - object
      - survey
      title: surveys-submit-request
      type: object
    surveys-submit-response:
      additionalProperties: false
      title: surveys-submit-response
      type: object
      x-go-name: SurveysSubmitResponseBody
    sync-metadata-filter:
      properties:
        last_sync_in:
          $ref: '#/components/schemas/sync-metadata-filter-sync-in-filter'
        last_sync_out:
          $ref: '#/components/schemas/sync-metadata-filter-sync-out-filter'
        origin_system:
          description: |
            Filters for issues synced from this specific origin system.
          items:
            type: string
          type: array
      title: sync-metadata-filter
      type: object
    sync-metadata-filter-sync-in-filter:
      properties:
        status:
          description: Filters for works with selected sync statuses.
          items:
            $ref: '#/components/schemas/sync-metadata-filter-sync-in-filter-status'
          type: array
        sync_date:
          $ref: '#/components/schemas/date-filter'
        sync_unit:
          description: Filters for works modified with selected sync units.
          items:
            type: string
          type: array
      title: sync-metadata-filter-sync-in-filter
      type: object
    sync-metadata-filter-sync-in-filter-status:
      enum:
      - failed
      - modified
      - staged
      - succeeded
      type: string
    sync-metadata-filter-sync-out-filter:
      properties:
        status:
          description: Filters for works with selected sync statuses.
          items:
            $ref: '#/components/schemas/sync-metadata-filter-sync-out-filter-status'
          type: array
        sync_date:
          $ref: '#/components/schemas/date-filter'
        sync_unit:
          description: Filters for works modified with selected sync units.
          items:
            type: string
          type: array
      title: sync-metadata-filter-sync-out-filter
      type: object
    sync-metadata-filter-sync-out-filter-status:
      enum:
      - failed
      - succeeded
      type: string
    sys-user:
      allOf:
      - $ref: '#/components/schemas/user-base'
      title: sys-user
    sys-user-summary:
      allOf:
      - $ref: '#/components/schemas/user-base-summary'
      title: sys-user-summary
    sys-users-list-request:
      description: A request to get the list of system user's information.
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of system users to return. Value can range from
            '1' to '100', with a default of '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        sort_by:
          description: |
            Fields to sort the system users by and the direction to sort them.
          items:
            type: string
          type: array
      title: sys-users-list-request
      type: object
    sys-users-list-response:
      description: The response to listing the system users.
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        sys_users:
          description: The list of system users.
          items:
            $ref: '#/components/schemas/sys-user'
          type: array
      required:
      - sys_users
      title: sys-users-list-response
      type: object
      x-go-name: SysUsersListResponseBody
    sys-users-update-request:
      description: Request to update information of the system user.
      properties:
        display_name:
          description: Updated display name for the system user.
          type: string
        display_picture:
          description: Artifact ID of the system user's new display picture.
          example: ARTIFACT-12345
          nullable: true
          type: string
        full_name:
          description: Updated full name for the system user.
          type: string
        id:
          description: The ID of system user to update.
          type: string
      required:
      - id
      title: sys-users-update-request
      type: object
    sys-users-update-response:
      description: Updated Sys user object.
      properties:
        sys_user:
          $ref: '#/components/schemas/sys-user'
      required:
      - sys_user
      title: sys-users-update-response
      type: object
      x-go-name: SysUsersUpdateResponseBody
    tag:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          allowed_values:
            description: |
              The allowed values for the tag, where a value is provided when a
              tag is associated with an object. If empty, then no value should be
              provided when the association is made.
            items:
              type: string
            type: array
          description:
            description: |
              An informative description for the tag that should provide context
              on the tag's purpose and usage.
            type: string
          name:
            description: |
              The name of the tag, which denotes the logical concept by which all
              tagged objects will be associated. The name is guaranteed to be
              unique.
            type: string
        required:
        - name
        type: object
      title: tag
    tag-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          tag:
            $ref: '#/components/schemas/tag-summary'
        required:
        - tag
        type: object
      title: tag-search-summary
    tag-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          name:
            description: |
              The name of the tag, which denotes the logical concept by which all
              tagged objects will be associated. The name is guaranteed to be
              unique.
            type: string
        required:
        - name
        type: object
      title: tag-summary
    tag-with-value:
      properties:
        tag:
          $ref: '#/components/schemas/tag-summary'
        value:
          description: The value for the object's association with the tag.
          type: string
      required:
      - tag
      title: tag-with-value
      type: object
    tag-with-value-filter:
      properties:
        id:
          description: The ID of the tag.
          example: TAG-12345
          type: string
        value:
          description: |
            The value for the object's association with the tag. If specified,
            the value must be one that's specified in the tag's allowed values.
          type: string
      title: tag-with-value-filter
      type: object
    task:
      allOf:
      - $ref: '#/components/schemas/work-base'
      title: task
    task-priority:
      description: Priority of the work based upon impact and criticality.
      enum:
      - p0
      - p1
      - p2
      - p3
      type: string
    task-summary:
      allOf:
      - $ref: '#/components/schemas/work-base-summary'
      title: task-summary
    tenant-fragment:
      allOf:
      - $ref: '#/components/schemas/custom-schema-fragment-base'
      title: tenant-fragment
    tenant-fragment-summary:
      allOf:
      - $ref: '#/components/schemas/custom-schema-fragment-base-summary'
      title: tenant-fragment-summary
    ticket:
      allOf:
      - $ref: '#/components/schemas/work-base'
      - properties:
          channels:
            description: Channels of the ticket.
            items:
              $ref: '#/components/schemas/ticket-channels'
            type: array
          group:
            $ref: '#/components/schemas/group-summary'
          rev_org:
            $ref: '#/components/schemas/org-summary'
          severity:
            $ref: '#/components/schemas/ticket-severity'
          sla_tracker:
            $ref: '#/components/schemas/sla-tracker-summary'
          source_channel:
            description: Source channel of the ticket.
            type: string
        type: object
      title: ticket
    ticket-channels:
      description: Channels of the ticket.
      enum:
      - email
      - plug
      - slack
      - twilio
      type: string
    ticket-severity:
      description: Severity of the ticket.
      enum:
      - blocker
      - high
      - low
      - medium
      type: string
    ticket-summary:
      allOf:
      - $ref: '#/components/schemas/work-base-summary'
      - properties:
          rev_org:
            $ref: '#/components/schemas/org-summary'
          severity:
            $ref: '#/components/schemas/ticket-severity'
        type: object
      title: ticket-summary
    timeline-comment:
      allOf:
      - $ref: '#/components/schemas/timeline-entry-base'
      - properties:
          artifacts:
            description: The artifacts for the comment.
            items:
              $ref: '#/components/schemas/artifact-summary'
            type: array
          body:
            description: |
              The comment's body. If the comment has been deleted, then no body
              will appear in the response.
            type: string
          body_type:
            $ref: '#/components/schemas/timeline-comment-body-type'
          snap_kit_body:
            $ref: '#/components/schemas/timeline-snap-kit-body'
          snap_widget_body:
            description: The snap widget body of the comment.
            items:
              $ref: '#/components/schemas/snap-widget'
            type: array
        type: object
      title: timeline-comment
    timeline-comment-body-type:
      description: The type of the body to use for the comment.
      enum:
      - snap_kit
      - snap_widget
      - text
      type: string
    timeline-comment-summary:
      allOf:
      - $ref: '#/components/schemas/timeline-entry-base-summary'
      title: timeline-comment-summary
    timeline-entries-collection:
      description: Describes collections of timeline entries.
      enum:
      - discussions
      - events
      type: string
    timeline-entries-create-request:
      description: The request to create a timeline entry for an object.
      discriminator:
        mapping:
          timeline_comment: '#/components/schemas/timeline-entries-create-request-timeline-comment'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/timeline-entries-create-request-timeline-comment'
      properties:
        collections:
          description: |
            The collection(s) that the entry belongs to, otherwise if not
            provided, then the entry's default collection is used.
          items:
            $ref: '#/components/schemas/timeline-entries-collection'
          type: array
        expires_at:
          description: |
            If set, then the entry is ephemeral and will be deleted after the
            provided time. The minimum value should be at least a minute more
            than the current timestamp.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
        labels:
          description: The labels to be associated with the entry.
          items:
            type: string
          maxItems: 16
          maxLength: 64
          minLength: 1
          type: array
        object:
          description: The ID of the object to create the timeline entry for.
          example: PROD-12345
          type: string
        private_to:
          description: |
            If the visibility of the entry is private, this specifies the users
            that the entry is private to. Note the creator is always implicitly
            included in this list.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        type:
          $ref: '#/components/schemas/timeline-entries-create-request-type'
        visibility:
          $ref: '#/components/schemas/timeline-entry-visibility'
      required:
      - object
      - type
      title: timeline-entries-create-request
      type: object
    timeline-entries-create-request-timeline-comment:
      properties:
        artifacts:
          description: The IDs of the artifacts attached to the comment.
          example:
          - ARTIFACT-12345
          items:
            type: string
          maxItems: 50
          type: array
        body:
          description: The comment's body.
          type: string
        body_type:
          $ref: '#/components/schemas/timeline-comment-body-type'
        external_ref:
          description: |
            The external reference for the comment. This must be unique within
            the object's timeline.
          type: string
        link_previews:
          description: |
            The IDs of the previews of the links posted in the comment.
          example:
          - don:core:<partition>:devo/<dev-org-id>:snap_widget/<snap-widget-id>
          items:
            type: string
          type: array
        snap_kit_body:
          $ref: '#/components/schemas/timeline-snap-kit-body'
        snap_widget_body:
          description: The snap widget body of the comment.
          example:
          - don:core:<partition>:devo/<dev-org-id>:snap_widget/<snap-widget-id>
          items:
            type: string
          type: array
      title: timeline-entries-create-request-timeline-comment
      type: object
    timeline-entries-create-request-type:
      enum:
      - timeline_comment
      type: string
    timeline-entries-create-response:
      description: The response to creating a timeline entry for an object.
      properties:
        timeline_entry:
          $ref: '#/components/schemas/timeline-entry'
      required:
      - timeline_entry
      title: timeline-entries-create-response
      type: object
      x-go-name: TimelineEntriesCreateResponseBody
    timeline-entries-list-request:
      description: The request to list timeline entries for an object.
      properties:
        collections:
          description: |
            The collection(s) to list entries from, otherwise if not provided,
            all entries are returned.
          items:
            $ref: '#/components/schemas/timeline-entries-collection'
          type: array
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        labels:
          description: |
            Filters for entries containing at least one of the provided labels,
            otherwise if no labels are provided, then no label filtering is
            done.
          items:
            type: string
          maxLength: 64
          minLength: 1
          type: array
        limit:
          description: |
            The maximum number of entries to return. If not set, then this
            defaults to `50`.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        object:
          description: The ID of the object to list timeline entries for.
          example: PROD-12345
          type: string
        visibility:
          description: |
            The visibility of the timeline entries to filter for. Note this is
            a strict filter, such that only entries with the exact visibilities
            specified will be returned.
          items:
            $ref: '#/components/schemas/timeline-entry-visibility'
          type: array
      required:
      - object
      title: timeline-entries-list-request
      type: object
    timeline-entries-list-response:
      description: The response to listing timeline entries for an object.
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        timeline_entries:
          description: The timeline entries for the object.
          items:
            $ref: '#/components/schemas/timeline-entry'
          type: array
      required:
      - timeline_entries
      title: timeline-entries-list-response
      type: object
      x-go-name: TimelineEntriesListResponseBody
    timeline-entries-update-request:
      description: The request to update a timeline entry.
      discriminator:
        mapping:
          timeline_comment: '#/components/schemas/timeline-entries-update-request-timeline-comment'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/timeline-entries-update-request-timeline-comment'
      properties:
        id:
          description: The ID of the timeline entry to update.
          example: don:core:<partition>:devo/<dev-org-id>:ticket/123:timeline_event/<timeline-event-id>
          type: string
        type:
          $ref: '#/components/schemas/timeline-entries-update-request-type'
      required:
      - id
      - type
      title: timeline-entries-update-request
      type: object
    timeline-entries-update-request-timeline-comment:
      properties:
        artifacts:
          $ref: '#/components/schemas/timeline-entries-update-request-timeline-comment-artifacts'
        body:
          description: The updated comment's body.
          type: string
        body_type:
          $ref: '#/components/schemas/timeline-comment-body-type'
        link_previews:
          $ref: '#/components/schemas/timeline-entries-update-request-timeline-comment-link-previews'
        snap_kit_body:
          $ref: '#/components/schemas/timeline-snap-kit-body'
      title: timeline-entries-update-request-timeline-comment
      type: object
    timeline-entries-update-request-timeline-comment-artifacts:
      properties:
        add:
          description: |
            Adds the provided artifacts to the comment. An artifact cannot be
            added more than once, i.e. nothing is done if the artifact is
            already attached. Mutually exclusive with `set`.
          example:
          - ARTIFACT-12345
          items:
            type: string
          maxItems: 10
          type: array
        remove:
          description: |
            Removes the provided artifacts from the comment. If an artifact is
            not present, then it's ignored. Mututally exclusive with `set`.
          example:
          - ARTIFACT-12345
          items:
            type: string
          maxItems: 10
          type: array
        set:
          description: Sets the field to the provided artifacts.
          example:
          - ARTIFACT-12345
          items:
            type: string
          maxItems: 50
          type: array
      title: timeline-entries-update-request-timeline-comment-artifacts
      type: object
    timeline-entries-update-request-timeline-comment-link-previews:
      properties:
        add:
          description: |
            Adds the provided link previews to the comment. A link preview
            cannot be added more than once, i.e. nothing is done if the link
            preview is already present. Mutually exclusive with `set`.
          example:
          - don:core:<partition>:devo/<dev-org-id>:snap_widget/<snap-widget-id>
          items:
            type: string
          type: array
        remove:
          description: |
            Removes the provided link previews from the comment. If a link
            preview is not present, then it's ignored. Mutually exclusive with
            `set`.
          example:
          - don:core:<partition>:devo/<dev-org-id>:snap_widget/<snap-widget-id>
          items:
            type: string
          type: array
        set:
          description: Set the link previews to the provided IDs.
          example:
          - don:core:<partition>:devo/<dev-org-id>:snap_widget/<snap-widget-id>
          items:
            type: string
          type: array
      title: timeline-entries-update-request-timeline-comment-link-previews
      type: object
    timeline-entries-update-request-type:
      enum:
      - timeline_comment
      type: string
    timeline-entries-update-response:
      description: The response to updating a timeline entry.
      properties:
        timeline_entry:
          $ref: '#/components/schemas/timeline-entry'
      required:
      - timeline_entry
      title: timeline-entries-update-response
      type: object
      x-go-name: TimelineEntriesUpdateResponseBody
    timeline-entry:
      discriminator:
        mapping:
          timeline_comment: '#/components/schemas/timeline-comment'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/timeline-comment'
      properties:
        type:
          $ref: '#/components/schemas/timeline-entry-type'
      required:
      - type
      title: timeline-entry
      type: object
    timeline-entry-base:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          external_ref:
            description: |
              An external reference that's associated with the Timeline entry
              that's guaranteed to be unique among its siblings.
            type: string
          labels:
            description: Labels that are associated with the Timeline entry.
            items:
              type: string
            type: array
          object:
            description: The object that the Timeline entry belongs to.
            type: string
          object_display_id:
            description: |
              The display ID of the object that the Timeline entry belongs to.
            type: string
          object_type:
            $ref: '#/components/schemas/timeline-entry-object-type'
          reactions:
            description: The reactions to the entry.
            items:
              $ref: '#/components/schemas/timeline-reaction'
            type: array
          thread:
            $ref: '#/components/schemas/timeline-thread'
          visibility:
            $ref: '#/components/schemas/timeline-entry-visibility'
        required:
        - object
        - object_display_id
        type: object
      title: timeline-entry-base
    timeline-entry-base-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: timeline-entry-base-summary
    timeline-entry-object-type:
      description: The type of object that the Timeline entry belongs to.
      enum:
      - account
      - capability
      - conversation
      - engagement
      - enhancement
      - feature
      - issue
      - meeting
      - opportunity
      - product
      - rev_org
      - rev_user
      - task
      - ticket
      - timeline_comment
      type: string
    timeline-entry-type:
      enum:
      - timeline_comment
      type: string
    timeline-entry-visibility:
      description: |
        The visibility of the entry. If 'private', then the entry is only
        visible to the creator, 'internal' is visible with the Dev
        organization, 'external' is visible to the Dev organzation and Rev
        users, and 'public' is visible to all. If not set, then the default
        visibility is 'external'.
      enum:
      - external
      - internal
      - private
      - public
      type: string
    timeline-reaction:
      description: Reaction.
      properties:
        emoji:
          description: The reaction emoji's unicode codepoint, e.g. "1f44d".
          type: string
        reacted:
          description: Whether the requesting user reacted.
          type: boolean
        total_users:
          description: The total number of users with this reaction.
          format: int32
          type: integer
      title: timeline-reaction
      type: object
    timeline-snap-kit-body:
      description: Snap Kit Body of the comment.
      properties:
        body:
          description: The JSON body of the SnapKit.
          type: object
        snap_in_action_name:
          description: |
            The name of an action defined in the SnapIn. The combination of
            snap_in_id and snap_in_action_name uniquely identifies the
            interaction object which is to be called when actions on a snapkit
            element is taken.
          type: string
        snap_in_id:
          description: ID of the snap-in which created the SnapKit.
          type: string
      title: timeline-snap-kit-body
      type: object
    timeline-thread:
      description: Thread.
      properties:
        total_replies:
          description: The total number of replies in the thread.
          format: int32
          type: integer
      title: timeline-thread
      type: object
    track-event:
      properties:
        client_context:
          $ref: '#/components/schemas/client-context'
        event_id:
          description: Unique ID for the event.
          type: string
        event_time:
          description: The timestamp at which the event occurred.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
        name:
          description: Name of the event.
          type: string
        payload:
          description: Payload of the event
          type: object
      required:
      - name
      - payload
      title: track-event
      type: object
    track-events-publish-request:
      properties:
        events_list:
          items:
            $ref: '#/components/schemas/track-event'
          type: array
      required:
      - events_list
      title: track-events-publish-request
      type: object
    track-events-publish-response:
      additionalProperties: false
      title: track-events-publish-response
      type: object
      x-go-name: TrackEventsPublishResponseBody
    unit:
      description: |
        Unit encapsulates the name of the unit and the type of the unit. For
        example, '#Number of API calls' where name is 'number_of_api_calls' and
        type is 'number'.
      properties:
        name:
          description: |
            This represents human readable unit name of the UOM For example,
            number of API calls.
          type: string
        type:
          $ref: '#/components/schemas/unit-type'
      required:
      - name
      - type
      title: unit
      type: object
    unit-type:
      description: |
        This defines the UOM unit type. For example, for 'number of video
        calls', unit type will be a number.
      enum:
      - boolean
      - number
      type: string
    unlink-rev-user-from-rev-org-request:
      description: Request to unlink/remove a Rev user from a Rev organization.
      properties:
        id:
          description: The ID of the Rev user.
          type: string
        rev_org:
          description: |
            The ID of the Rev organization to unlink the Rev user from.
          example: REV-AbCdEfGh
          type: string
        rev_org_don:
          deprecated: true
          description: |
            The don of the rev org to unlink the rev user from. This is
            deprecated, use rev_org instead.
          example: REV-AbCdEfGh
          type: string
        user_don:
          deprecated: true
          description: |
            The don of the rev user to unlink. This is deprecated, use id
            instead.
          type: string
      title: unlink-rev-user-from-rev-org-request
      type: object
    unlink-rev-user-from-rev-org-response:
      description: |
        Response for unlinking/removing a Rev user from a Rev organization.
      properties:
        rev_user:
          $ref: '#/components/schemas/rev-user'
      required:
      - rev_user
      title: unlink-rev-user-from-rev-org-response
      type: object
      x-go-name: UnlinkRevUserFromRevOrgResponseBody
    uom:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          aggregation_details:
            $ref: '#/components/schemas/aggregation-detail'
          description:
            description: Description of the UOM.
            type: string
          dimensions:
            description: |
              The list of dimensions that can be emitted along with the metering
              data.
            items:
              type: string
            type: array
          is_enabled:
            description: |
              If set to true, then the UOM can be configured as part of
              entitlements in skus and metering data only for the enabled uoms
              will be passed through the metering pipeline.
            type: boolean
          metric_name:
            description: Human readable metric name of the UOM.
            type: string
          metric_scope:
            $ref: '#/components/schemas/uom-metric-scope'
          name:
            description: Human readable name of the UOM.
            type: string
          part:
            $ref: '#/components/schemas/part-summary'
          product:
            $ref: '#/components/schemas/part-summary'
          unit:
            $ref: '#/components/schemas/unit'
        required:
        - aggregation_details
        - is_enabled
        - metric_name
        - metric_scope
        - name
        - product
        - unit
        type: object
      title: uom
    uom-metric-scope:
      description: |
        The granularity at which the metrics ingestion data is to be emitted
        for the UOM.
      enum:
      - org
      - user
      type: string
    uoms-count-request:
      properties:
        aggregation_types:
          description: List of aggregation types for filtering list of UOMs.
          items:
            $ref: '#/components/schemas/aggregation-detail-aggregation-type'
          type: array
        ids:
          description: |
            List of Unit of Measurement (UOM) DONs to be used in filtering
            complete list of UOMs defined in a Dev Org.
          items:
            type: string
          type: array
        metric_names:
          description: List of metric names for filtering list of UOMs.
          items:
            type: string
          type: array
        part_ids:
          description: List of part IDs for filtering list of UOMs.
          example:
          - PROD-12345
          items:
            type: string
          type: array
        product_ids:
          description: List of product IDs for filtering list of UOMs.
          example:
          - PROD-12345
          items:
            type: string
          type: array
        unit_types:
          description: List of unit types for filtering list of UOMs.
          items:
            $ref: '#/components/schemas/unit-type'
          type: array
      title: uoms-count-request
      type: object
    uoms-count-response:
      properties:
        count:
          description: Count of Unit of Measurements matching the filter.
          format: int32
          type: integer
      required:
      - count
      title: uoms-count-response
      type: object
      x-go-name: UomsCountResponseBody
    uoms-create-request:
      properties:
        aggregation_detail:
          $ref: '#/components/schemas/aggregation-detail'
        description:
          description: Description of the Unit of Measurement (UOM).
          type: string
        dimensions:
          description: |
            The list of dimensions that can be emitted as part of metrics data.
            Dimensions consist of list of key-value pairs. For example, if the
            UOM is 'number_of_api_calls', then dimensions can be ['api_name',
            'api_version'].Dimension keys can only contain alphanumeric
            characters (A-Z, a-z, and 0-9) and underscores (_). Dimension keys
            cannot start with a number and is case-insensitive.Dimension keys
            must be unique and it is not allowed to have more than one value
            with the same key.Metrics data ingested in DevRev metrics format
            will be grouped and aggregated based on the dimensions specified in
            UOM.
          items:
            type: string
          maxItems: 12
          maxLength: 64
          minLength: 1
          type: array
        metric_name:
          description: |
            Name of the Unit of Measurement (UOM). Unit of Measurement is a
            unit of measure defined over a part offered by a Dev Org. A single
            part can have multiple unit of measurements defined over it. For
            example, a part can be 'video call', one UOM defined on this can be
            'number_of_calls', other UOM can be 'call_duration' etc.Metric name
            should be unique across all UOMs in a Dev Org.Metric name can only
            contain alphanumeric characters (A-Z, a-z, and 0-9) and underscores
            (_). Metric name cannot start with a number and is
            case-insensitive.
          maxLength: 64
          minLength: 1
          type: string
        name:
          description: Human readable name of the Unit of Measurement (UOM).
          type: string
        part_id:
          description: |
            The part ID for which the Unit of Measurement (UOM) is defined.
            When defined, ingested metrics data will be associated with part
            and product specified in UOM.
          example: PROD-12345
          type: string
        product_id:
          description: |
            The product ID for which the Unit of Measurement (UOM) is defined.
          example: PROD-12345
          type: string
        unit:
          $ref: '#/components/schemas/unit'
      required:
      - aggregation_detail
      - metric_name
      - name
      - product_id
      - unit
      title: uoms-create-request
      type: object
    uoms-create-response:
      properties:
        uom:
          $ref: '#/components/schemas/uom'
      required:
      - uom
      title: uoms-create-response
      type: object
      x-go-name: UomsCreateResponseBody
    uoms-delete-request:
      properties:
        id:
          description: The Unit of Measurement (UOM)'s DON.
          type: string
      required:
      - id
      title: uoms-delete-request
      type: object
    uoms-get-request:
      properties:
        id:
          description: The Unit of Measurement (UOM)'s DON.
          type: string
      required:
      - id
      title: uoms-get-request
      type: object
    uoms-get-response:
      properties:
        uom:
          $ref: '#/components/schemas/uom'
      required:
      - uom
      title: uoms-get-response
      type: object
      x-go-name: UomsGetResponseBody
    uoms-list-request:
      properties:
        aggregation_types:
          description: List of aggregation types for filtering list of UOMs.
          items:
            $ref: '#/components/schemas/aggregation-detail-aggregation-type'
          type: array
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        ids:
          description: |
            List of Unit of Measurement (UOM) DONs to be used in filtering
            complete list of UOMs defined in a Dev Org.
          items:
            type: string
          type: array
        limit:
          description: |
            The maximum number of UOMs to be returned in a response. The
            default is '50'.
          format: int32
          type: integer
        metric_names:
          description: List of metric names for filtering list of UOMs.
          items:
            type: string
          type: array
        mode:
          $ref: '#/components/schemas/list-mode'
        part_ids:
          description: List of part IDs for filtering list of UOMs.
          example:
          - PROD-12345
          items:
            type: string
          type: array
        product_ids:
          description: List of product IDs for filtering list of UOMs.
          example:
          - PROD-12345
          items:
            type: string
          type: array
        sort_by:
          description: |
            Fields to sort the Unit Of Measuments (UOMs) by and the direction
            to sort them.
          items:
            type: string
          type: array
        unit_types:
          description: List of unit types for filtering list of UOMs.
          items:
            $ref: '#/components/schemas/unit-type'
          type: array
      title: uoms-list-request
      type: object
    uoms-list-response:
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        uoms:
          description: The list of Unit of Measurement (UOM) objects.
          items:
            $ref: '#/components/schemas/uom'
          type: array
      required:
      - uoms
      title: uoms-list-response
      type: object
      x-go-name: UomsListResponseBody
    uoms-update-request:
      properties:
        aggregation_type:
          $ref: '#/components/schemas/aggregation-detail-aggregation-type'
        description:
          description: Description of the Unit of Measurement (UOM).
          type: string
        dimensions:
          $ref: '#/components/schemas/uoms-update-request-dimensions'
        id:
          description: The Unit of Measurement (UOM)'s DON.
          type: string
        is_enabled:
          description: |
            Flag used to enable/disable the Unit of Measurement (UOM). When
            disabled, any metricsrecords ingested against this UOM will be
            dropped.
          type: boolean
        name:
          description: Human readable name of the Unit of Measurement (UOM).
          type: string
        part_id:
          description: |
            The part ID such as feature or capability for which the Unit of
            Measurement (UOM) is defined.
          example: PROD-12345
          type: string
        product_id:
          description: |
            The product ID for which the Unit of Measurement (UOM) is defined.
          example: PROD-12345
          type: string
        unit:
          description: Unit name of the Unit of Measurement (UOM).
          type: string
      required:
      - id
      title: uoms-update-request
      type: object
    uoms-update-request-dimensions:
      properties:
        add:
          description: Adds the provided dimensions to the UOM.
          items:
            type: string
          type: array
        remove:
          description: Removes the provided dimensions from the UOM.
          items:
            type: string
          type: array
      title: uoms-update-request-dimensions
      type: object
    uoms-update-response:
      properties:
        uom:
          $ref: '#/components/schemas/uom'
      required:
      - uom
      title: uoms-update-response
      type: object
      x-go-name: UomsUpdateResponseBody
    user-base:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          display_name:
            description: |
              The user's display name. The name is non-unique and mutable.
            type: string
          display_picture:
            $ref: '#/components/schemas/artifact-summary'
          email:
            description: Email address of the user.
            type: string
          full_name:
            description: Full name of the user.
            type: string
          phone_numbers:
            description: Phone numbers of the user.
            items:
              type: string
            type: array
          state:
            $ref: '#/components/schemas/user-state'
        type: object
      title: user-base
    user-base-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          display_name:
            description: |
              The user's display name. The name is non-unique and mutable.
            type: string
          display_picture:
            $ref: '#/components/schemas/artifact-summary'
          email:
            description: Email address of the user.
            type: string
          full_name:
            description: Full name of the user.
            type: string
          state:
            $ref: '#/components/schemas/user-state'
        type: object
      title: user-base-summary
    user-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          user:
            $ref: '#/components/schemas/user-summary'
        required:
        - user
        type: object
      title: user-search-summary
    user-skill:
      description: Skill associated with the user.
      properties:
        name:
          description: Name of the skill.
          type: string
      title: user-skill
      type: object
    user-state:
      description: State of the user.
      enum:
      - active
      - deactivated
      - deleted
      - locked
      - shadow
      - unassigned
      type: string
    user-summary:
      discriminator:
        mapping:
          dev_user: '#/components/schemas/dev-user-summary'
          rev_user: '#/components/schemas/rev-user-summary'
          service_account: '#/components/schemas/service-account-summary'
          sys_user: '#/components/schemas/sys-user-summary'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/dev-user-summary'
      - $ref: '#/components/schemas/rev-user-summary'
      - $ref: '#/components/schemas/service-account-summary'
      - $ref: '#/components/schemas/sys-user-summary'
      properties:
        type:
          $ref: '#/components/schemas/user-type'
      required:
      - type
      title: user-summary
      type: object
    user-type:
      enum:
      - dev_user
      - rev_user
      - service_account
      - sys_user
      type: string
    vista-base-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          name:
            description: Name of the vista.
            type: string
        required:
        - name
        type: object
      title: vista-base-summary
    vista-group-item-summary:
      additionalProperties: false
      description: Vista group item.
      title: vista-group-item-summary
      type: object
    vista-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          vista:
            $ref: '#/components/schemas/vista-summary'
        required:
        - vista
        type: object
      title: vista-search-summary
    vista-summary:
      description: Represents a collection of DevRev objects.
      discriminator:
        mapping:
          curated: '#/components/schemas/curated-vista-summary'
          dynamic: '#/components/schemas/dynamic-vista-summary'
          grouped: '#/components/schemas/grouped-vista-summary'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/curated-vista-summary'
      - $ref: '#/components/schemas/dynamic-vista-summary'
      - $ref: '#/components/schemas/grouped-vista-summary'
      properties:
        type:
          $ref: '#/components/schemas/vista-type'
      required:
      - type
      title: vista-summary
      type: object
    vista-type:
      description: Type of vista object.
      enum:
      - curated
      - dynamic
      - grouped
      type: string
    webhook:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          event_types:
            description: The event types that the webhook will receive.
            items:
              $ref: '#/components/schemas/webhook-event-type'
            type: array
          secret:
            description: The secret to use for verifying webhook events.
            format: byte
            type: string
          status:
            $ref: '#/components/schemas/webhook-status'
          url:
            description: The URL of the webhook endpoint.
            type: string
        required:
        - secret
        - status
        - url
        type: object
      title: webhook
    webhook-event-request:
      properties:
        account_created:
          $ref: '#/components/schemas/event-account-created'
        account_deleted:
          $ref: '#/components/schemas/event-account-deleted'
        account_updated:
          $ref: '#/components/schemas/event-account-updated'
        conversation_created:
          $ref: '#/components/schemas/event-conversation-created'
        conversation_deleted:
          $ref: '#/components/schemas/event-conversation-deleted'
        conversation_updated:
          $ref: '#/components/schemas/event-conversation-updated'
        dev_user_created:
          $ref: '#/components/schemas/event-dev-user-created'
        dev_user_deleted:
          $ref: '#/components/schemas/event-dev-user-deleted'
        dev_user_updated:
          $ref: '#/components/schemas/event-dev-user-updated'
        id:
          description: The event's ID.
          type: string
        part_created:
          $ref: '#/components/schemas/event-part-created'
        part_deleted:
          $ref: '#/components/schemas/event-part-deleted'
        part_updated:
          $ref: '#/components/schemas/event-part-updated'
        rev_org_created:
          $ref: '#/components/schemas/event-rev-org-created'
        rev_org_deleted:
          $ref: '#/components/schemas/event-rev-org-deleted'
        rev_org_updated:
          $ref: '#/components/schemas/event-rev-org-updated'
        rev_user_created:
          $ref: '#/components/schemas/event-rev-user-created'
        rev_user_deleted:
          $ref: '#/components/schemas/event-rev-user-deleted'
        rev_user_updated:
          $ref: '#/components/schemas/event-rev-user-updated'
        sla_tracker_created:
          $ref: '#/components/schemas/event-sla-tracker-created'
        sla_tracker_deleted:
          $ref: '#/components/schemas/event-sla-tracker-deleted'
        sla_tracker_updated:
          $ref: '#/components/schemas/event-sla-tracker-updated'
        survey_response_created:
          $ref: '#/components/schemas/event-survey-response-created'
        survey_response_deleted:
          $ref: '#/components/schemas/event-survey-response-deleted'
        survey_response_updated:
          $ref: '#/components/schemas/event-survey-response-updated'
        tag_created:
          $ref: '#/components/schemas/event-tag-created'
        tag_deleted:
          $ref: '#/components/schemas/event-tag-deleted'
        tag_updated:
          $ref: '#/components/schemas/event-tag-updated'
        timeline_entry_created:
          $ref: '#/components/schemas/event-timeline-entry-created'
        timeline_entry_deleted:
          $ref: '#/components/schemas/event-timeline-entry-deleted'
        timeline_entry_updated:
          $ref: '#/components/schemas/event-timeline-entry-updated'
        timestamp:
          description: |
            Timestamp of the webhook's invocation for the event. Note this
            should be used to protect against replay attacks, where the event
            should only be processed if the timestamp isn't stale by several
            seconds.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
        type:
          $ref: '#/components/schemas/webhook-event-type'
        verify:
          $ref: '#/components/schemas/webhook-event-verify'
        webhook_created:
          $ref: '#/components/schemas/event-webhook-created'
        webhook_deleted:
          $ref: '#/components/schemas/event-webhook-deleted'
        webhook_id:
          description: ID of the webhook for the event.
          example: don:integration:<partition>:devo/<dev-org-id>:webhook/<webhook-id>
          type: string
        webhook_updated:
          $ref: '#/components/schemas/event-webhook-updated'
        work_created:
          $ref: '#/components/schemas/event-work-created'
        work_deleted:
          $ref: '#/components/schemas/event-work-deleted'
        work_updated:
          $ref: '#/components/schemas/event-work-updated'
      required:
      - id
      - webhook_id
      title: webhook-event-request
      type: object
    webhook-event-response:
      properties:
        challenge:
          description: |
            The challenge from the "verify" request, otherwise this should not
            be set for other request types.
          format: byte
          type: string
      title: webhook-event-response
      type: object
      x-go-name: WebhookEventResponseBody
    webhook-event-type:
      description: The event types that the webhook will receive.
      enum:
      - account_created
      - account_deleted
      - account_updated
      - conversation_created
      - conversation_deleted
      - conversation_updated
      - dev_user_created
      - dev_user_deleted
      - dev_user_updated
      - part_created
      - part_deleted
      - part_updated
      - rev_org_created
      - rev_org_deleted
      - rev_org_updated
      - rev_user_created
      - rev_user_deleted
      - rev_user_updated
      - sla_tracker_created
      - sla_tracker_deleted
      - sla_tracker_updated
      - tag_created
      - tag_deleted
      - tag_updated
      - timeline_entry_created
      - timeline_entry_deleted
      - timeline_entry_updated
      - verify
      - webhook_created
      - webhook_deleted
      - webhook_updated
      - work_created
      - work_deleted
      - work_updated
      type: string
    webhook-event-verify:
      properties:
        challenge:
          description: The challenge that must be echoed in the response.
          format: byte
          type: string
      required:
      - challenge
      title: webhook-event-verify
      type: object
    webhook-status:
      description: The status of the webhook.
      enum:
      - active
      - inactive
      - unverified
      type: string
    webhook-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: webhook-summary
    weekly-org-schedule:
      additionalProperties: false
      description: The schedule for each week.
      title: weekly-org-schedule
      type: object
    work:
      discriminator:
        mapping:
          issue: '#/components/schemas/issue'
          opportunity: '#/components/schemas/opportunity'
          task: '#/components/schemas/task'
          ticket: '#/components/schemas/ticket'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/issue'
      - $ref: '#/components/schemas/opportunity'
      - $ref: '#/components/schemas/task'
      - $ref: '#/components/schemas/ticket'
      properties:
        type:
          $ref: '#/components/schemas/work-type'
      required:
      - type
      title: work
      type: object
    work-base:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          applies_to_part:
            $ref: '#/components/schemas/part-summary'
          artifacts:
            description: The artifacts attached to the work item.
            items:
              $ref: '#/components/schemas/artifact-summary'
            type: array
          body:
            description: Body of the work object.
            type: string
          custom_fields:
            description: Custom fields.
            type: object
          custom_schema_fragments:
            description: Custom schema fragments.
            example:
            - don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
            items:
              type: string
            type: array
          owned_by:
            description: The users that own the work.
            items:
              $ref: '#/components/schemas/user-summary'
            type: array
          reported_by:
            description: Users that reported the work.
            items:
              $ref: '#/components/schemas/user-summary'
            type: array
          stage:
            $ref: '#/components/schemas/legacy-stage'
          stock_schema_fragment:
            description: Stock schema fragment.
            example: don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
            type: string
          subtype:
            description: Subtype corresponding to the custom type fragment.
            type: string
          tags:
            description: Tags associated with the object.
            items:
              $ref: '#/components/schemas/tag-with-value'
            type: array
          target_close_date:
            description: Timestamp when the work is expected to be complete.
            example: "2023-01-01T12:00:00.000Z"
            format: date-time
            type: string
          title:
            description: Title of the work object.
            type: string
        required:
        - owned_by
        - title
        type: object
      title: work-base
    work-base-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          owned_by:
            description: The users that own the work.
            items:
              $ref: '#/components/schemas/user-summary'
            type: array
          stage:
            $ref: '#/components/schemas/legacy-stage-summary'
          title:
            description: Title of the work object.
            type: string
        required:
        - owned_by
        - title
        type: object
      title: work-base-summary
    work-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          work:
            $ref: '#/components/schemas/work-summary'
        required:
        - work
        type: object
      title: work-search-summary
    work-summary:
      discriminator:
        mapping:
          issue: '#/components/schemas/issue-summary'
          opportunity: '#/components/schemas/opportunity-summary'
          task: '#/components/schemas/task-summary'
          ticket: '#/components/schemas/ticket-summary'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/issue-summary'
      - $ref: '#/components/schemas/opportunity-summary'
      - $ref: '#/components/schemas/task-summary'
      - $ref: '#/components/schemas/ticket-summary'
      properties:
        type:
          $ref: '#/components/schemas/work-type'
      required:
      - type
      title: work-summary
      type: object
    work-type:
      enum:
      - issue
      - opportunity
      - task
      - ticket
      type: string
    works-create-request:
      discriminator:
        mapping:
          issue: '#/components/schemas/works-create-request-issue'
          opportunity: '#/components/schemas/works-create-request-opportunity'
          task: '#/components/schemas/works-create-request-task'
          ticket: '#/components/schemas/works-create-request-ticket'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/works-create-request-issue'
      - $ref: '#/components/schemas/works-create-request-opportunity'
      - $ref: '#/components/schemas/works-create-request-task'
      - $ref: '#/components/schemas/works-create-request-ticket'
      properties:
        applies_to_part:
          description: |
            The [part](https://devrev.ai/docs/product/parts) that the work
            applies to. Specifying a part is required when creating tickets and
            issues.
          example: PROD-12345
          type: string
        artifacts:
          description: |
            The IDs of the artifacts to associate with the work item.
          example:
          - ARTIFACT-12345
          items:
            type: string
          type: array
        body:
          description: Body of the work object.
          type: string
        custom_fields:
          description: Custom fields.
          type: object
        custom_schema_fragments:
          description: The custom schema fragments to use.
          example:
          - don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
          items:
            type: string
          type: array
        custom_schema_spec:
          $ref: '#/components/schemas/custom-schema-spec'
        owned_by:
          description: The users that own the work.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        reported_by:
          description: The users that reported the work.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-init'
        stage_validation_options:
          description: |
            The type of stage validations options when creating a work item.
          items:
            $ref: '#/components/schemas/stage-validation-option-for-create'
          type: array
        tags:
          description: Tags associated with the work item.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
        target_close_date:
          description: Timestamp for when the work is expected to be complete.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
        title:
          description: Title of the work object.
          type: string
        type:
          $ref: '#/components/schemas/work-type'
      required:
      - applies_to_part
      - owned_by
      - title
      - type
      title: works-create-request
      type: object
    works-create-request-issue:
      properties:
        developed_with:
          description: The IDs of the parts associated with issue.
          example:
          - PROD-12345
          items:
            type: string
          maxItems: 8
          type: array
        priority:
          $ref: '#/components/schemas/issue-priority'
        priority_v2:
          description: |
            Priority enum id of the work based upon impact and criticality.
          format: int64
          type: integer
        sprint:
          description: The sprint that the issue belongs to.
          type: string
        target_start_date:
          description: Timestamp for when the work is expected to start.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      title: works-create-request-issue
      type: object
    works-create-request-opportunity:
      properties:
        account:
          description: |
            The ID of the account that the opportunity is associated with.
          example: ACC-12345
          type: string
        amount:
          description: Total opportunity amount.
          format: double
          type: number
        contacts:
          description: Contacts involved in the opportunity.
          items:
            type: string
          type: array
        customer_budget:
          description: Budget of the customer.
          format: double
          type: number
        forecast_category:
          $ref: '#/components/schemas/opportunity-forecast-category'
        priority:
          $ref: '#/components/schemas/opportunity-priority'
        probability:
          description: |
            The probability of winning the deal, lies between 0.0 and 1.0.
          format: double
          type: number
      required:
      - account
      title: works-create-request-opportunity
      type: object
    works-create-request-task:
      properties:
        embedded:
          description: Whether the task is embedded in the work.
          type: boolean
        priority:
          $ref: '#/components/schemas/task-priority'
        start_date:
          description: Timestamp when the task was started.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      title: works-create-request-task
      type: object
    works-create-request-ticket:
      properties:
        channels:
          description: Channels of the ticket.
          items:
            $ref: '#/components/schemas/ticket-channels'
          type: array
        group:
          description: The group that the ticket is associated with.
          type: string
        is_spam:
          description: Whether the ticket is spam.
          type: boolean
        needs_response:
          description: Whether the ticket needs a response.
          type: boolean
        rev_org:
          description: The Rev organization that the ticket is associated with.
          example: REV-AbCdEfGh
          type: string
        severity:
          $ref: '#/components/schemas/ticket-severity'
        source_channel:
          description: The source channel of the ticket.
          type: string
      title: works-create-request-ticket
      type: object
    works-create-response:
      properties:
        work:
          $ref: '#/components/schemas/work'
      required:
      - work
      title: works-create-response
      type: object
      x-go-name: WorksCreateResponseBody
    works-delete-request:
      properties:
        id:
          description: The work's ID.
          example: ISS-12345
          type: string
      required:
      - id
      title: works-delete-request
      type: object
    works-delete-response:
      additionalProperties: false
      title: works-delete-response
      type: object
      x-go-name: WorksDeleteResponseBody
    works-export-request:
      properties:
        actual_close_date:
          $ref: '#/components/schemas/date-filter'
        applies_to_part:
          description: Filters for work belonging to any of the provided parts.
          example:
          - PROD-12345
          items:
            type: string
          type: array
        created_by:
          description: Filters for work created by any of these users.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-filter'
        custom_fields:
          description: Filters for custom fields.
          type: object
        first:
          description: |
            The number of work items to return. The default is '50', the
            maximum is '5000'.
          format: int32
          type: integer
        issue:
          $ref: '#/components/schemas/works-filter-issue'
        modified_date:
          $ref: '#/components/schemas/date-filter'
        opportunity:
          $ref: '#/components/schemas/works-filter-opportunity'
        owned_by:
          description: Filters for work owned by any of these users.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        reported_by:
          description: Filters for work reported by any of these users.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        sort_by:
          description: |
            Fields to sort the work items by and the direction to sort them.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        staged_info:
          $ref: '#/components/schemas/staged-info-filter'
        sync_metadata:
          $ref: '#/components/schemas/sync-metadata-filter'
        tags:
          description: Filters for work with any of the provided tags.
          example:
          - TAG-12345
          items:
            type: string
          type: array
        target_close_date:
          $ref: '#/components/schemas/date-filter'
        ticket:
          $ref: '#/components/schemas/works-filter-ticket'
        type:
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
      title: works-export-request
      type: object
    works-export-response:
      properties:
        works:
          description: The resulting collection of work items.
          items:
            $ref: '#/components/schemas/work'
          type: array
      required:
      - works
      title: works-export-response
      type: object
      x-go-name: WorksExportResponseBody
    works-filter-issue:
      properties:
        accounts:
          description: Filters for issues with any of the provided Accounts.
          example:
          - ACC-12345
          items:
            type: string
          type: array
        actual_start_date:
          $ref: '#/components/schemas/date-filter'
        priority:
          description: Filters for issues with any of the provided priorities.
          items:
            $ref: '#/components/schemas/issue-priority'
          type: array
        priority_v2:
          description: |
            Filters for issues with any of the provided priority enum ids.
          items:
            format: int64
            type: integer
          type: array
        rev_orgs:
          description: |
            Filters for issues with any of the provided Rev organizations.
          example:
          - REV-AbCdEfGh
          items:
            type: string
          type: array
        sprint:
          description: Filters for issues with any of the sprint.
          items:
            type: string
          type: array
        subtype:
          description: Filters for issues with any of the provided subtypes.
          items:
            type: string
          type: array
        target_start_date:
          $ref: '#/components/schemas/date-filter'
      title: works-filter-issue
      type: object
    works-filter-opportunity:
      properties:
        account:
          description: |
            Filters for opportunities belonging to any of the provided
            accounts.
          example:
          - ACC-12345
          items:
            type: string
          type: array
        contacts:
          description: |
            Filters for opportunities with any of the provided contacts.
          items:
            type: string
          type: array
        subtype:
          description: |
            Filters for opportunity with any of the provided subtypes.
          items:
            type: string
          type: array
      title: works-filter-opportunity
      type: object
    works-filter-ticket:
      properties:
        channels:
          description: Filters for tickets with any of the provided channels.
          items:
            $ref: '#/components/schemas/ticket-channels'
          type: array
        group:
          description: Filters for tickets belonging to specific groups.
          items:
            type: string
          type: array
        is_spam:
          description: Filters for tickets that are spam.
          type: boolean
        needs_response:
          description: Filters for tickets that need response.
          type: boolean
        rev_org:
          description: |
            Filters for tickets that are associated with any of the provided
            Rev organizations.
          example:
          - REV-AbCdEfGh
          items:
            type: string
          type: array
        severity:
          description: Filters for tickets with any of the provided severities.
          items:
            $ref: '#/components/schemas/ticket-severity'
          type: array
        sla_summary:
          $ref: '#/components/schemas/sla-summary-filter'
        source_channel:
          description: |
            Filters for tickets with any of the provided source channels.
          items:
            type: string
          type: array
        subtype:
          description: Filters for tickets with any of the provided subtypes.
          items:
            type: string
          type: array
        surveys:
          $ref: '#/components/schemas/survey-aggregation-filter'
      title: works-filter-ticket
      type: object
    works-get-request:
      properties:
        id:
          description: The work's ID.
          example: ISS-12345
          type: string
      required:
      - id
      title: works-get-request
      type: object
    works-get-response:
      properties:
        work:
          $ref: '#/components/schemas/work'
      required:
      - work
      title: works-get-response
      type: object
      x-go-name: WorksGetResponseBody
    works-list-request:
      properties:
        actual_close_date:
          $ref: '#/components/schemas/date-filter'
        applies_to_part:
          description: Filters for work belonging to any of the provided parts.
          example:
          - PROD-12345
          items:
            type: string
          type: array
        created_by:
          description: Filters for work created by any of these users.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-filter'
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        custom_fields:
          description: Filters for custom fields.
          type: object
        issue:
          $ref: '#/components/schemas/works-filter-issue'
        limit:
          description: |
            The maximum number of works to return. The default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-filter'
        opportunity:
          $ref: '#/components/schemas/works-filter-opportunity'
        owned_by:
          description: Filters for work owned by any of these users.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        reported_by:
          description: Filters for work reported by any of these users.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
        sort_by:
          description: |
            Fields to sort the works by and the direction to sort them.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        staged_info:
          $ref: '#/components/schemas/staged-info-filter'
        sync_metadata:
          $ref: '#/components/schemas/sync-metadata-filter'
        tags:
          description: Filters for work with any of the provided tags.
          example:
          - TAG-12345
          items:
            type: string
          type: array
        target_close_date:
          $ref: '#/components/schemas/date-filter'
        ticket:
          $ref: '#/components/schemas/works-filter-ticket'
        type:
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
      title: works-list-request
      type: object
    works-list-response:
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        works:
          description: The list of works.
          items:
            $ref: '#/components/schemas/work'
          type: array
      required:
      - works
      title: works-list-response
      type: object
      x-go-name: WorksListResponseBody
    works-update-request:
      discriminator:
        mapping:
          issue: '#/components/schemas/works-update-request-issue'
          none: '#/components/schemas/empty'
          opportunity: '#/components/schemas/works-update-request-opportunity'
          task: '#/components/schemas/works-update-request-task'
          ticket: '#/components/schemas/works-update-request-ticket'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/empty'
      - $ref: '#/components/schemas/works-update-request-issue'
      - $ref: '#/components/schemas/works-update-request-opportunity'
      - $ref: '#/components/schemas/works-update-request-task'
      - $ref: '#/components/schemas/works-update-request-ticket'
      properties:
        applies_to_part:
          description: Updates the part that the work item applies to.
          example: PROD-12345
          type: string
        artifacts:
          $ref: '#/components/schemas/works-update-request-artifacts'
        body:
          description: |
            Updated body of the work object, or unchanged if not provided.
          type: string
        custom_fields:
          description: Custom fields.
          type: object
        custom_schema_fragments:
          description: The custom schema fragments to use.
          example:
          - don:core:<partition>:devo/<dev-org-id>:custom_type_fragment/<custom-type-fragment-id>
          items:
            type: string
          type: array
        custom_schema_spec:
          $ref: '#/components/schemas/custom-schema-spec'
        id:
          description: The work's ID.
          example: ISS-12345
          type: string
        owned_by:
          $ref: '#/components/schemas/works-update-request-owned-by'
        reported_by:
          $ref: '#/components/schemas/works-update-request-reported-by'
        stage:
          $ref: '#/components/schemas/stage-update'
        stage_validation_options:
          description: |
            The type of stage validations options when updating the stage of an
            object.
          items:
            $ref: '#/components/schemas/stage-validation-option-for-update'
          type: array
        staged_info:
          $ref: '#/components/schemas/works-update-request-staged-info-staged-info-update'
        tags:
          $ref: '#/components/schemas/works-update-request-tags'
        target_close_date:
          description: |
            Updates the timestamp for when the work is expected to be complete.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          nullable: true
          type: string
        title:
          description: |
            Updated title of the work object, or unchanged if not provided.
          type: string
        type:
          $ref: '#/components/schemas/work-type'
      required:
      - id
      title: works-update-request
      type: object
    works-update-request-artifacts:
      properties:
        add:
          description: |
            Adds the provided artifacts (if not already present) to the field.
          example:
          - ARTIFACT-12345
          items:
            type: string
          maxItems: 50
          type: array
        remove:
          description: |
            Removes the provided artifacts (if they exist) from the field.
          example:
          - ARTIFACT-12345
          items:
            type: string
          maxItems: 50
          type: array
        set:
          description: Sets the field to the provided artifacts.
          example:
          - ARTIFACT-12345
          items:
            type: string
          maxItems: 50
          type: array
      title: works-update-request-artifacts
      type: object
    works-update-request-issue:
      properties:
        developed_with:
          $ref: '#/components/schemas/works-update-request-issue-developed-with'
        priority:
          $ref: '#/components/schemas/issue-priority'
        priority_v2:
          description: |
            Priority enum id of the work based upon impact and criticality.
          format: int64
          type: integer
        sprint:
          description: Updates the sprint that the issue belongs to.
          nullable: true
          type: string
        target_start_date:
          description: |
            Updates the timestamp for when the work is expected to start.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          nullable: true
          type: string
      title: works-update-request-issue
      type: object
    works-update-request-issue-developed-with:
      properties:
        set:
          description: Sets the IDs of the parts associated with issue.
          example:
          - PROD-12345
          items:
            type: string
          maxItems: 8
          type: array
      title: works-update-request-issue-developed-with
      type: object
    works-update-request-opportunity:
      properties:
        account:
          description: |
            Updates the account that the opportunity is associated with.
          example: ACC-12345
          type: string
        amount:
          description: Updates the total opportunity amount.
          format: double
          nullable: true
          type: number
        contacts:
          $ref: '#/components/schemas/works-update-request-opportunity-contacts'
        customer_budget:
          description: Updates the customer budget.
          format: double
          nullable: true
          type: number
        probability:
          description: |
            Updates the probability of winning the deal, lies between 0.0 and
            1.0.
          format: double
          nullable: true
          type: number
      title: works-update-request-opportunity
      type: object
    works-update-request-opportunity-contacts:
      properties:
        set:
          description: Sets the contact IDs to the provided contact IDs.
          items:
            type: string
          type: array
      required:
      - set
      title: works-update-request-opportunity-contacts
      type: object
    works-update-request-owned-by:
      properties:
        set:
          description: |
            Sets the owner IDs to the provided user IDs. This must not be
            empty.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      title: works-update-request-owned-by
      type: object
    works-update-request-reported-by:
      properties:
        set:
          description: |
            Sets the users that reported the work to the provided user IDs.
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      title: works-update-request-reported-by
      type: object
    works-update-request-staged-info-staged-info-update:
      properties:
        unresolved_fields:
          description: Updates the unresolved fields of the staged work.
          items:
            type: string
          type: array
      required:
      - unresolved_fields
      title: works-update-request-staged-info-staged-info-update
      type: object
    works-update-request-tags:
      properties:
        set:
          description: Sets the provided tags on the work item.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
      title: works-update-request-tags
      type: object
    works-update-request-task:
      properties:
        embedded:
          description: Whether the task is embedded in the work.
          type: boolean
        priority:
          $ref: '#/components/schemas/task-priority'
        start_date:
          description: Timestamp when the task was started.
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      title: works-update-request-task
      type: object
    works-update-request-ticket:
      properties:
        channels:
          $ref: '#/components/schemas/works-update-request-ticket-channels'
        group:
          description: Updates the group that the ticket is associated with.
          nullable: true
          type: string
        is_spam:
          description: Updates whether the ticket is spam.
          type: boolean
        needs_response:
          description: Updates whether the ticket needs a response.
          type: boolean
        rev_org:
          description: |
            Updates the Rev organization that the ticket is associated with.
          example: REV-AbCdEfGh
          nullable: true
          type: string
        severity:
          $ref: '#/components/schemas/ticket-severity'
      title: works-update-request-ticket
      type: object
    works-update-request-ticket-channels:
      properties:
        set:
          description: Sets the channels to the provided channels.
          items:
            $ref: '#/components/schemas/ticket-channels'
          type: array
      title: works-update-request-ticket-channels
      type: object
    works-update-response:
      properties:
        work:
          $ref: '#/components/schemas/work'
      required:
      - work
      title: works-update-response
      type: object
      x-go-name: WorksUpdateResponseBody
  securitySchemes:
    auth-token:
      description: |-
        All the DevRev APIs require a token to authenticate the user. Provide `Authorization: <token>` as a header to every API request.
         [How do I find my token?](https://devrev.ai/docs/apis/auth)
      in: header
      name: Authorization
      type: apiKey
info:
  description: DevRev's BETA REST API Specification.
  title: DevRev Beta REST API
  version: BETA
openapi: 3.0.3
paths:
  /accounts.create:
    post:
      description: |
        Creates an account, which is a record representing a customer or an
        organization.
      operationId: accounts-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accounts-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "409":
          $ref: '#/components/responses/conflict'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - accounts
  /accounts.delete:
    post:
      description: Deletes an account.
      operationId: accounts-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accounts-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - accounts
  /accounts.export:
    get:
      description: Exports a collection of accounts.
      operationId: accounts-export
      parameters:
      - description: Filters for accounts created by the specified user(s).
        explode: false
        in: query
        name: created_by
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: created_date.after
        schema:
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: created_date.before
        schema:
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      - description: Filters for custom fields.
        explode: false
        in: query
        name: custom_fields
        schema:
          type: object
      - description: Array of display names of accounts to be filtered.
        explode: false
        in: query
        name: display_name
        schema:
          items:
            type: string
          type: array
      - description: Domains for accounts to be filtered.
        explode: false
        in: query
        name: domains
        schema:
          items:
            type: string
          type: array
      - description: Array of references of accounts to be filtered.
        explode: false
        in: query
        name: external_refs
        schema:
          items:
            type: string
          type: array
      - description: The number of accounts to return. The default is '50'.
        explode: false
        in: query
        name: first
        schema:
          format: int32
          maximum: 500
          minimum: 1
          type: integer
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: modified_date.after
        schema:
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: modified_date.before
        schema:
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      - description: Filters for accounts owned by the specified user(s).
        explode: false
        in: query
        name: owned_by
        schema:
          items:
            type: string
          type: array
      - description: |
          Fields to sort the accounts by and the direction to sort them in.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: Filters for accounts on specified stages.
        explode: false
        in: query
        name: stage
        schema:
          items:
            type: string
          type: array
      - description: List of tags to be filtered.
        explode: false
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-export-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - accounts
      x-request-name: AccountsExportQuery
    post:
      description: Exports a collection of accounts.
      operationId: accounts-export-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accounts-export-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-export-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - accounts
  /accounts.get:
    get:
      description: Retrieves an account's information.
      operationId: accounts-get
      parameters:
      - description: The ID of the account to be retrieved.
        explode: false
        in: query
        name: id
        required: true
        schema:
          example: ACC-12345
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - accounts
      x-request-name: AccountsGetQuery
    post:
      description: Retrieves an account's information.
      operationId: accounts-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accounts-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - accounts
  /accounts.list:
    get:
      description: Gets a list of accounts.
      operationId: accounts-list
      parameters:
      - description: Filters for accounts created by the specified user(s).
        explode: false
        in: query
        name: created_by
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: created_date.after
        schema:
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: created_date.before
        schema:
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: Filters for custom fields.
        explode: false
        in: query
        name: custom_fields
        schema:
          type: object
      - description: Array of display names of accounts to be filtered.
        explode: false
        in: query
        name: display_name
        schema:
          items:
            type: string
          type: array
      - description: Domains for accounts to be filtered.
        explode: false
        in: query
        name: domains
        schema:
          items:
            type: string
          type: array
      - description: Array of references of accounts to be filtered.
        explode: false
        in: query
        name: external_refs
        schema:
          items:
            type: string
          type: array
      - description: |
          The maximum number of accounts to return per page. The default is
          '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: modified_date.after
        schema:
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: modified_date.before
        schema:
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      - description: Filters for accounts owned by the specified user(s).
        explode: false
        in: query
        name: owned_by
        schema:
          items:
            type: string
          type: array
      - description: |
          Fields to sort the accounts by and the direction to sort them in.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: Filters for accounts on specified stages.
        explode: false
        in: query
        name: stage
        schema:
          items:
            type: string
          type: array
      - description: List of tags to be filtered.
        explode: false
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - accounts
      x-request-name: AccountsListQuery
    post:
      description: Gets a list of accounts.
      operationId: accounts-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accounts-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - accounts
  /accounts.update:
    post:
      description: Updates an account's information.
      operationId: accounts-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accounts-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "409":
          $ref: '#/components/responses/conflict'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - accounts
  /articles.count:
    get:
      description: Get count of articles matching given filter.
      operationId: articles-count
      parameters:
      - description: The ancestor directory of the articles.
        explode: false
        in: query
        name: ancestor
        schema:
          type: string
      - description: |
          Filters for articles belonging to any of the provided parts.
        explode: false
        in: query
        name: applies_to_parts
        schema:
          example:
          - PROD-12345
          items:
            type: string
          type: array
      - description: |
          Filters for articles authored by any of the provided users.
        explode: false
        in: query
        name: authored_by
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      - description: Filters for articles created by any of the provided users.
        explode: false
        in: query
        name: created_by
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      - description: |
          Filters for articles modified by any of the provided users.
        explode: false
        in: query
        name: modified_by
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      - description: Filters for articles owned by any of the provided users.
        explode: false
        in: query
        name: owned_by
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - articles
      x-request-name: ArticlesCountQuery
    post:
      description: Get count of articles matching given filter.
      operationId: articles-count-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/articles-count-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - articles
  /articles.create:
    post:
      description: |
        Article is an object which can contain a URL or artifacts in the
        resource. It also contains the data regarding the owner, author, status
        and published date of the object. This call creates an article.
      operationId: create-article
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/articles-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - articles
  /articles.delete:
    post:
      description: Deletes an article.
      operationId: delete-article
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/articles-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - articles
  /articles.get:
    get:
      description: Gets an article.
      operationId: get-article
      parameters:
      - description: The ID of the required article.
        explode: false
        in: query
        name: id
        required: true
        schema:
          example: ARTICLE-12345
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - articles
      x-request-name: GetArticleQuery
    post:
      description: Gets an article.
      operationId: get-article-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/articles-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - articles
  /articles.list:
    get:
      description: Lists a collection of articles.
      operationId: list-articles
      parameters:
      - description: |
          Filters for articles belonging to any of the provided parts.
        explode: false
        in: query
        name: applies_to_parts
        schema:
          example:
          - PROD-12345
          items:
            type: string
          type: array
      - description: |
          Filters for articles authored by any of the provided users.
        explode: false
        in: query
        name: authored_by
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      - description: Filters for articles created by any of the provided users.
        explode: false
        in: query
        name: created_by
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of articles to return. The default is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Filters for articles modified by any of the provided users.
        explode: false
        in: query
        name: modified_by
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      - description: Filters for articles owned by any of the provided users.
        explode: false
        in: query
        name: owned_by
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - articles
      x-request-name: ListArticlesQuery
    post:
      description: Lists a collection of articles.
      operationId: list-articles-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/articles-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - articles
  /articles.update:
    post:
      description: Updates an article.
      operationId: update-article
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/articles-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - articles
  /artifacts.prepare:
    post:
      description: |
        Creates an artifact and generates an upload URL for its data.
      operationId: artifacts-prepare
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/artifacts-prepare-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artifacts-prepare-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - artifacts
  /artifacts.versions.prepare:
    post:
      description: |
        Prepares a new version for an artifact, returning the URL and form data
        to upload the updated file.
      operationId: artifacts-versions-prepare
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/artifacts-versions-prepare-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artifacts-versions-prepare-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - artifacts
  /code-changes.create:
    post:
      description: Creates a code change object.
      operationId: code-changes-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/code-changes-create-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/code-changes-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - code-changes
  /code-changes.delete:
    post:
      description: Deletes a code change object.
      operationId: code-changes-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/code-changes-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/code-changes-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - code-changes
  /code-changes.get:
    get:
      description: Gets a code change object.
      operationId: code-changes-get
      parameters:
      - description: The code change object ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/code-changes-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - code-changes
      x-request-name: CodeChangesGetQuery
    post:
      description: Gets a code change object.
      operationId: code-changes-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/code-changes-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/code-changes-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - code-changes
  /code-changes.list:
    get:
      description: Lists code change objects.
      operationId: code-changes-list
      parameters:
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of code change objects to return. The default is
          '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/code-changes-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - code-changes
      x-request-name: CodeChangesListQuery
    post:
      description: Lists code change objects.
      operationId: code-changes-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/code-changes-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/code-changes-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - code-changes
  /code-changes.update:
    post:
      description: Updates a code change object.
      operationId: code-changes-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/code-changes-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/code-changes-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - code-changes
  /conversations.create:
    post:
      description: Creates a conversation.
      operationId: conversations-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversations-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - conversations
  /conversations.delete:
    post:
      description: Deletes the requested conversation.
      operationId: conversations-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversations-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - conversations
  /conversations.export:
    get:
      description: Exports a collection of conversation items.
      operationId: conversations-export
      parameters:
      - description: |
          Filters for conversations belonging to any of the provided parts.
        explode: false
        in: query
        name: applies_to_parts
        schema:
          example:
          - PROD-12345
          items:
            type: string
          type: array
      - description: |
          The number of conversation items to return. The default is '50', the
          maximum is '5000'.
        explode: false
        in: query
        name: first
        schema:
          format: int32
          type: integer
      - description: Filters for conversation that belong to the given groups.
        explode: false
        in: query
        name: group
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for conversations that are created by verified users.
        explode: false
        in: query
        name: is_creator_verified
        schema:
          type: boolean
      - description: Filters for conversations that are spam.
        explode: false
        in: query
        name: is_spam
        schema:
          type: boolean
      - description: |
          Filters for conversations where these users are participants.
        explode: false
        in: query
        name: members
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      - description: Filters for conversations owned by any of these users.
        explode: false
        in: query
        name: owned_by
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      - description: |
          Filters for conversations that are associated with any of the
          provided Rev organizations.
        explode: false
        in: query
        name: rev_org
        schema:
          example:
          - REV-AbCdEfGh
          items:
            type: string
          type: array
      - description: Filters for records with any of the provided SLA stages.
        explode: false
        in: query
        name: sla_summary.stage
        schema:
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
      - description: |
          Filters for conversations with any of the provided source channels.
        explode: false
        in: query
        name: source_channels
        schema:
          items:
            type: string
          type: array
      - description: Filters for records in the provided stage(s) by name.
        explode: false
        in: query
        name: stage.name
        schema:
          items:
            type: string
          type: array
      - description: Filters for conversations with any of the provided tags.
        explode: false
        in: query
        name: tags
        schema:
          deprecated: true
          example:
          - TAG-12345
          items:
            type: string
          type: array
      - description: The ID of the tag.
        explode: false
        in: query
        name: tags_v2.id
        schema:
          example: TAG-12345
          type: string
      - description: |
          The value for the object's association with the tag. If specified,
          the value must be one that's specified in the tag's allowed values.
        explode: false
        in: query
        name: tags_v2.value
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-export-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - conversations
      x-request-name: ConversationsExportQuery
    post:
      description: Exports a collection of conversation items.
      operationId: conversations-export-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversations-export-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-export-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - conversations
  /conversations.get:
    get:
      description: Gets the requested conversation's information.
      operationId: conversations-get
      parameters:
      - description: The requested conversation's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - conversations
      x-request-name: ConversationsGetQuery
    post:
      description: Gets the requested conversation's information.
      operationId: conversations-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversations-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - conversations
  /conversations.list:
    get:
      description: Lists the available conversations.
      operationId: conversations-list
      parameters:
      - description: |
          Filters for conversations belonging to any of the provided parts.
        explode: false
        in: query
        name: applies_to_parts
        schema:
          example:
          - PROD-12345
          items:
            type: string
          type: array
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: Filters for conversation that belong to the given groups.
        explode: false
        in: query
        name: group
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for conversations that are created by verified users.
        explode: false
        in: query
        name: is_creator_verified
        schema:
          type: boolean
      - description: Filters for conversations that are spam.
        explode: false
        in: query
        name: is_spam
        schema:
          type: boolean
      - description: |
          The maximum number of conversations to return. The default is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          Filters for conversations where these users are participants.
        explode: false
        in: query
        name: members
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: Filters for conversations owned by any of these users.
        explode: false
        in: query
        name: owned_by
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      - description: |
          Filters for conversations that are associated with any of the
          provided Rev organizations.
        explode: false
        in: query
        name: rev_org
        schema:
          example:
          - REV-AbCdEfGh
          items:
            type: string
          type: array
      - description: Filters for records with any of the provided SLA stages.
        explode: false
        in: query
        name: sla_summary.stage
        schema:
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
      - description: |
          Filters for conversations with any of the provided source channels.
        explode: false
        in: query
        name: source_channels
        schema:
          items:
            type: string
          type: array
      - description: Filters for records in the provided stage(s) by name.
        explode: false
        in: query
        name: stage.name
        schema:
          items:
            type: string
          type: array
      - description: Filters for conversations with any of the provided tags.
        explode: false
        in: query
        name: tags
        schema:
          deprecated: true
          example:
          - TAG-12345
          items:
            type: string
          type: array
      - description: The ID of the tag.
        explode: false
        in: query
        name: tags_v2.id
        schema:
          example: TAG-12345
          type: string
      - description: |
          The value for the object's association with the tag. If specified,
          the value must be one that's specified in the tag's allowed values.
        explode: false
        in: query
        name: tags_v2.value
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - conversations
      x-request-name: ConversationsListQuery
    post:
      description: Lists the available conversations.
      operationId: conversations-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversations-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - conversations
  /conversations.update:
    post:
      description: Updates the requested conversation.
      operationId: conversations-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversations-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - conversations
  /dev-users.identities.link:
    post:
      description: Links an external/secondary identity to the Dev user.
      operationId: dev-users-identities-link
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-identities-link-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-identities-link-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
  /dev-users.identities.unlink:
    post:
      description: Unlinks an external/secondary identity from the Dev user.
      operationId: dev-users-identities-unlink
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-identities-unlink-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-identities-unlink-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
  /dev-users.self.update:
    post:
      description: Updates the authenticated user.
      operationId: dev-users-self-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-self-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
  /dev-users.update:
    post:
      description: Updates the user corresponding to the input Id.
      operationId: dev-users-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
  /engagements.count:
    get:
      description: Counts the engagement records.
      operationId: engagements-count
      parameters:
      - description: Filters for meetings with the provided external_refs.
        explode: false
        in: query
        name: external_ref
        schema:
          items:
            type: string
          type: array
      - description: Filters for engagement of the provided members.
        explode: false
        in: query
        name: members
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      - description: Filters for engagements with the provided parent.
        explode: false
        in: query
        name: parent
        schema:
          example:
          - ACC-12345
          items:
            type: string
          type: array
      - description: Filters for engagement of the provided types.
        explode: false
        in: query
        name: type
        schema:
          items:
            $ref: '#/components/schemas/engagement-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engagements-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - engagements
      x-request-name: EngagementsCountQuery
    post:
      description: Counts the engagement records.
      operationId: engagements-count-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/engagements-count-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engagements-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - engagements
  /engagements.create:
    post:
      description: Creates a new engagement record.
      operationId: engagements-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/engagements-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engagements-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - engagements
  /engagements.delete:
    post:
      description: Deletes the engagement record.
      operationId: engagements-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/engagements-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engagements-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - engagements
  /engagements.get:
    get:
      description: Gets the engagement record.
      operationId: engagements-get
      parameters:
      - description: The engagement ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engagements-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - engagements
      x-request-name: EngagementsGetQuery
    post:
      description: Gets the engagement record.
      operationId: engagements-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/engagements-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engagements-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - engagements
  /engagements.list:
    get:
      description: Lists the engagement records.
      operationId: engagements-list
      parameters:
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: Filters for meetings with the provided external_refs.
        explode: false
        in: query
        name: external_ref
        schema:
          items:
            type: string
          type: array
      - description: The maximum number of engagements to return.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: Filters for engagement of the provided members.
        explode: false
        in: query
        name: members
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: Filters for engagements with the provided parent.
        explode: false
        in: query
        name: parent
        schema:
          example:
          - ACC-12345
          items:
            type: string
          type: array
      - description: |
          Fields to sort the engagements by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: Filters for engagement of the provided types.
        explode: false
        in: query
        name: type
        schema:
          items:
            $ref: '#/components/schemas/engagement-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engagements-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - engagements
      x-request-name: EngagementsListQuery
    post:
      description: Lists the engagement records.
      operationId: engagements-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/engagements-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engagements-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - engagements
  /engagements.update:
    post:
      description: Updates the engagement record.
      operationId: engagements-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/engagements-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engagements-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - engagements
  /event-sources.get:
    get:
      description: Gets an event source.
      operationId: event-sources-get
      parameters:
      - description: The event source's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event-source-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - event-source
      x-request-name: EventSourcesGetQuery
    post:
      description: Gets an event source.
      operationId: event-sources-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event-source-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event-source-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - event-source
  /event-sources.schedule:
    post:
      description: |
        Schedules an event to be published to the specified event source.
      operationId: event-sources-schedule-event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event-sources-schedule-event-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event-sources-schedule-event-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - event-source
  /event-sources.unschedule:
    post:
      description: Deletes an event scheduled for the specified event source.
      operationId: event-sources-delete-scheduled-event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event-sources-delete-scheduled-event-request'
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - event-source
  /groups.create:
    post:
      description: Creates a new group. A group is a collection of users.
      operationId: groups-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groups-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - groups
  /groups.get:
    get:
      description: Gets the requested group.
      operationId: groups-get
      parameters:
      - description: The ID of the group to get.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - groups
      x-request-name: GroupsGetQuery
    post:
      description: Gets the requested group.
      operationId: groups-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groups-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - groups
  /groups.list:
    get:
      description: Lists the available groups.
      operationId: groups-list
      parameters:
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: Filters the groups based on the group type.
        explode: false
        in: query
        name: group_type
        schema:
          items:
            $ref: '#/components/schemas/group-type'
          type: array
      - description: |
          The maximum number of groups to return. The default is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: Filters the groups on basis of member type.
        explode: false
        in: query
        name: member_type
        schema:
          items:
            $ref: '#/components/schemas/group-member-type'
          type: array
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: Comma-separated fields to sort the groups by.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - groups
      x-request-name: GroupsListQuery
    post:
      description: Lists the available groups.
      operationId: groups-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groups-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - groups
  /groups.members.add:
    post:
      description: Adds a member to a group.
      operationId: group-members-add
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group-members-add-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-members-add-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - groups
  /groups.members.list:
    get:
      description: Lists the members in a group.
      operationId: group-members-list
      parameters:
      - description: ID of the group for which to list members.
        explode: false
        in: query
        name: group
        required: true
        schema:
          type: string
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of members to return. If not set, then the default
          is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-members-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - groups
      x-request-name: GroupMembersListQuery
    post:
      description: Lists the members in a group.
      operationId: group-members-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group-members-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-members-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - groups
  /groups.members.remove:
    post:
      description: Removes a member from a group.
      operationId: group-members-remove
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group-members-remove-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group-members-remove-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - groups
  /groups.update:
    post:
      description: Updates the requested group.
      operationId: groups-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groups-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - groups
  /links.create:
    post:
      description: |
        Creates a link between two objects to indicate a relationship.
      operationId: links-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/links-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/links-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - links
  /links.delete:
    post:
      description: Deletes a link.
      operationId: links-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/links-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/links-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - links
  /links.get:
    get:
      description: Gets the requested link's information.
      operationId: links-get
      parameters:
      - description: The requested link's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/links-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - links
      x-request-name: LinksGetQuery
    post:
      description: Gets the requested link's information.
      operationId: links-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/links-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/links-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - links
  /links.list:
    get:
      description: Lists the available links.
      operationId: links-list
      parameters:
      - description: The ID of the object to list the links for.
        explode: false
        in: query
        name: object
        required: true
        schema:
          type: string
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The direction of the links to list, otherwise if not present, then
          links in both directions (source and target) are included.
        explode: false
        in: query
        name: direction
        schema:
          $ref: '#/components/schemas/links-direction'
      - description: |
          The maximum number of links to return. If not set, then the default
          is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The link type(s) to filter for, otherwise if not present, all link
          types are included.
        explode: false
        in: query
        name: link_type
        schema:
          items:
            $ref: '#/components/schemas/link-type'
          type: array
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          The link types to filter for, otherwise if not present, all link
          types are included.
        explode: false
        in: query
        name: types
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/link-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/links-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - links
      x-request-name: LinksListQuery
    post:
      description: Lists the available links.
      operationId: links-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/links-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/links-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - links
  /metric-definitions.list:
    get:
      description: Lists metric definitions matching a filter.
      operationId: metric-definitions-list
      parameters:
      - description: The type of objects the metric definition applies to.
        explode: false
        in: query
        name: applies_to_type
        schema:
          items:
            $ref: '#/components/schemas/metric-definition-applies-to'
          type: array
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          Whether to include custom metrics in the response. If not set, then
          custom metrics are excluded.
        explode: false
        in: query
        name: include_custom_metrics
        schema:
          type: boolean
      - description: |
          The maximum number of records to return. The default is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: The status of the metric definition.
        explode: false
        in: query
        name: status
        schema:
          items:
            $ref: '#/components/schemas/metric-definition-status'
          type: array
      - description: The type of metric definitions sought.
        explode: false
        in: query
        name: type
        schema:
          items:
            $ref: '#/components/schemas/metric-definition-metric-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metric-definitions-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - slas
      x-request-name: MetricDefinitionsListQuery
    post:
      description: Lists metric definitions matching a filter.
      operationId: metric-definitions-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metric-definitions-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metric-definitions-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - slas
  /metrics.devrev.ingest:
    post:
      description: Ingest endpoint for DevRev metrics data from clients.
      operationId: metrics-devrev-ingest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metrics-data-ingest-request'
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - product-usage
  /org-schedule-fragments.create:
    post:
      description: Creates an organization schedule fragment.
      operationId: org-schedule-fragments-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedule-fragments-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedule-fragments-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - schedules
  /org-schedule-fragments.get:
    get:
      description: Gets an organization schedule fragment.
      operationId: org-schedule-fragments-get
      parameters:
      - description: Organization schedule Fragment ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedule-fragments-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - schedules
      x-request-name: OrgScheduleFragmentsGetQuery
    post:
      description: Gets an organization schedule fragment.
      operationId: org-schedule-fragments-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedule-fragments-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedule-fragments-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - schedules
  /org-schedule-fragments.transition:
    post:
      description: Changes stage of an organization schedule fragment.
      operationId: org-schedule-fragments-transition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedule-fragments-transition-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedule-fragments-transition-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - schedules
  /org-schedules.create:
    post:
      description: |
        Creates an organization schedule with a default weekly organization
        schedule and a list of organization schedule fragments.
      operationId: org-schedules-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedules-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedules-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - schedules
  /org-schedules.get:
    get:
      description: Gets an organization schedule.
      operationId: org-schedules-get
      parameters:
      - description: Organization schedule ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedules-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - schedules
      x-request-name: OrgSchedulesGetQuery
    post:
      description: Gets an organization schedule.
      operationId: org-schedules-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedules-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedules-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - schedules
  /org-schedules.list:
    get:
      description: Gets list of organization schedules.
      operationId: org-schedules-list
      parameters:
      - description: Creator ID the filter matches.
        explode: false
        in: query
        name: created_by_id
        schema:
          items:
            type: string
          type: array
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          Max number of organization schedules returned in a page. Default is
          50.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: The organization schedule statuses the filter matches.
        explode: false
        in: query
        name: status
        schema:
          items:
            $ref: '#/components/schemas/org-schedule-status'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedules-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - schedules
      x-request-name: OrgSchedulesListQuery
    post:
      description: Gets list of organization schedules.
      operationId: org-schedules-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedules-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedules-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - schedules
  /org-schedules.set-future:
    post:
      description: |
        Sets next organization schedule fragment which must begin the day the
        last existing fragment ends.
      operationId: org-schedules-set-future
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedules-set-future-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedules-set-future-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - schedules
  /org-schedules.transition:
    post:
      description: Publishes or archives an organization schedule.
      operationId: org-schedules-transition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedules-transition-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedules-transition-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - schedules
  /org-schedules.update:
    post:
      description: Updates an organization schedule.
      operationId: org-schedules-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedules-update-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedules-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - schedules
  /parts.create:
    post:
      description: Creates new [part](https://devrev.ai/docs/product/parts).
      operationId: parts-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
  /parts.delete:
    post:
      description: Deletes a [part](https://devrev.ai/docs/product/parts).
      operationId: parts-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
  /parts.get:
    get:
      description: |
        Gets a [part's](https://devrev.ai/docs/product/parts) information.
      operationId: parts-get
      parameters:
      - description: The ID of the part to retrieve.
        explode: false
        in: query
        name: id
        required: true
        schema:
          example: PROD-12345
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-request-name: PartsGetQuery
    post:
      description: |
        Gets a [part's](https://devrev.ai/docs/product/parts) information.
      operationId: parts-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
  /parts.list:
    get:
      description: |
        Lists a collection of [parts](https://devrev.ai/docs/product/parts).
      operationId: parts-list
      parameters:
      - description: Filters for parts created by any of these users.
        explode: false
        in: query
        name: created_by
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of parts to return. The default is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: Filters for parts of the provided name(s).
        explode: false
        in: query
        name: name
        schema:
          items:
            type: string
          type: array
      - description: Filters for parts owned by any of these users.
        explode: false
        in: query
        name: owned_by
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      - description: Number of levels to fetch the part hierarchy up to.
        explode: false
        in: query
        name: parent_part.level
        schema:
          format: int32
          minimum: 1
          type: integer
      - description: |
          Part IDs to fetch the hierarchy for. Required if any parent_part.*
          fields are provided.
        explode: false
        in: query
        name: parent_part.parts
        schema:
          example:
          - PROD-12345
          items:
            type: string
          minItems: 1
          type: array
      - description: Filters for parts of the provided type(s).
        explode: false
        in: query
        name: type
        schema:
          items:
            $ref: '#/components/schemas/part-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-request-name: PartsListQuery
    post:
      description: |
        Lists a collection of [parts](https://devrev.ai/docs/product/parts).
      operationId: parts-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
  /parts.update:
    post:
      description: |
        Updates a [part's](https://devrev.ai/docs/product/parts) information.
      operationId: parts-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
  /question-answers.create:
    post:
      description: Creates a question-answer.
      operationId: create-question-answer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/question-answers-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/question-answers-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - question-answers
  /question-answers.delete:
    post:
      description: Deletes a question-answer.
      operationId: delete-question-answer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/question-answers-delete-request'
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - question-answers
  /question-answers.get:
    get:
      description: Gets a question-answer.
      operationId: get-question-answer
      parameters:
      - description: The ID of the required question-answer.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/question-answers-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - question-answers
      x-request-name: GetQuestionAnswerQuery
    post:
      description: Gets a question-answer.
      operationId: get-question-answer-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/question-answers-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/question-answers-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - question-answers
  /question-answers.list:
    get:
      description: Lists a collection of question-answers.
      operationId: list-question-answers
      parameters:
      - description: |
          Filters for question-answer belonging to any of the provided
          articles.
        explode: false
        in: query
        name: applies_to_articles
        schema:
          example:
          - ARTICLE-12345
          items:
            type: string
          type: array
      - description: |
          Filters for question-answer belonging to any of the provided parts.
        explode: false
        in: query
        name: applies_to_parts
        schema:
          example:
          - PROD-12345
          items:
            type: string
          type: array
      - description: |
          Filters for question-answers created by any of the provided users.
        explode: false
        in: query
        name: created_by
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of question-answers to return. The default is
          '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Filters for question-answers owned by any of the provided users.
        explode: false
        in: query
        name: owned_by
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/question-answers-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - question-answers
      x-request-name: ListQuestionAnswersQuery
    post:
      description: Lists a collection of question-answers.
      operationId: list-question-answers-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/question-answers-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/question-answers-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - question-answers
  /question-answers.update:
    post:
      description: Updates a question-answer.
      operationId: update-question-answer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/question-answers-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/question-answers-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - question-answers
  /rev-orgs.create:
    post:
      description: |
        Creates a Rev organization in the authenticated user's Dev
        organization.
      operationId: rev-orgs-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-orgs-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "409":
          $ref: '#/components/responses/conflict'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-orgs
  /rev-orgs.get:
    get:
      description: Retrieves the Rev organization's information.
      operationId: rev-orgs-get
      parameters:
      - description: |
          The ID of account for which default Rev organization is to be
          fetched.
        explode: false
        in: query
        name: account
        schema:
          example: ACC-12345
          type: string
      - description: The ID of the required Rev organization.
        explode: false
        in: query
        name: id
        schema:
          example: REV-AbCdEfGh
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-orgs
      x-request-name: RevOrgsGetQuery
    post:
      description: Retrieves the Rev organization's information.
      operationId: rev-orgs-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-orgs-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-orgs
  /rev-orgs.list:
    get:
      description: |
        Gets the list of Rev organizations' information belonging to the
        authenticated user's Dev Organization which the user is also authorized
        to access.
      operationId: rev-orgs-list
      parameters:
      - description: Filters by account.
        explode: false
        in: query
        name: account
        schema:
          example:
          - ACC-12345
          items:
            type: string
          type: array
      - description: Filters by creator.
        explode: false
        in: query
        name: created_by
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: created_date.after
        schema:
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: created_date.before
        schema:
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          Filters on custom fields. Input will be of the format
          (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
        explode: false
        in: query
        name: custom_field_filter
        schema:
          items:
            type: string
          type: array
      - description: Filters for custom fields.
        explode: false
        in: query
        name: custom_fields
        schema:
          type: object
      - description: Array of display names of Rev orgs to be filtered.
        explode: false
        in: query
        name: display_name
        schema:
          items:
            type: string
          type: array
      - description: List of external refs to filter Rev organizations for.
        explode: false
        in: query
        name: external_ref
        schema:
          items:
            type: string
          type: array
      - description: |
          The maximum number of Rev organizations to be retrieved per page.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: modified_date.after
        schema:
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: modified_date.before
        schema:
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      - description: |
          Fields to sort the Rev organizations by and the direction to sort
          them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: List of tags to be filtered.
        explode: false
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-orgs
      x-request-name: RevOrgsListQuery
    post:
      description: |
        Gets the list of Rev organizations' information belonging to the
        authenticated user's Dev Organization which the user is also authorized
        to access.
      operationId: rev-orgs-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-orgs-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-orgs
  /rev-orgs.update:
    post:
      description: Updates the Rev organization's information.
      operationId: rev-orgs-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-orgs-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "409":
          $ref: '#/components/responses/conflict'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-orgs
  /rev-users.create:
    post:
      description: |
        Creates a Rev user for a Rev organization. Rev user can be a customer
        or a lead of an organization.
      operationId: rev-users-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "409":
          $ref: '#/components/responses/conflict'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
  /rev-users.delete:
    post:
      description: Deletes a Rev user.
      operationId: rev-users-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
  /rev-users.get:
    get:
      description: Returns the Rev user of a Rev organization by its ID.
      operationId: rev-users-get
      parameters:
      - description: The ID of Rev user to be retrieved.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-request-name: RevUsersGetQuery
    post:
      description: Returns the Rev user of a Rev organization by its ID.
      operationId: rev-users-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
  /rev-users.link:
    post:
      description: Links a rev user to a rev org.
      operationId: link-rev-user-to-rev-org
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/link-rev-user-to-rev-org-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/link-rev-user-to-rev-org-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
  /rev-users.list:
    get:
      description: |
        Returns a list of all Rev Users belonging to the authenticated user's
        Dev Organization.
      operationId: rev-users-list
      parameters:
      - description: |
          Filters for Rev users that were created by the specified user(s).
        explode: false
        in: query
        name: created_by
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: created_date.after
        schema:
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: created_date.before
        schema:
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: Filters for custom fields.
        explode: false
        in: query
        name: custom_fields
        schema:
          type: object
      - description: List of emails of Rev users to be filtered.
        explode: false
        in: query
        name: email
        schema:
          items:
            type: string
          type: array
      - description: List of external refs to filter Rev users for.
        explode: false
        in: query
        name: external_ref
        schema:
          items:
            type: string
          type: array
      - description: Value of is_verified field to filter the Rev users.
        explode: false
        in: query
        name: is_verified
        schema:
          type: boolean
      - description: |
          The maximum number of Rev users to return. The default is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: modified_date.after
        schema:
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: modified_date.before
        schema:
          example: "2023-01-01T12:00:00.000Z"
          format: date-time
          type: string
      - description: |
          List of phone numbers, in E.164 format, to filter Rev users on.
        explode: false
        in: query
        name: phone_numbers
        schema:
          items:
            type: string
          type: array
      - description: List of IDs of Rev organizations to be filtered.
        explode: false
        in: query
        name: rev_org
        schema:
          example:
          - REV-AbCdEfGh
          items:
            type: string
          type: array
      - description: |
          Fields to sort the Rev users by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: List of tags to be filtered.
        explode: false
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-request-name: RevUsersListQuery
    post:
      description: |
        Returns a list of all Rev Users belonging to the authenticated user's
        Dev Organization.
      operationId: rev-users-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
  /rev-users.unlink:
    post:
      description: Unlinks a rev user from a rev org.
      operationId: unlink-rev-user-from-rev-org
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/unlink-rev-user-from-rev-org-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unlink-rev-user-from-rev-org-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
  /rev-users.update:
    post:
      description: Updates a Rev user.
      operationId: rev-users-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "409":
          $ref: '#/components/responses/conflict'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
  /schemas.aggregated.get:
    get:
      description: Gets the aggregated schema.
      operationId: aggregated-schema-get
      parameters:
      - description: |
          The list of custom schema fragment DONs which are to be aggregated.
        explode: false
        in: query
        name: custom_schema_fragment_ids
        required: true
        schema:
          items:
            type: string
          type: array
      - description: |
          The leaf type. Used for inferring the default stage diagram and
          tenant fragment ID.
        explode: false
        in: query
        name: leaf_type
        schema:
          type: string
      - description: The stock schema fragment which is to be aggregated.
        explode: false
        in: query
        name: stock_schema_fragment_id
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/aggregated-schema-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-request-name: AggregatedSchemaGetQuery
    post:
      description: Gets the aggregated schema.
      operationId: aggregated-schema-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/aggregated-schema-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/aggregated-schema-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
  /schemas.custom.get:
    get:
      description: Gets a custom schema fragment.
      operationId: custom-schema-fragments-get
      parameters:
      - description: The ID of the custom schema fragment.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-schema-fragments-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-request-name: CustomSchemaFragmentsGetQuery
    post:
      description: Gets a custom schema fragment.
      operationId: custom-schema-fragments-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-schema-fragments-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-schema-fragments-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
  /schemas.custom.list:
    get:
      description: Lists custom schema fragments.
      operationId: custom-schema-fragments-list
      parameters:
      - description: The list of app names.
        explode: false
        in: query
        name: app
        schema:
          items:
            type: string
          type: array
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: Whether only deprecated fragments should be filtered.
        explode: false
        in: query
        name: deprecated
        schema:
          type: boolean
      - description: The list of leaf types.
        explode: false
        in: query
        name: leaf_type
        schema:
          items:
            type: string
          type: array
      - description: The maximum number of items.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          List of fields which are not required in the payload and can be
          pruned away.
        explode: false
        in: query
        name: prune
        schema:
          items:
            $ref: '#/components/schemas/custom-schema-fragments-list-request-prune'
          type: array
      - description: |
          The list of fields to sort the items by and how to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: The list of subtypes.
        explode: false
        in: query
        name: subtype
        schema:
          items:
            type: string
          type: array
      - description: Filters for custom schema fragment of the provided types.
        explode: false
        in: query
        name: types
        schema:
          items:
            $ref: '#/components/schemas/custom-schema-fragment-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-schema-fragments-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-request-name: CustomSchemaFragmentsListQuery
    post:
      description: Lists custom schema fragments.
      operationId: custom-schema-fragments-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-schema-fragments-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-schema-fragments-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
  /schemas.custom.set:
    post:
      description: Creates or updates a custom schema fragment.
      operationId: custom-schema-fragments-set
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-schema-fragments-set-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-schema-fragments-set-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
  /schemas.stock.get:
    get:
      description: Gets a stock schema fragment.
      operationId: stock-schema-fragments-get
      parameters:
      - description: The ID of the stock schema fragment.
        explode: false
        in: query
        name: id
        schema:
          type: string
      - description: The leaf type this fragment applies to.
        explode: false
        in: query
        name: leaf_type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stock-schema-fragments-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-request-name: StockSchemaFragmentsGetQuery
    post:
      description: Gets a stock schema fragment.
      operationId: stock-schema-fragments-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stock-schema-fragments-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stock-schema-fragments-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
  /schemas.stock.list:
    get:
      description: Lists stock schema fragments.
      operationId: stock-schema-fragments-list
      parameters:
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          Filter preset to specify whether to filter only customization enabled
          leaf types.
        explode: false
        in: query
        name: filter_preset
        schema:
          $ref: '#/components/schemas/stock-schema-fragments-list-request-filter-preset'
      - description: The list of leaf types.
        explode: false
        in: query
        name: leaf_type
        schema:
          items:
            type: string
          type: array
      - description: The maximum number of items.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          List of fields which are not required in the payload and can be
          pruned away.
        explode: false
        in: query
        name: prune
        schema:
          items:
            $ref: '#/components/schemas/stock-schema-fragments-list-request-prune'
          type: array
      - description: |
          The list of fields to sort the items by and how to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stock-schema-fragments-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-request-name: StockSchemaFragmentsListQuery
    post:
      description: Lists stock schema fragments.
      operationId: stock-schema-fragments-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stock-schema-fragments-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stock-schema-fragments-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
  /schemas.subtypes.list:
    get:
      description: Lists subtypes.
      operationId: subtypes-list
      parameters:
      - description: Leaf type for which subtypes are required.
        explode: false
        in: query
        name: leaf_type
        schema:
          deprecated: true
          type: string
      - description: List of leaf types for which subtypes are required.
        explode: false
        in: query
        name: leaf_types
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subtypes-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-request-name: SubtypesListQuery
    post:
      description: Lists subtypes.
      operationId: subtypes-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subtypes-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subtypes-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
  /search.core:
    get:
      description: Searches for records based on a given query.
      operationId: search-core
      parameters:
      - description: |
          The query string. Search query language:
          https://docs.devrev.ai/product/search#fields
        explode: false
        in: query
        name: query
        required: true
        schema:
          type: string
      - description: |
          The cursor from where to begin iteration. Start from beginning if not
          provided.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of items to return in a page. The default is '10'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: The namespaces to search in.
        explode: false
        in: query
        name: namespaces
        schema:
          items:
            $ref: '#/components/schemas/search-namespace'
          type: array
      - description: |
          The property on which to sort the search results. The default is
          RELEVANCE.
        explode: false
        in: query
        name: sort_by
        schema:
          $ref: '#/components/schemas/search-sort-by-param'
      - description: Sorting order. The default is DESCENDING.
        explode: false
        in: query
        name: sort_order
        schema:
          $ref: '#/components/schemas/search-sort-order-param'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search-core-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - search
      x-request-name: SearchCoreQuery
    post:
      description: Searches for records based on a given query.
      operationId: search-core-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/search-core-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search-core-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - search
  /search.hybrid:
    get:
      description: |
        Performs search, using a combination of syntactic and semantic search.
      operationId: search-hybrid
      parameters:
      - description: The hybrid namespace to search in.
        explode: false
        in: query
        name: namespace
        required: true
        schema:
          $ref: '#/components/schemas/search-hybrid-namespace'
      - description: The query string.
        explode: false
        in: query
        name: query
        required: true
        schema:
          maxLength: 400
          minLength: 1
          type: string
      - description: |
          The maximum number of items to return in a page. The default is '10'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          maximum: 50
          minimum: 0
          type: integer
      - description: |
          The weightage for semantic search. Values between 0 and 1 are
          accepted.
        explode: false
        in: query
        name: semantic_weight
        schema:
          format: float
          maximum: 1
          minimum: 0
          type: number
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search-hybrid-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - search
      x-request-name: SearchHybridQuery
    post:
      description: |
        Performs search, using a combination of syntactic and semantic search.
      operationId: search-hybrid-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/search-hybrid-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search-hybrid-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - search
  /service-accounts.get:
    get:
      description: Gets a service account.
      operationId: service-accounts-get
      parameters:
      - description: The ID of the requested service account.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-accounts-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - service-accounts
      x-request-name: ServiceAccountsGetQuery
    post:
      description: Gets a service account.
      operationId: service-accounts-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service-accounts-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-accounts-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - service-accounts
  /slas.assign:
    post:
      description: ' Assigns the SLA to a set of Rev organizations.'
      operationId: slas-assign
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/slas-assign-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-assign-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - slas
  /slas.create:
    post:
      description: Creates an SLA in draft status.
      operationId: slas-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/slas-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - slas
  /slas.get:
    get:
      description: Gets an SLA.
      operationId: slas-get
      parameters:
      - description: The ID of the SLA to get.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - slas
      x-request-name: SlasGetQuery
    post:
      description: Gets an SLA.
      operationId: slas-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/slas-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - slas
  /slas.list:
    get:
      description: Lists SLAs matching a filter.
      operationId: slas-list
      parameters:
      - description: The object types the SLA applies to.
        explode: false
        in: query
        name: applies_to
        schema:
          items:
            $ref: '#/components/schemas/sla-applies-to'
          type: array
      - description: |
          The Filter operator to be applied on the applies to object types
          filter.
        explode: false
        in: query
        name: applies_to_op
        schema:
          $ref: '#/components/schemas/slas-filter-applies-to-operator-type'
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: The maximum number of SLAs to return. The default is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: The SLA types the filter matches.
        explode: false
        in: query
        name: sla_type
        schema:
          items:
            $ref: '#/components/schemas/sla-type'
          type: array
      - description: The SLA statuses the filter matches.
        explode: false
        in: query
        name: status
        schema:
          items:
            $ref: '#/components/schemas/sla-status'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - slas
      x-request-name: SlasListQuery
    post:
      description: Lists SLAs matching a filter.
      operationId: slas-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/slas-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - slas
  /slas.transition:
    post:
      description: Changes the status of an SLA.
      operationId: slas-transition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/slas-transition-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-transition-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - slas
  /slas.update:
    post:
      description: Updates a draft SLA.
      operationId: slas-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/slas-update-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - slas
  /snap-ins.resources:
    get:
      description: Gets snap-in resources for a user in a snap-in.
      operationId: snap-ins-resources
      parameters:
      - description: The ID of the snap-in to get resources for.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      - description: The ID of the user to get resources for.
        explode: false
        in: query
        name: user
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-ins-resources-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-ins
      x-request-name: SnapInsResourcesQuery
    post:
      description: Gets snap-in resources for a user in a snap-in.
      operationId: snap-ins-resources-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snap-ins-resources-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-ins-resources-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-ins
  /snap-widgets.create:
    post:
      description: Create a snap widget object.
      operationId: snap-widgets-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snap-widgets-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-widgets-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-widgets
  /stages.custom.create:
    post:
      description: Creates a custom stage.
      operationId: custom-stages-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-stages-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-stages-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
  /stages.custom.get:
    get:
      description: Gets a custom stage.
      operationId: custom-stages-get
      parameters:
      - description: The ID of the custom stage to get.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-stages-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-request-name: CustomStagesGetQuery
    post:
      description: Gets a custom stage.
      operationId: custom-stages-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-stages-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-stages-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
  /stages.custom.list:
    get:
      description: Lists custom stages.
      operationId: custom-stages-list
      parameters:
      - description: |
          The cursor to resume iteration from, otherwise if not provided, then
          iteration starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: The maximum number of items.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: The list of stage names.
        explode: false
        in: query
        name: name
        schema:
          items:
            type: string
          type: array
      - description: The list of stage ordinals.
        explode: false
        in: query
        name: ordinal
        schema:
          items:
            format: int32
            type: integer
          type: array
      - description: |
          The list of fields to sort the items by and how to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-stages-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-request-name: CustomStagesListQuery
    post:
      description: Lists custom stages.
      operationId: custom-stages-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-stages-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-stages-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
  /stages.custom.update:
    post:
      description: Updates a custom stage.
      operationId: custom-stages-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-stages-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-stages-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
  /states.custom.create:
    post:
      description: Creates a custom state.
      operationId: custom-states-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-states-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-states-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
  /states.custom.get:
    get:
      description: Gets a custom state.
      operationId: custom-states-get
      parameters:
      - description: The ID of the custom state to get.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-states-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-request-name: CustomStatesGetQuery
    post:
      description: Gets a custom state.
      operationId: custom-states-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-states-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-states-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
  /states.custom.list:
    get:
      description: Lists custom states.
      operationId: custom-states-list
      parameters:
      - description: |
          The cursor to resume iteration from, otherwise if not provided, then
          iteration starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: Whether only final states should be filtered.
        explode: false
        in: query
        name: is_final
        schema:
          type: boolean
      - description: The maximum number of items.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: The list of state names.
        explode: false
        in: query
        name: name
        schema:
          items:
            type: string
          type: array
      - description: The list of state ordinals.
        explode: false
        in: query
        name: ordinal
        schema:
          items:
            format: int32
            type: integer
          type: array
      - description: |
          The list of fields to sort the items by and how to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-states-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-request-name: CustomStatesListQuery
    post:
      description: Lists custom states.
      operationId: custom-states-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-states-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-states-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
  /states.custom.update:
    post:
      description: Updates a custom state.
      operationId: custom-states-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-states-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-states-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
  /surveys.create:
    post:
      description: |
        Creates a schema for survey, which includes name and description of
        schema.
      operationId: surveys-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/surveys-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/surveys-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - surveys
  /surveys.delete:
    post:
      description: Deletes the specified survey.
      operationId: surveys-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/surveys-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/surveys-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - surveys
  /surveys.list:
    get:
      description: List surveys requested by the user.
      operationId: surveys-list
      parameters:
      - description: Filters for surveys created by any of these users.
        explode: false
        in: query
        name: created_by
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of surveys to return. If not set, then the default
          is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: Filters for surveys by name(s).
        explode: false
        in: query
        name: name
        schema:
          items:
            type: string
          type: array
      - description: |
          Fields to sort the surveys by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/surveys-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - surveys
      x-request-name: SurveysListQuery
    post:
      description: List surveys requested by the user.
      operationId: surveys-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/surveys-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/surveys-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - surveys
  /surveys.responses.list:
    get:
      description: List survey responses requested by the user.
      operationId: surveys-responses-list
      parameters:
      - description: |
          Filters for survey responses created by any of these users.
        explode: false
        in: query
        name: created_by
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of survey responses to return. If not set, then
          the default is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: Filters for survey responses created for the objects.
        explode: false
        in: query
        name: objects
        schema:
          example:
          - ACC-12345
          items:
            type: string
          type: array
      - description: |
          Fields to sort the survey responses by and the direction to sort
          them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: Filters for survey response stages.
        explode: false
        in: query
        name: stages
        schema:
          items:
            format: int64
            type: integer
          type: array
      - description: Filters for survey responses for the provided survey IDs.
        explode: false
        in: query
        name: surveys
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/surveys-responses-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - surveys
      x-request-name: SurveysResponsesListQuery
    post:
      description: List survey responses requested by the user.
      operationId: surveys-responses-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/surveys-responses-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/surveys-responses-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - surveys
  /surveys.send:
    post:
      description: Sends a survey on the specified channels.
      operationId: surveys-send
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/surveys-send-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/surveys-send-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - surveys
  /surveys.submit:
    post:
      description: |
        Submits a user response to a survey, which is defined by the survey ID.
      operationId: surveys-submit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/surveys-submit-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/surveys-submit-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - surveys
  /sys-users.list:
    get:
      description: Lists system users within your organization.
      operationId: sys-users-list
      parameters:
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of system users to return. Value can range from
          '1' to '100', with a default of '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Fields to sort the system users by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys-users-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - sys-users
      x-request-name: SysUsersListQuery
    post:
      description: Lists system users within your organization.
      operationId: sys-users-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sys-users-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys-users-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - sys-users
  /sys-users.update:
    post:
      description: Updates the system user.
      operationId: sys-users-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sys-users-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys-users-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - sys-users
  /timeline-entries.create:
    post:
      description: Creates a new entry on an object's timeline.
      operationId: timeline-entries-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timeline-entries-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - timeline-entries
  /timeline-entries.list:
    get:
      description: Lists the timeline entries for an object.
      operationId: timeline-entries-list
      parameters:
      - description: The ID of the object to list timeline entries for.
        explode: false
        in: query
        name: object
        required: true
        schema:
          example: PROD-12345
          type: string
      - description: |
          The collection(s) to list entries from, otherwise if not provided,
          all entries are returned.
        explode: false
        in: query
        name: collections
        schema:
          items:
            $ref: '#/components/schemas/timeline-entries-collection'
          type: array
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          Filters for entries containing at least one of the provided labels,
          otherwise if no labels are provided, then no label filtering is done.
        explode: false
        in: query
        name: labels
        schema:
          items:
            type: string
          maxLength: 64
          minLength: 1
          type: array
      - description: |
          The maximum number of entries to return. If not set, then this
          defaults to `50`.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          The visibility of the timeline entries to filter for. Note this is a
          strict filter, such that only entries with the exact visibilities
          specified will be returned.
        explode: false
        in: query
        name: visibility
        schema:
          items:
            $ref: '#/components/schemas/timeline-entry-visibility'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - timeline-entries
      x-request-name: TimelineEntriesListQuery
    post:
      description: Lists the timeline entries for an object.
      operationId: timeline-entries-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timeline-entries-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - timeline-entries
  /timeline-entries.update:
    post:
      description: Updates an entry on an object's timeline.
      operationId: timeline-entries-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timeline-entries-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - timeline-entries
  /track-events.publish:
    post:
      description: Allows publishing of events (example from plug widget).
      operationId: track-events-publish
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/track-events-publish-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/track-events-publish-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - event-source
  /uoms.count:
    get:
      description: |
        Counts the number of Unit of Measurements based on the given filters.
      operationId: uoms-count
      parameters:
      - description: List of aggregation types for filtering list of UOMs.
        explode: false
        in: query
        name: aggregation_types
        schema:
          items:
            $ref: '#/components/schemas/aggregation-detail-aggregation-type'
          type: array
      - description: |
          List of Unit of Measurement (UOM) DONs to be used in filtering
          complete list of UOMs defined in a Dev Org.
        explode: false
        in: query
        name: ids
        schema:
          items:
            type: string
          type: array
      - description: List of metric names for filtering list of UOMs.
        explode: false
        in: query
        name: metric_names
        schema:
          items:
            type: string
          type: array
      - description: List of part IDs for filtering list of UOMs.
        explode: false
        in: query
        name: part_ids
        schema:
          example:
          - PROD-12345
          items:
            type: string
          type: array
      - description: List of product IDs for filtering list of UOMs.
        explode: false
        in: query
        name: product_ids
        schema:
          example:
          - PROD-12345
          items:
            type: string
          type: array
      - description: List of unit types for filtering list of UOMs.
        explode: false
        in: query
        name: unit_types
        schema:
          items:
            $ref: '#/components/schemas/unit-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uoms-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - product-usage
      x-request-name: UomsCountQuery
    post:
      description: |
        Counts the number of Unit of Measurements based on the given filters.
      operationId: uoms-count-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/uoms-count-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uoms-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - product-usage
  /uoms.create:
    post:
      description: Creates a Unit of Measurement on a part.
      operationId: uoms-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/uoms-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uoms-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - product-usage
  /uoms.delete:
    post:
      description: Deletes a Unit of Measurement.
      operationId: uoms-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/uoms-delete-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - product-usage
  /uoms.get:
    get:
      description: Gets a Unit of Measurement.
      operationId: uoms-get
      parameters:
      - description: The Unit of Measurement (UOM)'s DON.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uoms-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - product-usage
      x-request-name: UomsGetQuery
    post:
      description: Gets a Unit of Measurement.
      operationId: uoms-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/uoms-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uoms-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - product-usage
  /uoms.list:
    get:
      description: Gets the Unit of Measurements based on the given filters.
      operationId: uoms-list
      parameters:
      - description: List of aggregation types for filtering list of UOMs.
        explode: false
        in: query
        name: aggregation_types
        schema:
          items:
            $ref: '#/components/schemas/aggregation-detail-aggregation-type'
          type: array
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          List of Unit of Measurement (UOM) DONs to be used in filtering
          complete list of UOMs defined in a Dev Org.
        explode: false
        in: query
        name: ids
        schema:
          items:
            type: string
          type: array
      - description: |
          The maximum number of UOMs to be returned in a response. The default
          is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: List of metric names for filtering list of UOMs.
        explode: false
        in: query
        name: metric_names
        schema:
          items:
            type: string
          type: array
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: List of part IDs for filtering list of UOMs.
        explode: false
        in: query
        name: part_ids
        schema:
          example:
          - PROD-12345
          items:
            type: string
          type: array
      - description: List of product IDs for filtering list of UOMs.
        explode: false
        in: query
        name: product_ids
        schema:
          example:
          - PROD-12345
          items:
            type: string
          type: array
      - description: |
          Fields to sort the Unit Of Measuments (UOMs) by and the direction to
          sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: List of unit types for filtering list of UOMs.
        explode: false
        in: query
        name: unit_types
        schema:
          items:
            $ref: '#/components/schemas/unit-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uoms-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - product-usage
      x-request-name: UomsListQuery
    post:
      description: Gets the Unit of Measurements based on the given filters.
      operationId: uoms-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/uoms-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uoms-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - product-usage
  /uoms.update:
    post:
      description: Updates a Unit of Measurement.
      operationId: uoms-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/uoms-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uoms-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - product-usage
  /works.create:
    post:
      description: |
        Creates new work ([issue](https://devrev.ai/docs/product/build),
        [ticket](https://devrev.ai/docs/product/support)) item.
        [task](https://docs.devrev.ai/product/tasks) and opportunity work types
        are supported in the beta version.
      operationId: works-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
  /works.delete:
    post:
      description: Deletes a work item.
      operationId: works-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
  /works.export:
    get:
      description: Exports a collection of work items.
      operationId: works-export
      parameters:
      - description: Filters for work belonging to any of the provided parts.
        explode: false
        in: query
        name: applies_to_part
        schema:
          example:
          - PROD-12345
          items:
            type: string
          type: array
      - description: Filters for work created by any of these users.
        explode: false
        in: query
        name: created_by
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      - description: Filters for custom fields.
        explode: false
        in: query
        name: custom_fields
        schema:
          type: object
      - description: |
          The number of work items to return. The default is '50', the maximum
          is '5000'.
        explode: false
        in: query
        name: first
        schema:
          format: int32
          type: integer
      - description: Filters for issues with any of the provided Accounts.
        explode: false
        in: query
        name: issue.accounts
        schema:
          example:
          - ACC-12345
          items:
            type: string
          type: array
      - description: Filters for issues with any of the provided priorities.
        explode: false
        in: query
        name: issue.priority
        schema:
          items:
            $ref: '#/components/schemas/issue-priority'
          type: array
      - description: |
          Filters for issues with any of the provided priority enum ids.
        explode: false
        in: query
        name: issue.priority_v2
        schema:
          items:
            format: int64
            type: integer
          type: array
      - description: |
          Filters for issues with any of the provided Rev organizations.
        explode: false
        in: query
        name: issue.rev_orgs
        schema:
          example:
          - REV-AbCdEfGh
          items:
            type: string
          type: array
      - description: Filters for issues with any of the sprint.
        explode: false
        in: query
        name: issue.sprint
        schema:
          items:
            type: string
          type: array
      - description: Filters for issues with any of the provided subtypes.
        explode: false
        in: query
        name: issue.subtype
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for opportunities belonging to any of the provided accounts.
        explode: false
        in: query
        name: opportunity.account
        schema:
          example:
          - ACC-12345
          items:
            type: string
          type: array
      - description: |
          Filters for opportunities with any of the provided contacts.
        explode: false
        in: query
        name: opportunity.contacts
        schema:
          items:
            type: string
          type: array
      - description: Filters for opportunity with any of the provided subtypes.
        explode: false
        in: query
        name: opportunity.subtype
        schema:
          items:
            type: string
          type: array
      - description: Filters for work owned by any of these users.
        explode: false
        in: query
        name: owned_by
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      - description: Filters for work reported by any of these users.
        explode: false
        in: query
        name: reported_by
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      - description: |
          Fields to sort the work items by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: Filters for records in the provided stage(s) by name.
        explode: false
        in: query
        name: stage.name
        schema:
          items:
            type: string
          type: array
      - description: Filters for issues that are staged.
        explode: false
        in: query
        name: staged_info.is_staged
        schema:
          type: boolean
      - description: Filters for works with selected sync statuses.
        explode: false
        in: query
        name: sync_metadata.last_sync_in.status
        schema:
          items:
            $ref: '#/components/schemas/sync-metadata-filter-sync-in-filter-status'
          type: array
      - description: Filters for works modified with selected sync units.
        explode: false
        in: query
        name: sync_metadata.last_sync_in.sync_unit
        schema:
          items:
            type: string
          type: array
      - description: Filters for works with selected sync statuses.
        explode: false
        in: query
        name: sync_metadata.last_sync_out.status
        schema:
          items:
            $ref: '#/components/schemas/sync-metadata-filter-sync-out-filter-status'
          type: array
      - description: Filters for works modified with selected sync units.
        explode: false
        in: query
        name: sync_metadata.last_sync_out.sync_unit
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for issues synced from this specific origin system.
        explode: false
        in: query
        name: sync_metadata.origin_system
        schema:
          items:
            type: string
          type: array
      - description: Filters for work with any of the provided tags.
        explode: false
        in: query
        name: tags
        schema:
          example:
          - TAG-12345
          items:
            type: string
          type: array
      - description: Filters for tickets with any of the provided channels.
        explode: false
        in: query
        name: ticket.channels
        schema:
          items:
            $ref: '#/components/schemas/ticket-channels'
          type: array
      - description: Filters for tickets belonging to specific groups.
        explode: false
        in: query
        name: ticket.group
        schema:
          items:
            type: string
          type: array
      - description: Filters for tickets that are spam.
        explode: false
        in: query
        name: ticket.is_spam
        schema:
          type: boolean
      - description: Filters for tickets that need response.
        explode: false
        in: query
        name: ticket.needs_response
        schema:
          type: boolean
      - description: |
          Filters for tickets that are associated with any of the provided Rev
          organizations.
        explode: false
        in: query
        name: ticket.rev_org
        schema:
          example:
          - REV-AbCdEfGh
          items:
            type: string
          type: array
      - description: Filters for tickets with any of the provided severities.
        explode: false
        in: query
        name: ticket.severity
        schema:
          items:
            $ref: '#/components/schemas/ticket-severity'
          type: array
      - description: Filters for records with any of the provided SLA stages.
        explode: false
        in: query
        name: ticket.sla_summary.stage
        schema:
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
      - description: |
          Filters for tickets with any of the provided source channels.
        explode: false
        in: query
        name: ticket.source_channel
        schema:
          items:
            type: string
          type: array
      - description: Filters for tickets with any of the provided subtypes.
        explode: false
        in: query
        name: ticket.subtype
        schema:
          items:
            type: string
          type: array
      - description: Filters for work of the provided types.
        explode: false
        in: query
        name: type
        schema:
          items:
            $ref: '#/components/schemas/work-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-export-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
      x-request-name: WorksExportQuery
    post:
      description: Exports a collection of work items.
      operationId: works-export-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-export-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-export-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
  /works.get:
    get:
      description: Gets a work item's information.
      operationId: works-get
      parameters:
      - description: The work's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          example: ISS-12345
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
      x-request-name: WorksGetQuery
    post:
      description: Gets a work item's information.
      operationId: works-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
  /works.list:
    get:
      description: Lists a collection of work items.
      operationId: works-list
      parameters:
      - description: Filters for work belonging to any of the provided parts.
        explode: false
        in: query
        name: applies_to_part
        schema:
          example:
          - PROD-12345
          items:
            type: string
          type: array
      - description: Filters for work created by any of these users.
        explode: false
        in: query
        name: created_by
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: Filters for custom fields.
        explode: false
        in: query
        name: custom_fields
        schema:
          type: object
      - description: Filters for issues with any of the provided Accounts.
        explode: false
        in: query
        name: issue.accounts
        schema:
          example:
          - ACC-12345
          items:
            type: string
          type: array
      - description: Filters for issues with any of the provided priorities.
        explode: false
        in: query
        name: issue.priority
        schema:
          items:
            $ref: '#/components/schemas/issue-priority'
          type: array
      - description: |
          Filters for issues with any of the provided priority enum ids.
        explode: false
        in: query
        name: issue.priority_v2
        schema:
          items:
            format: int64
            type: integer
          type: array
      - description: |
          Filters for issues with any of the provided Rev organizations.
        explode: false
        in: query
        name: issue.rev_orgs
        schema:
          example:
          - REV-AbCdEfGh
          items:
            type: string
          type: array
      - description: Filters for issues with any of the sprint.
        explode: false
        in: query
        name: issue.sprint
        schema:
          items:
            type: string
          type: array
      - description: Filters for issues with any of the provided subtypes.
        explode: false
        in: query
        name: issue.subtype
        schema:
          items:
            type: string
          type: array
      - description: |
          The maximum number of works to return. The default is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Filters for opportunities belonging to any of the provided accounts.
        explode: false
        in: query
        name: opportunity.account
        schema:
          example:
          - ACC-12345
          items:
            type: string
          type: array
      - description: |
          Filters for opportunities with any of the provided contacts.
        explode: false
        in: query
        name: opportunity.contacts
        schema:
          items:
            type: string
          type: array
      - description: Filters for opportunity with any of the provided subtypes.
        explode: false
        in: query
        name: opportunity.subtype
        schema:
          items:
            type: string
          type: array
      - description: Filters for work owned by any of these users.
        explode: false
        in: query
        name: owned_by
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      - description: Filters for work reported by any of these users.
        explode: false
        in: query
        name: reported_by
        schema:
          example:
          - DEVU-12345
          items:
            type: string
          type: array
      - description: |
          Fields to sort the works by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: Filters for records in the provided stage(s) by name.
        explode: false
        in: query
        name: stage.name
        schema:
          items:
            type: string
          type: array
      - description: Filters for issues that are staged.
        explode: false
        in: query
        name: staged_info.is_staged
        schema:
          type: boolean
      - description: Filters for works with selected sync statuses.
        explode: false
        in: query
        name: sync_metadata.last_sync_in.status
        schema:
          items:
            $ref: '#/components/schemas/sync-metadata-filter-sync-in-filter-status'
          type: array
      - description: Filters for works modified with selected sync units.
        explode: false
        in: query
        name: sync_metadata.last_sync_in.sync_unit
        schema:
          items:
            type: string
          type: array
      - description: Filters for works with selected sync statuses.
        explode: false
        in: query
        name: sync_metadata.last_sync_out.status
        schema:
          items:
            $ref: '#/components/schemas/sync-metadata-filter-sync-out-filter-status'
          type: array
      - description: Filters for works modified with selected sync units.
        explode: false
        in: query
        name: sync_metadata.last_sync_out.sync_unit
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for issues synced from this specific origin system.
        explode: false
        in: query
        name: sync_metadata.origin_system
        schema:
          items:
            type: string
          type: array
      - description: Filters for work with any of the provided tags.
        explode: false
        in: query
        name: tags
        schema:
          example:
          - TAG-12345
          items:
            type: string
          type: array
      - description: Filters for tickets with any of the provided channels.
        explode: false
        in: query
        name: ticket.channels
        schema:
          items:
            $ref: '#/components/schemas/ticket-channels'
          type: array
      - description: Filters for tickets belonging to specific groups.
        explode: false
        in: query
        name: ticket.group
        schema:
          items:
            type: string
          type: array
      - description: Filters for tickets that are spam.
        explode: false
        in: query
        name: ticket.is_spam
        schema:
          type: boolean
      - description: Filters for tickets that need response.
        explode: false
        in: query
        name: ticket.needs_response
        schema:
          type: boolean
      - description: |
          Filters for tickets that are associated with any of the provided Rev
          organizations.
        explode: false
        in: query
        name: ticket.rev_org
        schema:
          example:
          - REV-AbCdEfGh
          items:
            type: string
          type: array
      - description: Filters for tickets with any of the provided severities.
        explode: false
        in: query
        name: ticket.severity
        schema:
          items:
            $ref: '#/components/schemas/ticket-severity'
          type: array
      - description: Filters for records with any of the provided SLA stages.
        explode: false
        in: query
        name: ticket.sla_summary.stage
        schema:
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
      - description: |
          Filters for tickets with any of the provided source channels.
        explode: false
        in: query
        name: ticket.source_channel
        schema:
          items:
            type: string
          type: array
      - description: Filters for tickets with any of the provided subtypes.
        explode: false
        in: query
        name: ticket.subtype
        schema:
          items:
            type: string
          type: array
      - description: Filters for work of the provided types.
        explode: false
        in: query
        name: type
        schema:
          items:
            $ref: '#/components/schemas/work-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
      x-request-name: WorksListQuery
    post:
      description: Lists a collection of work items.
      operationId: works-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
  /works.update:
    post:
      description: Updates a work item's information.
      operationId: works-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
security:
- auth-token: []
servers:
- description: DevRev API endpoint.
  url: 'https://api.devrev.ai'
  variables:
    hostname:
      default: api.devrev.ai
      description: API hostname.
    protocol:
      default: https
      description: API protocol.
tags:
- description: Accounts management APIs
  name: accounts
- description: Articles management APIs.
  name: articles
- description: Artifact (file) management APIs.
  name: artifacts
- description: Code change interactions.
  name: code-changes
- description: DevRev conversation interaction.
  name: conversations
- description: DevRev customization.
  name: customization
- description: Dev user interactions.
  name: dev-users
- description: DevRev engagements.
  name: engagements
- description: Event source interactions.
  name: event-source
- description: Manages groups in a Dev organization.
  name: groups
- description: DevRev link interactions.
  name: links
- description: DevRev part interactions.
  name: parts
- description: Product Usage APIs
  name: product-usage
- description: Plug Question-Answer APIs
  name: question-answers
- description: Rev organization interactions.
  name: rev-orgs
- description: Rev user interactions.
  name: rev-users
- description: Management APIs for availability schedules.
  name: schedules
- description: DevRev search.
  name: search
- description: Service account interactions
  name: service-accounts
- description: Management APIs for Service Level Agreements.
  name: slas
- description: DevRev snap-ins interactions.
  name: snap-ins
- description: SnapWidget APIs
  name: snap-widgets
- description: Surveys
  name: surveys
- description: System user interactions
  name: sys-users
- description: APIs to manage timeline entries for objects.
  name: timeline-entries
- description: DevRev work interactions.
  name: works